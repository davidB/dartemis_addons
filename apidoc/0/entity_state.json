{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"uri":"package:dartemis/dartemis.dart","name":"package:dartemis/dartemis.dart","id":"dartemis","children":[{"isAbstract":true,"superclass":{"refId":"dartemis/EntitySystem","name":"EntitySystem"},"comment":"\r\nA typical entity system. Use this when you need to process entities possessing the\nprovided component types.\n","uri":"package:dartemis/src/systems/entity_processing_system.dart","name":"EntityProcessingSystem","id":"EntityProcessingSystem","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\r\nProcess a [entity] this system is interested in.\n","name":"processEntity","id":"processEntity1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"entity","id":"entity","kind":"param"}],"line":"17","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"processEntities","id":"processEntities1()","children":[{"ref":{"refId":"dartemis/ReadOnlyBag","arguments":[{"refId":"dartemis/Entity","name":"Entity"}],"name":"ReadOnlyBag"},"name":"entities","id":"entities","kind":"param"}],"line":"19","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"checkProcessing","id":"checkProcessing0()","line":"21","kind":"method"},{"comment":"\r\nCreate a new [EntityProcessingSystem]. It requires at least one component.\n","name":"EntityProcessingSystem","id":"EntityProcessingSystem1()","children":[{"ref":{"refId":"dartemis/Aspect","name":"Aspect"},"name":"aspect","id":"aspect","kind":"param"}],"line":"12","kind":"constructor"}],"line":"7","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dartemis/EntityObserver","name":"EntityObserver"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\r\nThe most raw entity system. It should not typically be used, but you can create your own\nentity system handling by extending this. It is recommended that you use the other provided\nentity system implementations.\n\nThere is no need to ever call any other method than process on objects of this class.\n","uri":"package:dartemis/src/entity_system.dart","name":"EntitySystem","id":"EntitySystem","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\r\nCalled before processing of entities begins.\n","name":"begin","id":"begin0()","line":"36","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nThis is the only method that is supposed to be called from outside the library,\n","name":"process","id":"process0()","line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nCalled after the processing of entities ends.\n","name":"end","id":"end0()","line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nAny implementing entity system must implement this method and the logic\nto process the given [entities] of the system.\n","name":"processEntities","id":"processEntities1()","children":[{"ref":{"refId":"dartemis/ReadOnlyBag","arguments":[{"refId":"dartemis/Entity","name":"Entity"}],"name":"ReadOnlyBag"},"name":"entities","id":"entities","kind":"param"}],"line":"58","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\r\nReturns true if the system should be processed, false if not.\n","name":"checkProcessing","id":"checkProcessing0()","line":"63","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nOverride to implement code that gets executed when systems are initialized.\n","name":"initialize","id":"initialize0()","line":"68","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nCalled if the system has received an [entity] it is interested in, e.g. created or a component was added to it.\n","name":"inserted","id":"inserted1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"entity","id":"entity","kind":"param"}],"line":"73","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\r\nCalled if an [entity] was removed from this system, e.g. deleted or had one of it's components removed.\n","name":"removed","id":"removed1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"entity","id":"entity","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_check","isPrivate":true,"id":"_check1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"80","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"_contains","isPrivate":true,"id":"_contains1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_insertToSystem","isPrivate":true,"id":"_insertToSystem1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"102","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_removeFromSystem","isPrivate":true,"id":"_removeFromSystem1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"108","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"added","id":"added1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"114","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"changed","id":"changed1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"115","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"enabled","id":"enabled1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"deleted","id":"deleted1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"disabled","id":"disabled1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"124","kind":"method"},{"name":"passive","id":"passive","line":"31","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_systemBit","isPrivate":true,"id":"_systemBit","line":"13","kind":"variable"},{"ref":{"refId":"dartemis/World","name":"World"},"name":"world","id":"world","line":"14","kind":"variable"},{"ref":{"refId":"dartemis/Bag","arguments":[{"refId":"dartemis/Entity","name":"Entity"}],"name":"Bag"},"name":"_actives","isPrivate":true,"id":"_actives","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_all","isPrivate":true,"id":"_all","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_excluded","isPrivate":true,"id":"_excluded","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_one","isPrivate":true,"id":"_one","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_dummy","isPrivate":true,"id":"_dummy","line":"20","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_passive","isPrivate":true,"id":"_passive","line":"21","kind":"variable"},{"name":"EntitySystem","id":"EntitySystem1()","children":[{"ref":{"refId":"dartemis/Aspect","name":"Aspect"},"name":"aspect","id":"aspect","kind":"param"}],"line":"23","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:dartemis/src/entity_observer.dart","name":"EntityObserver","id":"EntityObserver","children":[{"returnType":{"refId":"void","name":"void"},"name":"added","id":"added1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"5","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"changed","id":"changed1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"7","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"deleted","id":"deleted1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"9","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"enabled","id":"enabled1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"11","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"disabled","id":"disabled1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"13","kind":"method"}],"line":"3","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\r\nAll components extend from this class.\n\nIf you want to use a poolable component that will be added to a FreeList when\nit is being removed use [ComponentPoolable] instead.\n","uri":"package:dartemis/src/component.dart","name":"Component","id":"Component","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Does nothing in [Component], only relevant for [ComponentPoolable].","name":"_removed","isPrivate":true,"id":"_removed0()","line":"11","kind":"method"}],"line":"9","kind":"class"}],"line":"1","kind":"library"}],"uri":"dartemis_addons/lib/entity_state.dart","id":"entity_state","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"EntityState","id":"EntityState","children":[{"returnType":{"refId":"void","name":"void"},"name":"add","id":"add1()","children":[{"ref":{"refId":"entity_state/ComponentProvider","name":"ComponentProvider"},"name":"provider","id":"provider","kind":"param"}],"line":"191","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dartemis_addons/lib/entity_state.dart","name":"ComponentProvider","id":"ComponentProvider","line":"197","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"197","kind":"method"},{"returnType":{"refId":"entity_state/ComponentProvider","name":"ComponentProvider"},"name":"getByType","id":"getByType1()","children":[{"ref":{"refId":"dartemis/ComponentType","name":"ComponentType"},"name":"type","id":"type","kind":"param"}],"line":"201","kind":"method"},{"isFinal":true,"name":"_componentProviderByType","isPrivate":true,"id":"_componentProviderByType","line":"186","kind":"variable"},{"isFinal":true,"name":"_indicesP","isPrivate":true,"id":"_indicesP","line":"187","kind":"variable"},{"isFinal":true,"name":"modifiers","id":"modifiers","line":"189","kind":"variable"}],"line":"185","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"ComponentModifier","id":"ComponentModifier","children":[{"returnType":{"refId":"void","name":"void"},"name":"applyE","id":"applyE1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"176","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"applyC","id":"applyC1()","children":[{"ref":{"refId":"entity_state/ComponentModifier/T","name":"T"},"name":"c","id":"c","kind":"param"}],"line":"180","kind":"method"},{"ref":{"refId":"dartemis/ComponentType","name":"ComponentType"},"isFinal":true,"name":"type","id":"type","line":"169","kind":"variable"},{"ref":{"refId":"entity_state/ModifyComponent","name":"ModifyComponent"},"isFinal":true,"name":"modifyComponent","id":"modifyComponent","line":"170","kind":"variable"},{"name":"ComponentModifier","id":"ComponentModifier2()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"ctype","id":"ctype","kind":"param"},{"initializedField":{"refId":"entity_state/ComponentModifier/modifyComponent","name":"modifyComponent"},"ref":{"refId":"entity_state/ModifyComponent","name":"ModifyComponent"},"name":"modifyComponent","id":"modifyComponent","kind":"param"}],"line":"174","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"168","kind":"class"},{"returnType":{"refId":"void","name":"void"},"comment":"\nModify an existing component [c] of the entity.\n","name":"ModifyComponent","id":"ModifyComponent","children":[{"ref":{"refId":"entity_state/ModifyComponent/T","name":"T"},"name":"c","id":"c","kind":"param"},{"name":"T","id":"T","kind":"typeparam"}],"line":"166","kind":"typedef"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"ComponentProvider","id":"ComponentProvider","children":[{"isStatic":true,"name":"alwaysNewId","id":"alwaysNewId0()","line":"142","kind":"method"},{"isStatic":true,"name":"nullId","id":"nullId0()","line":"143","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"_cnt","isPrivate":true,"id":"_cnt","line":"141","kind":"variable"},{"ref":{"refId":"dartemis/ComponentType","name":"ComponentType"},"isFinal":true,"comment":"Type of the provided Component","name":"type","id":"type","line":"146","kind":"variable"},{"ref":{"refId":"entity_state/CreateComponent","name":"CreateComponent"},"isFinal":true,"name":"createComponent","id":"createComponent","line":"148","kind":"variable"},{"ref":{"refId":"entity_state/ComponentProviderId","name":"ComponentProviderId"},"isFinal":true,"name":"id","id":"id","line":"150","kind":"variable"},{"comment":"\nCreates a new [ComponentProvider].\n\nThe [createComponent] alsways has to create a [Component] that is returned\nusing the factory constructor of that [Component]. Do not return the same\ninstance for multiple calls, because it will be added to [FreeComponents]\nwhen it gets removed from the entity on a state change.\n","name":"ComponentProvider","id":"ComponentProvider3()","children":[{"ref":{"refId":"dart.core/Type","name":"Type"},"name":"ctype","id":"ctype","kind":"param"},{"initializedField":{"refId":"entity_state/ComponentProvider/createComponent","name":"createComponent"},"ref":{"refId":"entity_state/CreateComponent","name":"CreateComponent"},"name":"createComponent","id":"createComponent","kind":"param"},{"initializedField":{"refId":"entity_state/ComponentProvider/id","name":"id"},"ref":{"refId":"entity_state/ComponentProviderId","name":"ComponentProviderId"},"isOptional":true,"defaultValue":"nullId","name":"id","id":"id","kind":"param"}],"line":"160","kind":"constructor"}],"line":"140","kind":"class"},{"comment":"\nReturns an identifier that is used to determine whether two component providers will\nreturn the equivalent components.\n\nIf an entity is changing state and the state it is leaving and the state is is\nentering have components of the same type, then the identifiers of the component\nprovders are compared. If the two identifiers are the same then the component\nis not removed. If they are different, the component from the old state is removed\nand a component for the new state is added.\n","name":"ComponentProviderId","id":"ComponentProviderId","line":"138","kind":"typedef"},{"returnType":{"refId":"dartemis/Component","name":"Component"},"comment":"\nCreates a component that can be added to the entity [e]\n(but it should not add component to entity [e]).\n","name":"CreateComponent","id":"CreateComponent","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"}],"line":"126","kind":"typedef"},{"superclass":{"refId":"dartemis/EntityProcessingSystem","name":"EntityProcessingSystem"},"comment":"\nA System applying [EntityState] on [Entity] based on its [EntityStateComponent].\nApplying = added/removed/modified [Component] of the [Entity].\nThe System will update [EntityStateComponent.currentState] and\n[EntityStateComponent.previousState].\n\nBased on <http://www.richardlord.net/blog/finite-state-machines-with-ash> but\nwithout the EntityStateMachine, because :\n\n* [EntityState] changes are applying only on existing [Entity]\n  via [EntityProcessingSystem] behavior of [EntityStateSystem].\n* If a [EntitySystem] change [EntityStateComponent.state],\n  the [Component] of [Entity] aren't added/modify/removed, so internal\n  [ComponentMapper] of the System aren't impacted, and Aspect constraints\n  of the System are keep.\n* Other [EntitySystem] can compare the value of\n  [EntityStateComponent.previousState] and [EntityStateComponent.currentState]\n  to check if state has been changed since last process (to trigger some\n  modifications).\n* More EntitySystem way of doing (IMHO)\n","name":"System_EntityState","id":"System_EntityState","children":[{"returnType":{"refId":"void","name":"void"},"name":"initialize","id":"initialize0()","line":"77","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"processEntity","id":"processEntity1()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"entity","id":"entity","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_changeStateOf","isPrivate":true,"id":"_changeStateOf3()","children":[{"ref":{"refId":"dartemis/Entity","name":"Entity"},"name":"e","id":"e","kind":"param"},{"ref":{"refId":"entity_state/EntityState","name":"EntityState"},"name":"current","id":"current","kind":"param"},{"ref":{"refId":"entity_state/EntityState","name":"EntityState"},"name":"next","id":"next","kind":"param"}],"line":"93","kind":"method"},{"ref":{"refId":"dartemis/ComponentMapper","arguments":[{"refId":"entity_state/EntityStateComponent","name":"EntityStateComponent"}],"name":"ComponentMapper"},"name":"_escMapper","isPrivate":true,"id":"_escMapper","line":"73","kind":"variable"},{"name":"System_EntityState","id":"System_EntityState0()","line":"75","kind":"constructor"}],"line":"72","kind":"class"},{"superclass":{"refId":"dartemis/Component","name":"Component"},"comment":"\nA component containing information about [EntityState] to used for the component.\n\nBased on <http://www.richardlord.net/blog/finite-state-machines-with-ash>\n","name":"EntityStateComponent","id":"EntityStateComponent","children":[{"comment":"the name of the current state.","name":"currentState","id":"currentState","line":"43","kind":"property"},{"comment":"the name of the previous state (before last [EntityStateSystem.process()])","name":"previousState","id":"previousState","line":"45","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_currentState","isPrivate":true,"id":"_currentState","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_previousState","isPrivate":true,"id":"_previousState","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"entity_state/EntityState","name":"EntityState"}],"name":"Map"},"name":"_states","isPrivate":true,"id":"_states","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"the name of the 'virtual' state (if != currentState, then it be after next\n[EntityStateSystem.process()]","name":"state","id":"state","line":"40","kind":"variable"},{"name":"EntityStateComponent","id":"EntityStateComponent2()","children":[{"initializedField":{"refId":"entity_state/EntityStateComponent/state","name":"state"},"ref":{"refId":"dart.core/int","name":"int"},"name":"state","id":"state","kind":"param"},{"initializedField":{"refId":"entity_state/EntityStateComponent/_states","name":"_states"},"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"entity_state/EntityState","name":"EntityState"}],"name":"Map"},"name":"_states","isPrivate":true,"id":"_states","kind":"param"}],"line":"48","kind":"constructor"}],"line":"33","kind":"class"}],"line":"25","kind":"library"}