{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"dartemis_toolbox/lib/collisions.dart","id":"collisions","children":[{"uri":"dartemis_toolbox/lib/collisions/quadtreexy.dart","name":"_debug_drawCount","isPrivate":true,"id":"_debug_drawCount2()","children":[{"ref":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"name":"v","id":"v","kind":"param"},{"name":"g","id":"g","kind":"param"}],"line":"248","kind":"method"},{"uri":"dartemis_toolbox/lib/collisions/quadtreexy.dart","name":"_debug_drawAxis","isPrivate":true,"id":"_debug_drawAxis2()","children":[{"ref":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"name":"v","id":"v","kind":"param"},{"name":"g","id":"g","kind":"param"}],"line":"236","kind":"method"},{"uri":"dartemis_toolbox/lib/collisions/quadtreexy.dart","name":"newDrawCanvas_QuadTreeXYAabb","id":"newDrawCanvas_QuadTreeXYAabb3()","children":[{"ref":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"name":"v","id":"v","kind":"param"},{"name":"lineStyle","id":"lineStyle","kind":"param"},{"name":"textStyle","id":"textStyle","kind":"param"}],"line":"226","kind":"method"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"/// see\n/// * [Quadtree](http://en.wikipedia.org/wiki/Quadtree) at wikipedia\n/// * [JavaScript QuadTree Implementation](http://www.mikechambers.com/blog/2011/03/21/javascript-quadtree-implementation/)\n/// * [Quick Tip: Use Quadtrees to Detect Likely Collisions in 2D Space](http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/)\nsee\n* [Quadtree](http://en.wikipedia.org/wiki/Quadtree) at wikipedia\n* [JavaScript QuadTree Implementation](http://www.mikechambers.com/blog/2011/03/21/javascript-quadtree-implementation/)\n* [Quick Tip: Use Quadtrees to Detect Likely Collisions in 2D Space](http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/)\nTODO add testcase","uri":"dartemis_toolbox/lib/collisions/quadtreexy.dart","name":"QuadTreeXYAabb","id":"QuadTreeXYAabb","children":[{"comment":"use [reset] to reset the instance instead of create a new one with same bounds.","name":"reset","id":"reset0()","line":"113","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"insert","id":"insert2()","children":[{"ref":{"refId":"vector_math/Aabb3","name":"Aabb3"},"name":"v","id":"v","kind":"param"},{"name":"obj","id":"obj","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"name":"findRegion","id":"findRegion1()","children":[{"ref":{"refId":"vector_math/Aabb3","name":"Aabb3"},"name":"v","id":"v","kind":"param"}],"line":"129","kind":"method"},{"name":"_findRegion","isPrivate":true,"id":"_findRegion1()","children":[{"ref":{"refId":"vector_math/Aabb3","name":"Aabb3"},"name":"v","id":"v","kind":"param"}],"line":"136","kind":"method"},{"name":"_insert","isPrivate":true,"id":"_insert2()","children":[{"ref":{"refId":"vector_math/Aabb3","name":"Aabb3"},"name":"v","id":"v","kind":"param"},{"name":"obj","id":"obj","kind":"param"}],"line":"146","kind":"method"},{"name":"_split","isPrivate":true,"id":"_split0()","line":"161","kind":"method"},{"name":"retrieve","id":"retrieve2()","children":[{"ref":{"refId":"vector_math/Aabb3","name":"Aabb3"},"name":"v","id":"v","kind":"param"},{"ref":{"refId":"dart.core/List","name":"List"},"name":"out","id":"out","kind":"param"}],"line":"182","kind":"method"},{"name":"scan","id":"scan1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","kind":"param"}],"line":"193","kind":"method"},{"name":"_scanVsNodes","isPrivate":true,"id":"_scanVsNodes2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","kind":"param"},{"name":"a1","id":"a1","kind":"param"}],"line":"208","kind":"method"},{"name":"_scanVsChildren","isPrivate":true,"id":"_scanVsChildren2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","kind":"param"},{"name":"a1","id":"a1","kind":"param"}],"line":"218","kind":"method"},{"name":"isLeaf","id":"isLeaf","line":"108","kind":"property"},{"name":"nbItems","id":"nbItems","line":"109","kind":"property"},{"name":"nbItemsL0","id":"nbItemsL0","line":"110","kind":"property"},{"isFinal":true,"comment":"(x, y, width, height) bounds of the QuadTree","name":"_dim","isPrivate":true,"id":"_dim","line":"88","kind":"variable"},{"isFinal":true,"name":"_splitPoint","isPrivate":true,"id":"_splitPoint","line":"89","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Whether the QuadTree will contain points (true), or items with bounds (width / height)(false).","name":"maxDepth","id":"maxDepth","line":"92","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"The maximum number of children that a node can contain before it is split into sub-nodes.","name":"maxChildren","id":"maxChildren","line":"94","kind":"variable"},{"isFinal":true,"name":"_children","isPrivate":true,"id":"_children","line":"97","kind":"variable"},{"isFinal":true,"name":"_nodes","isPrivate":true,"id":"_nodes","line":"99","kind":"variable"},{"name":"_isLeaf","isPrivate":true,"id":"_isLeaf","line":"100","kind":"variable"},{"name":"","id":"6()","children":[{"name":"x","id":"x","kind":"param"},{"name":"y","id":"y","kind":"param"},{"name":"w","id":"w","kind":"param"},{"name":"h","id":"h","kind":"param"},{"initializedField":{"refId":"collisions/QuadTreeXYAabb/maxDepth","name":"maxDepth"},"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"4","name":"maxDepth","id":"maxDepth","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"4","name":"maxChildren","id":"maxChildren","kind":"param"}],"line":"102","kind":"constructor"}],"line":"86","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/space.dart","name":"_ProviderStack","isPrivate":true,"id":"_ProviderStack","children":[{"returnType":{"refId":"collisions/_ProviderStack/E","name":"E"},"name":"provide","id":"provide0()","line":"229","kind":"method"},{"name":"reset","id":"reset0()","line":"242","kind":"method"},{"name":"freemem","id":"freemem0()","line":"246","kind":"method"},{"name":"capacity","id":"capacity","line":"251","kind":"property"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"createE","id":"createE","line":"224","kind":"variable"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"resetE","id":"resetE","line":"225","kind":"variable"},{"isFinal":true,"name":"_stack","isPrivate":true,"id":"_stack","line":"226","kind":"variable"},{"name":"_nextI","isPrivate":true,"id":"_nextI","line":"227","kind":"variable"},{"name":"E","id":"E","kind":"typeparam"}],"line":"223","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/space.dart","name":"_SQE","isPrivate":true,"id":"_SQE","children":[{"isStatic":true,"name":"ctor","id":"ctor0()","line":"215","kind":"method"},{"isStatic":true,"name":"reset","id":"reset1()","children":[{"name":"e","id":"e","kind":"param"}],"line":"216","kind":"method"},{"isFinal":true,"name":"aabb","id":"aabb","line":"210","kind":"variable"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","line":"211","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","line":"212","kind":"variable"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"segment","id":"segment","line":"213","kind":"variable"}],"line":"209","kind":"class"},{"interfaces":[{"refId":"collisions/Space","name":"Space"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Raw space (no optimisation, no grid, no quadtree, no ...) every particles\nare check against every particles (inter [Particles] and intra [Particles] group)\nand check against every [Segment]","uri":"dartemis_toolbox/lib/collisions/space.dart","name":"Space_QuadtreeXY","id":"Space_QuadtreeXY","children":[{"returnType":{"refId":"void","name":"void"},"name":"reset","id":"reset0()","line":"140","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"return true if at least one [ps].collide != 0 (the Particles [ps] is included in the space)","name":"addParticles","id":"addParticles1()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","kind":"param"}],"line":"146","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"return true if [seg].collide != 0 (the Segment [seg] is include in the space)","name":"addSegment","id":"addSegment1()","children":[{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"seg","id":"seg","kind":"param"}],"line":"166","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"handleCollision","id":"handleCollision0()","line":"178","kind":"method"},{"name":"_handle0","isPrivate":true,"id":"_handle02()","children":[{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e1","id":"e1","kind":"param"},{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e2","id":"e2","kind":"param"}],"line":"182","kind":"method"},{"name":"_handlePP","isPrivate":true,"id":"_handlePP2()","children":[{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e1","id":"e1","kind":"param"},{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e2","id":"e2","kind":"param"}],"line":"191","kind":"method"},{"name":"_handlePS","isPrivate":true,"id":"_handlePS2()","children":[{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e1","id":"e1","kind":"param"},{"ref":{"refId":"collisions/_SQE","name":"_SQE"},"name":"e2","id":"e2","kind":"param"}],"line":"199","kind":"method"},{"ref":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"isFinal":true,"name":"_grid","isPrivate":true,"id":"_grid","line":"128","kind":"variable"},{"ref":{"refId":"collisions/Checker","name":"Checker"},"isFinal":true,"name":"checker","id":"checker","line":"129","kind":"variable"},{"ref":{"refId":"collisions/Resolver","name":"Resolver"},"isFinal":true,"name":"resolver","id":"resolver","line":"130","kind":"variable"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"isFinal":true,"name":"_scol","isPrivate":true,"id":"_scol","line":"131","kind":"variable"},{"isFinal":true,"name":"_pool","isPrivate":true,"id":"_pool","line":"133","kind":"variable"},{"name":"","id":"3()","children":[{"initializedField":{"refId":"collisions/Space_QuadtreeXY/checker","name":"checker"},"ref":{"refId":"collisions/Checker","name":"Checker"},"name":"checker","id":"checker","kind":"param"},{"initializedField":{"refId":"collisions/Space_QuadtreeXY/resolver","name":"resolver"},"ref":{"refId":"collisions/Resolver","name":"Resolver"},"name":"resolver","id":"resolver","kind":"param"},{"isNamed":true,"ref":{"refId":"collisions/QuadTreeXYAabb","name":"QuadTreeXYAabb"},"isOptional":true,"name":"grid","id":"grid","kind":"param"}],"line":"138","kind":"constructor"}],"line":"127","kind":"class"},{"interfaces":[{"refId":"collisions/Space","name":"Space"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Raw space (no optimisation, no grid, no quadtree, no ...) every particles\nare check against every particles (inter [Particles] and intra [Particles] group)\nand check against every [Segment]","uri":"dartemis_toolbox/lib/collisions/space.dart","name":"Space_XY0","id":"Space_XY0","children":[{"returnType":{"refId":"void","name":"void"},"name":"reset","id":"reset0()","line":"32","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"return true if at least one [ps].collide != 0 (the Particles [ps] is included in the space)","name":"addParticles","id":"addParticles1()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"return true if [seg].collide != 0 (the Segment [seg] is include in the space)","name":"addSegment","id":"addSegment1()","children":[{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"seg","id":"seg","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"handleCollision","id":"handleCollision0()","line":"65","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_detectCollisionInterParticles","isPrivate":true,"id":"_detectCollisionInterParticles1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"73","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_detectCollisionIntraParticles","isPrivate":true,"id":"_detectCollisionIntraParticles1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"91","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_detectCollisionParticlesSegments","isPrivate":true,"id":"_detectCollisionParticlesSegments1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"}],"line":"107","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"system_particles/Particles","name":"Particles"}],"name":"List"},"isFinal":true,"name":"_particlesS","isPrivate":true,"id":"_particlesS","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"system_particles/Segment","name":"Segment"}],"name":"List"},"isFinal":true,"name":"_segments","isPrivate":true,"id":"_segments","line":"25","kind":"variable"},{"ref":{"refId":"collisions/Checker","name":"Checker"},"isFinal":true,"name":"checker","id":"checker","line":"26","kind":"variable"},{"ref":{"refId":"collisions/Resolver","name":"Resolver"},"isFinal":true,"name":"resolver","id":"resolver","line":"27","kind":"variable"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"isFinal":true,"name":"_scol","isPrivate":true,"id":"_scol","line":"28","kind":"variable"},{"name":"","id":"2()","children":[{"initializedField":{"refId":"collisions/Space_XY0/checker","name":"checker"},"ref":{"refId":"collisions/Checker","name":"Checker"},"name":"checker","id":"checker","kind":"param"},{"initializedField":{"refId":"collisions/Space_XY0/resolver","name":"resolver"},"ref":{"refId":"collisions/Resolver","name":"Resolver"},"name":"resolver","id":"resolver","kind":"param"}],"line":"30","kind":"constructor"}],"line":"22","kind":"class"},{"interfaces":[{"refId":"collisions/Space","name":"Space"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/space.dart","name":"Space_Noop","id":"Space_Noop","children":[{"returnType":{"refId":"void","name":"void"},"name":"reset","id":"reset0()","line":"13","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"addParticles","id":"addParticles1()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","kind":"param"}],"line":"14","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"addSegment","id":"addSegment1()","children":[{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"seg","id":"seg","kind":"param"}],"line":"15","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"handleCollision","id":"handleCollision0()","line":"16","kind":"method"}],"line":"12","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/space.dart","name":"Space","id":"Space","children":[{"returnType":{"refId":"void","name":"void"},"name":"reset","id":"reset0()","line":"6","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"addParticles","id":"addParticles1()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","kind":"param"}],"line":"7","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"addSegment","id":"addSegment1()","children":[{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"seg","id":"seg","kind":"param"}],"line":"8","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"handleCollision","id":"handleCollision0()","line":"9","kind":"method"}],"line":"5","kind":"class"},{"interfaces":[{"refId":"collisions/Resolver","name":"Resolver"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/resolver.dart","name":"Resolver_Backward","id":"Resolver_Backward","children":[{"name":"backward","id":"backward3()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"vc","id":"vc","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"vp","id":"vp","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleSegment","id":"notifyCollisionParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleParticle","id":"notifyCollisionParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"40","kind":"method"}],"line":"24","kind":"class"},{"interfaces":[{"refId":"collisions/Resolver","name":"Resolver"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/resolver.dart","name":"Resolver_Print","id":"Resolver_Print","children":[{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleSegment","id":"notifyCollisionParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleParticle","id":"notifyCollisionParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"19","kind":"method"}],"line":"15","kind":"class"},{"interfaces":[{"refId":"collisions/Resolver","name":"Resolver"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/resolver.dart","name":"Resolver_Noop","id":"Resolver_Noop","children":[{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleSegment","id":"notifyCollisionParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"11","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleParticle","id":"notifyCollisionParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"12","kind":"method"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/resolver.dart","name":"Resolver","id":"Resolver","children":[{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleSegment","id":"notifyCollisionParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"6","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"notifyCollisionParticleParticle","id":"notifyCollisionParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"tcoll","id":"tcoll","kind":"param"}],"line":"7","kind":"method"}],"line":"5","kind":"class"},{"interfaces":[{"refId":"collisions/Checker","name":"Checker"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Check by intersection of polygon particles are converted into rectangle :\n * width : start/end point x 2 radius (normal of displacement),\n * longer : displacement\nSegment : previous[s.i1], previous[s.i2], current[s.i2], current[s.i1] (ignore radius)","uri":"dartemis_toolbox/lib/collisions/checker.dart","name":"Checker_MvtAsPoly4","id":"Checker_MvtAsPoly4","children":[{"comment":"Returns whether two particles A ([psA] + [iA]) and B [psB] + [iB]) intersect\n[psA.collide[iA]] and [psB.collide[iB]] are set to true if collision.\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.\ntake care of radius of each particle","name":"collideParticleParticle","id":"collideParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"acol","id":"acol","kind":"param"}],"line":"133","kind":"method"},{"comment":"Returns whether the provided particle A and the segment [s]\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.","name":"collideParticleSegment","id":"collideParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"scol","id":"scol","kind":"param"}],"line":"146","kind":"method"},{"name":"makePoly4","id":"makePoly43()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"ps","id":"ps","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"i","id":"i","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"vector_math/Vector3","name":"Vector3"}],"name":"List"},"name":"out","id":"out","kind":"param"}],"line":"163","kind":"method"},{"ref":{"refId":"utils_math/IntersectionFinder","name":"IntersectionFinder"},"isFinal":true,"name":"_intf","isPrivate":true,"id":"_intf","line":"124","kind":"variable"},{"name":"_v0","isPrivate":true,"id":"_v0","line":"125","kind":"variable"},{"name":"_poly0","isPrivate":true,"id":"_poly0","line":"126","kind":"variable"},{"name":"_poly1","isPrivate":true,"id":"_poly1","line":"127","kind":"variable"}],"line":"123","kind":"class"},{"interfaces":[{"refId":"collisions/Checker","name":"Checker"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Check only the current position3d of particles and segment","uri":"dartemis_toolbox/lib/collisions/checker.dart","name":"Checker_T1","id":"Checker_T1","children":[{"comment":"Returns whether two particles A ([psA] + [iA]) and B [psB] + [iB]) intersect\n[psA.collide[iA]] and [psB.collide[iB]] are set to true if collision.\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.\ntake care of radius of each particle","name":"collideParticleParticle","id":"collideParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"acol","id":"acol","kind":"param"}],"line":"94","kind":"method"},{"comment":"Returns whether the provided particle A and the segment [s]\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.\nonly check against last position of the segment","name":"collideParticleSegment","id":"collideParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"scol","id":"scol","kind":"param"}],"line":"107","kind":"method"},{"ref":{"refId":"utils_math/IntersectionFinder","name":"IntersectionFinder"},"isFinal":true,"name":"_intf","isPrivate":true,"id":"_intf","line":"88","kind":"variable"}],"line":"87","kind":"class"},{"interfaces":[{"refId":"collisions/Checker","name":"Checker"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Check against the last motion of particles and segment\n**Ignore radius of each particle**","uri":"dartemis_toolbox/lib/collisions/checker.dart","name":"Checker_ParticleMvt0","id":"Checker_ParticleMvt0","children":[{"comment":"Returns whether two particles A ([psA] + [iA]) and B [psB] + [iB]) intersect\n[psA.collide[iA]] and [psB.collide[iB]] are set to true if collision.\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.\n* **Ignore radius of each particle**\n* check against the movement of the particles A and B (previous -> current)","name":"collideParticleParticle","id":"collideParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"acol","id":"acol","kind":"param"}],"line":"29","kind":"method"},{"comment":"Returns whether the provided particle A and the segment from B intersect\nDoesn't check if provided particles are the same or part of same group,... should be done before calling.\n* **Ignore radius of each particle**\n* check against the movement of the particle A (previous -> current)\n* **Ignore movement of segment**, only check against last position of the segment","name":"collideParticleSegment","id":"collideParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"scol","id":"scol","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"utils_math/IntersectionFinder","name":"IntersectionFinder"},"isFinal":true,"name":"_intf","isPrivate":true,"id":"_intf","line":"19","kind":"variable"},{"isFinal":true,"name":"_v0","isPrivate":true,"id":"_v0","line":"20","kind":"variable"},{"isFinal":true,"name":"_v1","isPrivate":true,"id":"_v1","line":"21","kind":"variable"},{"isFinal":true,"name":"_v2","isPrivate":true,"id":"_v2","line":"22","kind":"variable"},{"isFinal":true,"name":"_v3","isPrivate":true,"id":"_v3","line":"23","kind":"variable"}],"line":"18","kind":"class"},{"interfaces":[{"refId":"collisions/Checker","name":"Checker"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/checker.dart","name":"Checker_Noop","id":"Checker_Noop","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"collideParticleParticle","id":"collideParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"acol","id":"acol","kind":"param"}],"line":"12","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"collideParticleSegment","id":"collideParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"scol","id":"scol","kind":"param"}],"line":"13","kind":"method"},{"name":"check","id":"check","line":"11","kind":"variable"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"dartemis_toolbox/lib/collisions/checker.dart","name":"Checker","id":"Checker","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"collideParticleParticle","id":"collideParticleParticle5()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psB","id":"psB","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iB","id":"iB","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"acol","id":"acol","kind":"param"}],"line":"6","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"collideParticleSegment","id":"collideParticleSegment4()","children":[{"ref":{"refId":"system_particles/Particles","name":"Particles"},"name":"psA","id":"psA","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"iA","id":"iA","kind":"param"},{"ref":{"refId":"system_particles/Segment","name":"Segment"},"name":"s","id":"s","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"scol","id":"scol","kind":"param"}],"line":"7","kind":"method"}],"line":"5","kind":"class"}],"line":"3","kind":"library"}