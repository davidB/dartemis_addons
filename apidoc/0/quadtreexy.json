{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"dartemis_toolbox/lib/quadtreexy.dart","id":"quadtreexy","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"see\n* [Quadtree](http://en.wikipedia.org/wiki/Quadtree) at wikipedia\n* [JavaScript QuadTree Implementation](http://www.mikechambers.com/blog/2011/03/21/javascript-quadtree-implementation/)\n* [Quick Tip: Use Quadtrees to Detect Likely Collisions in 2D Space](http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/)","name":"QuadTreeXY","id":"QuadTreeXY","children":[{"comment":"use [clear] to reset the instance isntead of create a new one with same bounds.","name":"clear","id":"clear0()","line":"29","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"insert","id":"insert1()","children":[{"ref":{"refId":"vector_math/vec3","name":"vec3"},"name":"v","id":"v","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"quadtreexy/QuadTreeXY","name":"QuadTreeXY"},"name":"findRegion","id":"findRegion1()","children":[{"ref":{"refId":"vector_math/vec3","name":"vec3"},"name":"v","id":"v","kind":"param"}],"line":"43","kind":"method"},{"name":"_insert","isPrivate":true,"id":"_insert1()","children":[{"ref":{"refId":"vector_math/vec3","name":"vec3"},"name":"v","id":"v","kind":"param"}],"line":"50","kind":"method"},{"name":"_split","isPrivate":true,"id":"_split0()","line":"59","kind":"method"},{"name":"_findRegion","isPrivate":true,"id":"_findRegion1()","children":[{"ref":{"refId":"vector_math/vec3","name":"vec3"},"name":"v","id":"v","kind":"param"}],"line":"69","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"(x, y, width, height) bounds of the QuadTree","name":"x","id":"x","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"(x, y, width, height) bounds of the QuadTree","name":"y","id":"y","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"(x, y, width, height) bounds of the QuadTree","name":"w","id":"w","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"(x, y, width, height) bounds of the QuadTree","name":"h","id":"h","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Whether the QuadTree will contain points (true), or items with bounds (width / height)(false).","name":"maxDepth","id":"maxDepth","line":"14","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"The maximum number of children that a node can contain before it is split into sub-nodes.","name":"maxChildren","id":"maxChildren","line":"16","kind":"variable"},{"isFinal":true,"name":"_children","isPrivate":true,"id":"_children","line":"18","kind":"variable"},{"isFinal":true,"name":"_nodes","isPrivate":true,"id":"_nodes","line":"20","kind":"variable"},{"name":"_isLeaf","isPrivate":true,"id":"_isLeaf","line":"21","kind":"variable"},{"ref":{"refId":"vector_math/vec2","name":"vec2"},"name":"_splitPoint","isPrivate":true,"id":"_splitPoint","line":"22","kind":"variable"},{"name":"QuadTreeXY","id":"QuadTreeXY6()","children":[{"initializedField":{"refId":"quadtreexy/QuadTreeXY/x","name":"x"},"ref":{"refId":"dart.core/int","name":"int"},"name":"x","id":"x","kind":"param"},{"initializedField":{"refId":"quadtreexy/QuadTreeXY/y","name":"y"},"ref":{"refId":"dart.core/int","name":"int"},"name":"y","id":"y","kind":"param"},{"initializedField":{"refId":"quadtreexy/QuadTreeXY/w","name":"w"},"ref":{"refId":"dart.core/int","name":"int"},"name":"w","id":"w","kind":"param"},{"initializedField":{"refId":"quadtreexy/QuadTreeXY/h","name":"h"},"ref":{"refId":"dart.core/int","name":"int"},"name":"h","id":"h","kind":"param"},{"initializedField":{"refId":"quadtreexy/QuadTreeXY/maxDepth","name":"maxDepth"},"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"4","name":"maxDepth","id":"maxDepth","kind":"param"},{"initializedField":{"refId":"quadtreexy/QuadTreeXY/maxChildren","name":"maxChildren"},"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"4","name":"maxChildren","id":"maxChildren","kind":"param"}],"line":"24","kind":"constructor"}],"line":"9","kind":"class"}],"line":"1","kind":"library"}