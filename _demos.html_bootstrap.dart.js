// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
    return false;
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i, str;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(1, separator, $length);
    if (!$.JSString_methods.get$isEmpty(separator)) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    var t1, first, buffer, i, str;
    if (!$.JSString_methods.get$isEmpty(separator)) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  where$1: function(_, test) {
    return $.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.JSNumber_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 !== (t2 | 0))
      return this.get$length$bailout2(2, $length, t2, t1);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t2, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
        if ($.JSNumber_methods.$ge(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 2:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(1, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(2, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
        t1 = this.get$_startIndex();
      case 1:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 2:
        if (state0 === 2 || state0 === 0 && !(index < 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 2:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, this._start + count, this._endOrLength, null);
  },
  $asListIterable: null,
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this.$asMappedIterable, 0), $.getRuntimeTypeArgument(this, this.$asMappedIterable, 1));
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_liblib$_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._liblib$_iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $asIterator: function (S, T) { return [T]; }
};

$$.MappedListIterable = {"": "ListIterable;_liblib$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, this.$asWhereIterable, 0));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.WhereIterator = {"": "Iterator;_liblib$_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._liblib$_iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._liblib$_iterator.get$current();
  },
  $asIterator: null
};

$$.TakeIterable = {"": "IterableBase;_iterable,_takeCount",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.TakeIterator$(t1.get$iterator(t1), this._takeCount, $.getRuntimeTypeArgument(this, this.$asTakeIterable, 0));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.TakeIterator = {"": "Iterator;_liblib$_iterator,_liblib$_remaining",
  moveNext$0: function() {
    this._liblib$_remaining = $.$sub$n(this._liblib$_remaining, 1);
    if ($.$ge$n(this._liblib$_remaining, 0))
      return this._liblib$_iterator.moveNext$0();
    this._liblib$_remaining = -1;
    return false;
  },
  get$current: function() {
    if ($.$lt$n(this._liblib$_remaining, 0))
      return;
    return this._liblib$_iterator.get$current();
  },
  TakeIterator$2: function(_iterator, _remaining, E) {
  },
  $asIterator: null
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, this._skipCount + n, $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.SkipIterator$(t1.get$iterator(t1), this._skipCount, $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || t1 < 0)
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SkipIterator = {"": "Iterator;_liblib$_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i;
    for (t1 = this._liblib$_iterator, i = 0; i < this._skipCount; ++i)
      t1.moveNext$0();
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._liblib$_iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
  },
  $asIterator: null
};

$$.ToString__emitPair_closure = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.HashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.HashMap_addAll_closure = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, this.$asHashMapKeyIterable, 0));
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.LinkedHashMap_addAll_closure = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_liblib1$_next@,_liblib1$_previous@"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications, $.getRuntimeTypeArgument(this, this.$asLinkedHashMapKeyIterable, 0));
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_liblib1$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_key();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  }
};

$$.LinkedHashSetCell = {"": "Object;_element<,_liblib1$_next@,_liblib1$_previous@"};

$$.LinkedHashSetIterator = {"": "Object;_set,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_element();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  },
  LinkedHashSetIterator$2: function(_set, _modifications, E) {
    this._cell = this._set._first;
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_liblib5$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__") === true)
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib5$_keys, new $.ConstantMap_forEach_closure(this, f));
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._liblib5$_keys, new $.ConstantMap_values_closure(this));
  },
  get$isEmpty: function(_) {
    return $.$eq(this.length, 0);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  $indexSet: function(_, key, val) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  remove$1: function(_, key) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  clear$0: function(_) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  $isMap: true,
  $asMap: function (V) { return [$.JSString, V]; }
};

$$.ConstantMap_forEach_closure = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
};

$$.ConstantMap_values_closure = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
};

$$.ConstantProtoMap = {"": "ConstantMap;_protoValue,length,_jsObject,_liblib5$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__") === true)
      return true;
    return $.ConstantMap.prototype.containsKey$1.call(this, key);
  },
  $index: function(_, key) {
    if ($.$eq(key, "__proto__") === true)
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $asConstantMap: null,
  $asMap: function (V) { return [$.JSString, V]; }
};

$$._ConstantMapKeyIterable = {"": "IterableBase;_liblib5$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib5$_map._liblib5$_keys);
  },
  $asIterableBase: function() { return [$.JSString]; },
  $asIterable: function() { return [$.JSString]; }
};

$$.NoSuchMethodError_toString_closure = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    str = $.Error_safeToString(value);
    str = typeof str === "string" ? str : $.S(str);
    t2._contents = t2._contents + str;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  },
  get$runtimeType: function(receiver) {
    return $.getRuntimeType(receiver);
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true
};

$$.JSBool = {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_a9w;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_woc;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function() { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      $.get$globalThis().postMessage(t1);
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.JSInt, $._IsolateContext);
    this.managers = $.Map_Map($.JSInt, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId) === true)
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map($.JSInt, $.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events._add$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        $.get$globalThis().postMessage(t1);
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
};

$$._ManagerStub = {"": "Object;", $is_ManagerStub: true, $as_ManagerStub: null};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null
};

$$.IsolateNatives__processWorkerMessage_closure = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.lazyPort = $.ReceivePortImpl$();
    this.replyTo_1.send$2("spawned", $._Isolate_port().toSendPort$0());
    this.entryPoint_0.call$0();
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._AsyncCompleter$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)));
    port._liblib4$_callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_closure = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._liblib4$_callback = null;
    $globalState.currentContext.unregister$1(t1._liblib4$_id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_liblib4$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_closure = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib4$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.events._add$1($._IsolateEvent$(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__closure = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib4$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._liblib4$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_closure = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState;
      $.get$globalThis().postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_liblib4$_id<,_liblib4$_callback<",
  _liblib4$_callback$2: function(arg0, arg1) {
    return this._liblib4$_callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().currentContext, this._liblib4$_id, this);
  },
  $isReceivePort: true
};

$$._waitForPendingPorts_closure = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_liblib4$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $._globalState;
      t1().topEventLoop.enqueue$3(t1().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.TimerImpl_internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
};

$$.JSArray = {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  addAll$1: function(receiver, collection) {
    var t1, e;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      e = t1.get$current();
      if (!!receiver.fixed$length)
        $.throwExpression($.UnsupportedError$("add"));
      receiver.push(e);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  take$1: function(receiver, n) {
    return $.SubListIterable$(receiver, 0, n, null);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = receiver.length, i = 0; i < t1; ++i)
      if (other === receiver[i])
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function() { return [null]; }, $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_closure = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_closure0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_closure1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Creates = {"": "Object;types"};

$$.Returns = {"": "Object;types"};

$$.JSName = {"": "Object;name"};

$$.Null = {"": "Object;"};

$$.TypeErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.FallThroughErrorImplementation = {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
};

$$.JSNumber = {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException($.ArgumentError$(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_8aB;
  },
  $not: function(receiver) {
    return ~receiver >>> 0;
  },
  $isint: true,
  $isnum: true
};

$$.JSDouble = {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_cGl;
  },
  $isdouble: true,
  $isnum: true
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isTypeImpl)
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true,
  $isType: true
};

$$.JSString = {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_IYi;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._Random = {"": "Object;"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression($.ArgumentError$(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  }
};

$$._MatchImplementation = {"": "Object;pattern,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
};

$$._AllMatchesIterable = {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterableBase: function() { return [$.Match]; },
  $asIterable: function() { return [$.Match]; }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib5$_current",
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    this._liblib5$_current = this._re.firstMatch$1(this._str);
    return this._liblib5$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if ($.$eq(g, 0) !== true)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
};

$$._Completer = {"": "Object;"};

$$._AsyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback);
      $._callbacksAreEnqueued = true;
    }
  },
  $as_Completer: null
};

$$._AsyncCompleter__setFutureValue_closure = {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  },
  $isFunction: true
};

$$._AsyncCompleter__setFutureError_closure = {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this, null);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_closure(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_closure(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = $._FutureListenerWrapper$(future, null);
      t1._nextListener = this._resultOrListeners;
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_closure = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_closure = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl__handleError_closure = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_closure = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    this._nextListener = future._resultOrListeners;
    future._resultOrListeners = this;
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  where$1: function(_, test) {
    return $._WhereStream$(this, test, $.getRuntimeTypeArgument(this, this.$asStream, 0));
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, this.$asStream, 0), null);
  },
  contains$1: function(_, match) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_contains_closure(t1, match, future), true, new $.Stream_contains_closure0(future), future.get$_setError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    future = $._FutureImpl$([$.JSArray, $.getRuntimeTypeArgument(this, this.$asStream, 0)]);
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_toList_closure(result), true, new $.Stream_toList_closure0(result, future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count, null);
  }
};

$$.Stream_contains_closure = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_2;
    $._runUserCode(new $.Stream_contains__closure(this.match_1, element), new $.Stream_contains__closure0(t1, t2), $._cancelAndError(t1.subscription_0, t2));
  },
  $isFunction: true
};

$$.Stream_contains__closure = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  },
  $isFunction: true
};

$$.Stream_contains__closure0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(true);
    }
  },
  $isFunction: true
};

$$.Stream_contains_closure0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_forEach_closure = {"": "Closure;box_0,action_1,future_2",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_1, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  },
  $isFunction: true
};

$$.Stream_forEach__closure = {"": "Closure;action_3,element_4",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  },
  $isFunction: true
};

$$.Stream_forEach__closure0 = {"": "Closure;",
  call$1: function(_) {
  },
  $isFunction: true
};

$$.Stream_forEach_closure0 = {"": "Closure;future_5",
  call$0: function() {
    this.future_5._setValue$1(null);
  },
  $isFunction: true
};

$$.Stream_length_closure = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_closure0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_closure = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_closure0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$._throwDelayed_closure = {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.JSNull_methods.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && t3.$eq(trace, t1) !== true)
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  },
  $isFunction: true
};

$$._cancelAndError_closure = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 0), $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 1));
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib10$_onData$1(data);
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _liblib10$_onData$1: function(arg0) {
    return this._liblib10$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone, T) {
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_cancelOnError<,_subscription@,_liblib10$_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BaseStreamSubscription: function (S, T) { return [T]; }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    if (satisfies === true)
      sink._liblib10$_onData$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    sink._liblib10$_onData$1(outputEvent);
  },
  $as_ForwardingStream: null
};

$$._TakeStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1;
    if ($.$gt$n(this._remaining, 0)) {
      sink._liblib10$_onData$1(inputEvent);
      this._remaining = $.$sub$n(this._remaining, 1);
      if ($.$eq(this._remaining, 0) === true) {
        t1 = sink._subscription;
        if (t1 != null) {
          t1.cancel$0();
          sink._subscription = null;
        }
        sink._onDone$0();
      }
    }
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1 = this._remaining;
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    sink._liblib10$_onData$1(inputEvent);
    return;
  },
  _SkipStream$2: function(source, count, T) {
    if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
      throw $.wrapException($.ArgumentError$(count));
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$.Timer_run_closure = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.HashMap = {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key) === true)
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$._HashSetBase = {"": "IterableBase;",
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, "") === true)
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException($.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {"": "Object;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (false) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.JSString_methods.get$hashCode(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._liblib1$_previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_liblib1$_previous();
    next = cell.get$_liblib1$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_liblib1$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_liblib1$_previous(previous);
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $isLinkedHashMap: true,
  $isMap: true
};

$$.LinkedHashSet = {"": "_HashSetBase;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    return $.LinkedHashSetIterator$(this, this._modifications, null);
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (false) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashSet__findBucketIndex(rest[$.JSString_methods.get$hashCode(object) & 0x3ffffff], object) >= 0;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_element());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.get$hashCode$(object) & 0x3ffffff];
      index = $.LinkedHashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  removeAll$1: function(objectsToRemove) {
    var t1;
    for (t1 = $.get$iterator$ax(objectsToRemove); t1.moveNext$0() === true;)
      this.remove$1(this, t1.get$current());
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = $.LinkedHashSetCell$(element);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._liblib1$_previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_liblib1$_previous();
    next = cell.get$_liblib1$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_liblib1$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_liblib1$_previous(previous);
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $as_HashSetBase: null,
  $asIterable: null
};

$$.ListBase = {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null};

$$.ListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      if (t1.$eq($length, this.get$length(receiver)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return $.$eq(this.get$length(receiver), 0);
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  contains$1: function(receiver, element) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      return this.contains$1$bailout(1, element, receiver, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.$index(receiver, i), element) === true)
        return true;
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  contains$1$bailout: function(state0, element, receiver, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.$index(receiver, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(receiver)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  where$1: function(receiver, test) {
    return $.WhereIterable$(receiver, test, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  skip$1: function(receiver, count) {
    return $.SubListIterable$(receiver, count, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, $.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i)
      if ($.$eq(this.$index(receiver, i), element) === true) {
        this.setRange$4(receiver, i, $.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
        return true;
      }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var result, t1, i, t2;
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException($.ArgumentError$(skipCount));
    otherStart = skipCount;
    otherList = iterable;
    if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.getInterceptor(otherList).$isJavaScriptIndexingBehavior))
      return this.setRange$4$bailout(3, start, 0, 0, 0, receiver, $length, $.JSNumber_methods, otherList, otherStart);
    if (otherStart + $length > otherList.length)
      throw $.wrapException($.StateError$("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList, otherStart) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0) === true)
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException($.ArgumentError$(skipCount));
        otherStart = skipCount;
        otherList = iterable;
      case 3:
        var t2, t3, i, t4;
        state0 = 0;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)))
          throw $.wrapException($.StateError$("Not enough elements"));
        if (t2.$lt(otherStart, start))
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t4 = $.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else
          for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
    }
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListQueue = {"": "IterableBase;_table,_liblib1$_head,_liblib1$_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._liblib1$_head; i !== this._liblib1$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._liblib1$_head === this._liblib1$_tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._liblib1$_tail, this._liblib1$_head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._liblib1$_head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!$.getInterceptor(elements).$isList)) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, t1, elements, 0);
        this._liblib1$_tail = $.$add$ns(this._liblib1$_tail, addCount);
      } else {
        t1 = this._liblib1$_tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, t1 + addCount, elements, 0);
          this._liblib1$_tail = $.$add$ns(this._liblib1$_tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, t1 + endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._liblib1$_tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._liblib1$_head; i !== this._liblib1$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object) === true) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._liblib1$_head;
    t1 = this._liblib1$_tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._liblib1$_tail = 0;
      this._liblib1$_head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._liblib1$_head === this._liblib1$_tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._liblib1$_head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._liblib1$_head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._liblib1$_head === this._liblib1$_tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._liblib1$_tail = $.$and$n($.$sub$n(this._liblib1$_tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._liblib1$_tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._liblib1$_tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._liblib1$_tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._liblib1$_head === this._liblib1$_tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._liblib1$_head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._liblib1$_tail;
    if (typeof t4 !== "number")
      return this._remove$1$bailout(1, offset, mask, startDistance, t4);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._liblib1$_head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._liblib1$_tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._liblib1$_tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, mask, startDistance, t1) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._liblib1$_head & mask) >>> 0;
        t1 = this._liblib1$_tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && startDistance < $.$and$n($.$sub$n(t1, offset), mask)) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._liblib1$_head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._liblib1$_head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._liblib1$_tail;
            case 2:
              state0 = 0;
              this._liblib1$_tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._liblib1$_tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 >>> 0 !== t3 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    t1 = this._table;
    t2 = this._liblib1$_head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._liblib1$_head, this._table, 0);
    this._liblib1$_head = 0;
    this._liblib1$_tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = this._liblib1$_head;
    t2 = this._liblib1$_tail;
    if ($.JSInt_methods.$le(t1, t2)) {
      $length = $.$sub$n(t2, t1);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._liblib1$_head);
      return $length;
    } else {
      t2 = this._table;
      firstPartSize = t2.length - t1;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t2, t1);
      t1 = this._liblib1$_tail;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t1, this._table, 0);
      return $.$add$ns(this._liblib1$_tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    this._liblib1$_tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._liblib1$_head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$._SplayTreeNode = {"": "Object;key>,left*,right*"};

$$._SplayTreeMapNode = {"": "_SplayTreeNode;value*,key,left,right", $as_SplayTreeNode: function (K, V) { return [K]; }};

$$._SplayTree = {"": "Object;",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, t2, tmp, current0;
    current = this._root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      t1 = $.getInterceptor$x(current);
      comp = this._compare$2(t1.get$key(current), key);
      t2 = $.getInterceptor$n(comp);
      if (t2.$gt(comp, 0)) {
        if (t1.get$left(current) == null)
          break;
        comp = this._compare$2($.get$key$x(t1.get$left(current)), key);
        if ($.$gt$n(comp, 0)) {
          tmp = t1.get$left(current);
          t2 = $.getInterceptor$x(tmp);
          t1.set$left(current, t2.get$right(tmp));
          t2.set$right(tmp, current);
          if (t2.get$left(tmp) == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        $.set$left$x(right, current);
        current0 = $.get$left$x(current);
        right = current;
        current = current0;
      } else {
        if (t2.$lt(comp, 0)) {
          if (t1.get$right(current) == null)
            break;
          comp = this._compare$2($.get$key$x(t1.get$right(current)), key);
          if ($.$lt$n(comp, 0)) {
            tmp = t1.get$right(current);
            t2 = $.getInterceptor$x(tmp);
            t1.set$right(current, t2.get$left(tmp));
            t2.set$left(tmp, current);
            if (t2.get$right(tmp) == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          $.set$right$x(left0, current);
          current0 = $.get$right$x(current);
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    t1 = $.getInterceptor$x(current);
    $.set$right$x(left0, t1.get$left(current));
    $.set$left$x(right, t1.get$right(current));
    t1.set$left(current, left.right);
    t1.set$right(current, left.left);
    this._root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _remove$1: function(key) {
    var result, t1, t2, right;
    if (this._root == null)
      return;
    if ($.$eq(this._splay$1(key), 0) !== true)
      return;
    result = this._root;
    this._count = this._count - 1;
    t1 = $.get$left$x(this._root);
    t2 = this._root;
    if (t1 == null)
      this._root = $.get$right$x(t2);
    else {
      right = $.get$right$x(t2);
      this._root = $.get$left$x(this._root);
      this._splay$1(key);
      $.set$right$x(this._root, right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _addNewRoot$2: function(node, comp) {
    var t1;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    t1 = this._root;
    if (t1 == null) {
      this._root = node;
      return;
    }
    if ($.$lt$n(comp, 0)) {
      node.left = t1;
      node.right = $.get$right$x(this._root);
      $.set$right$x(this._root, null);
    } else {
      node.right = t1;
      node.left = $.get$left$x(this._root);
      $.set$left$x(this._root, null);
    }
    this._root = node;
  }
};

$$.SplayTreeMap = {"": "_SplayTree;_comparator,_root,_dummy,_count,_modificationCount,_splayCount",
  _comparator$2: function(arg0, arg1) {
    return this._comparator.call$2(arg0, arg1);
  },
  _compare$2: function(key1, key2) {
    return this._comparator$2(key1, key2);
  },
  $index: function(_, key) {
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    if (this._root != null)
      if ($.$eq(this._splay$1(key), 0) === true)
        return $.get$value$x(this._root);
    return;
  },
  remove$1: function(_, key) {
    var t1, mapRoot;
    t1 = $.objectIsSubtype(key, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0));
    if (!t1)
      return;
    mapRoot = this._remove$1(key);
    if (mapRoot != null)
      return $.get$value$x(mapRoot);
    return;
  },
  $indexSet: function(_, key, value) {
    var comp;
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this.$$indexSet$bailout(1, key, value, comp);
    if (comp === 0) {
      $.set$value$x(this._root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value, null, null), comp);
  },
  $$indexSet$bailout: function(state0, key, value, comp) {
    if ($.$eq(comp, 0) === true) {
      $.set$value$x(this._root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value, null, null), comp);
  },
  get$isEmpty: function(_) {
    return this._root == null;
  },
  forEach$1: function(_, f) {
    var nodes, node, t1;
    nodes = $._SplayTreeNodeIterator$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0));
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = $.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  get$length: function(_) {
    return this._count;
  },
  clear$0: function(_) {
    this._root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  },
  get$keys: function() {
    return $._SplayTreeKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0));
  },
  get$values: function(_) {
    return $._SplayTreeValueIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0), $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 1));
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  $isSplayTreeMap: true,
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: null,
  $isMap: true
};

$$._SplayTreeIterator = {"": "Object;",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = $.get$left$x(node);
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.JSArray_methods.clear$0(this._workList);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1._root);
    else {
      t1._splay$1($.get$key$x(currentNode));
      this._findLeftMostDescendent$1($.get$right$x(t1._root));
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if (this._modificationCount !== t1._modificationCount)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    t2 = this._workList;
    if ($.JSArray_methods.get$isEmpty(t2)) {
      this._currentNode = null;
      return false;
    }
    if (t1._splayCount !== this._splayCount)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw $.ioore(0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1($.get$right$x(this._currentNode));
    return true;
  },
  _SplayTreeIterator$1: function(tree, T) {
    this._findLeftMostDescendent$1(tree._root);
  }
};

$$._SplayTreeKeyIterable = {"": "IterableBase;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeKeyIterator$(this._tree, $.getRuntimeTypeArgument(this, this.$as_SplayTreeKeyIterable, 0));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$._SplayTreeValueIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeValueIterator$(this._map, $.getRuntimeTypeArgument(this, this.$as_SplayTreeValueIterable, 0), $.getRuntimeTypeArgument(this, this.$as_SplayTreeValueIterable, 1));
  },
  $asIterableBase: function (K, V) { return [V]; },
  $asIterable: function (K, V) { return [V]; }
};

$$._SplayTreeKeyIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$key$x(node);
  },
  $as_SplayTreeIterator: null
};

$$._SplayTreeValueIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$value$x(node);
  },
  $as_SplayTreeIterator: function (K, V) { return [V]; }
};

$$._SplayTreeNodeIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  },
  $as_SplayTreeIterator: function (K) { return [[$._SplayTreeNode, K]]; }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return $.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t1.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Error = {"": "Object;"};

$$.AssertionError = {"": "Object;"};

$$.TypeError = {"": "Object;"};

$$.CastError = {"": "Object;"};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.FallThroughError = {"": "Object;"};

$$.AbstractClassInstantiationError = {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, str, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      str = $.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : $.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = typeof str === "string" ? str : $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  get$runtimeType: function(_) {
    return $.getRuntimeType(this);
  }
};

$$.Match = {"": "Object;"};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.Type = {"": "Object;", $isType: true};

$$._ChildrenElementList = {"": "ListBase;_liblib6$_element,_childElements",
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._liblib6$_element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._liblib6$_element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._liblib6$_element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._liblib6$_element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isElement) {
      t1 = this._liblib6$_element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    this._liblib6$_element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._liblib6$_element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._liblib6$_element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asListBase: function() { return [$.Element]; },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
};

$$._ElementFactoryProvider__getColgroup_closure = {"": "Closure;",
  call$1: function(n) {
    return $.get$tagName$x(n) === "COLGROUP";
  },
  $isFunction: true
};

$$.Object_ListMixin = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Object_ListMixin_ImmutableListMixin = {"": "Object_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$._ChildNodeListLazy = {"": "ListBase;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout1(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout1: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object !== "object" || object === null || !$.getInterceptor(object).$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asListBase: function() { return [$.Node]; },
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
};

$$.Object_ListMixin0 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Object_ListMixin_ImmutableListMixin0 = {"": "Object_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Object_ListMixin1 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Object_ListMixin_ImmutableListMixin1 = {"": "Object_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$._AttributeMap = {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      key = t1.get$current();
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._liblib6$_element.attributes;
    keys = $.List_List($, $.JSString);
    $.setRuntimeTypeInfo(keys, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(t1.localName);
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._liblib6$_element.attributes;
    values = $.List_List($, $.JSString);
    $.setRuntimeTypeInfo(values, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib6$_element",
  $index: function(_, key) {
    return this._liblib6$_element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._liblib6$_element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._liblib6$_element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
};

$$._ElementCssClassSet = {"": "CssClassSetImpl;_liblib6$_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$($.JSString);
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(this._liblib6$_element.className, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true, null);
    this._liblib6$_element.className = s.join$1(s, " ");
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this.$as_EventStream, 0));
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      return;
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
};

$$.EventStreamProvider = {"": "Object;_eventType"};

$$.ImmutableListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asImmutableListMixin, 0));
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$._WrappedList = {"": "ListBase;_liblib6$_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._liblib6$_list), null);
  },
  get$length: function(_) {
    return this._liblib6$_list.length;
  },
  add$1: function(_, element) {
    $.add$1$ax(this._liblib6$_list, element);
  },
  remove$1: function(_, element) {
    $.remove$1$ax(this._liblib6$_list, element);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._liblib6$_list);
  },
  $index: function(_, index) {
    var t1 = this._liblib6$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._liblib6$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._liblib6$_list, newLength);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.setRange$4$ax(this._liblib6$_list, start, end, iterable, skipCount);
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
};

$$._WrappedIterator = {"": "Object;_iterator",
  moveNext$0: function() {
    return this._iterator.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$._LocationWrapper = {"": "Object;_ptr",
  get$hash: function(_) {
    return $._LocationWrapper__get(this._ptr, "hash");
  },
  set$hash: function(_, value) {
    $._LocationWrapper__set(this._ptr, "hash", value);
  },
  get$href: function(_) {
    return $._LocationWrapper__get(this._ptr, "href");
  },
  set$href: function(_, value) {
    $._LocationWrapper__set(this._ptr, "href", value);
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true,
  $asLocation: null
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1)) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_closure = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $isFunction: true
};

$$.CssClassSetImpl = {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$iterator(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return $.MappedIterable$(t1, f, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0), null);
  },
  where$1: function(_, f) {
    var t1 = this.readClasses$0();
    return $.WhereIterable$(t1, f, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  get$isEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isEmpty(t1);
  },
  get$length: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$length(t1);
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  add$1: function(_, value) {
    var s = this.readClasses$0();
    new $.CssClassSetImpl_add_closure(value).call$1(s);
    this.writeClasses$1(s);
  },
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(_, iterable) {
    var s = this.readClasses$0();
    new $.CssClassSetImpl_addAll_closure(iterable).call$1(s);
    this.writeClasses$1(s);
  },
  removeAll$1: function(iterable) {
    var s = this.readClasses$0();
    new $.CssClassSetImpl_removeAll_closure(iterable).call$1(s);
    this.writeClasses$1(s);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return $.List_List$from(t1, growable, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(_, n) {
    var t1 = this.readClasses$0();
    return $.SkipIterable$(t1, n, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  clear$0: function(_) {
    var s = this.readClasses$0();
    new $.CssClassSetImpl_clear_closure().call$1(s);
    this.writeClasses$1(s);
  },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; }
};

$$.CssClassSetImpl_add_closure = {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true
};

$$.CssClassSetImpl_addAll_closure = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.addAll$1$ax(s, this.iterable_0);
  },
  $isFunction: true
};

$$.CssClassSetImpl_removeAll_closure = {"": "Closure;iterable_0",
  call$1: function(s) {
    return s.removeAll$1(this.iterable_0);
  },
  $isFunction: true
};

$$.CssClassSetImpl_clear_closure = {"": "Closure;",
  call$1: function(s) {
    return $.clear$0$ax(s);
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, element) {
    return $.$eq($.JSString_methods.get$parentNode(element), this._node) === true;
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (typeof element !== "object" || element === null || !$.getInterceptor(element).$isElement)
      return false;
    else
      element;
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
};

$$.FilteredElementList__filtered_closure = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true
};

$$.FilteredElementList_removeRange_closure = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
};

$$.SupportedBrowser = {"": "Object;browserName,minimumVersion"};

$$.DomName = {"": "Object;name"};

$$.ReceivePort = {"": "Object;", $isReceivePort: true};

$$._AttributeClassSet = {"": "CssClassSetImpl;_liblib7$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = $.get$attributes$x(this._liblib7$_element)._liblib6$_element.getAttribute("class");
    s = $.LinkedHashSet$($.JSString);
    if (classname == null)
      return s;
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(classname, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1 = $.get$attributes$x(this._liblib7$_element);
    t1.$indexSet(t1, "class", s.join$1(s, " "));
  }
};

$$.Uri = {"": "Object;scheme,userInfo,domain,port,path,query,fragment",
  get$hasAuthority: function() {
    return $.$eq(this.userInfo, "") !== true || $.$eq(this.domain, "") !== true || $.$eq(this.port, 0) !== true;
  },
  toString$0: function(_) {
    var sb, t1, str, t2;
    sb = $.StringBuffer$("");
    t1 = this.scheme;
    if ("" !== t1) {
      str = t1 == null ? "null" : t1;
      str = typeof str === "string" ? str : $.S(str);
      sb._contents = sb._contents + str;
      t2 = ":";
      sb._contents = sb._contents + t2;
    }
    if (this.get$hasAuthority() || $.$eq(t1, "file") === true) {
      sb._contents = sb._contents + "//";
      t1 = this.userInfo;
      if ("" !== t1) {
        str = t1 == null ? "null" : t1;
        str = typeof str === "string" ? str : $.S(str);
        sb._contents = sb._contents + str;
        t1 = "@";
        sb._contents = sb._contents + t1;
      }
      t1 = this.domain;
      if (t1 == null)
        str = "null";
      else {
        if ($.contains$1$asx(t1, ":") === true)
          t1 = "[" + $.S(t1) + "]";
        str = t1;
      }
      str = typeof str === "string" ? str : $.S(str);
      sb._contents = sb._contents + str;
      t1 = this.port;
      if ($.$eq(t1, 0) !== true) {
        sb._contents = sb._contents + ":";
        str = $.toString$0(t1);
        str = typeof str === "string" ? str : $.S(str);
        sb._contents = sb._contents + str;
      }
    }
    t1 = this.path;
    str = t1 == null ? "null" : t1;
    str = typeof str === "string" ? str : $.S(str);
    sb._contents = sb._contents + str;
    t1 = this.query;
    if ("" !== t1) {
      t2 = "?";
      sb._contents = sb._contents + t2;
      str = t1 == null ? "null" : t1;
      str = typeof str === "string" ? str : $.S(str);
      sb._contents = sb._contents + str;
    }
    t1 = this.fragment;
    if ("" !== t1) {
      t2 = "#";
      sb._contents = sb._contents + t2;
      str = t1 == null ? "null" : t1;
      str = typeof str === "string" ? str : $.S(str);
      sb._contents = sb._contents + str;
    }
    return sb._contents;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isUri)
      return false;
    else
      other;
    return $.$eq(this.scheme, other.scheme) === true && $.$eq(this.userInfo, other.userInfo) === true && $.$eq(this.domain, other.domain) === true && $.$eq(this.port, other.port) === true && $.$eq(this.path, other.path) === true && $.$eq(this.query, other.query) === true && $.$eq(this.fragment, other.fragment) === true;
  },
  get$hashCode: function(_) {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.domain, t1.call$2(this.port, t1.call$2(this.path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  $isUri: true
};

$$.Uri_hashCode_combine = {"": "Closure;",
  call$2: function(part, current) {
    return $.$and$n($.$add$ns($.$mul$n(current, 31), $.get$hashCode$(part)), 1073741823);
  },
  $isFunction: true
};

$$.main_closure = {"": "Closure;",
  call$0: function() {
    $._setupRoutes();
  },
  $isFunction: true
};

$$._setupRoutes_closure = {"": "Closure;",
  call$1: function(e) {
    $._route($.get$hash$x($.Window_methods.get$location(window)));
  },
  $isFunction: true
};

$$._route_closure = {"": "Closure;",
  call$1: function(x) {
    x.set$running(false);
    return false;
  },
  $isFunction: true
};

$$.init_closure = {"": "Closure;initEntities_0",
  call$0: function() {
    var world, canvas, t1, t2, t3, newCapacity, oldData, t4, t5;
    world = $.World$();
    canvas = document.querySelector("canvas#demo");
    t1 = $.PlayerManager$();
    t2 = world._managers;
    t2.$indexSet(t2, t1.get$runtimeType(t1), t1);
    t3 = world._managersBag;
    if ($.$eq(t3._size, t3._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t3._data.length * 3 / 2 + 1);
      oldData = t3._data;
      t4 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t3, t3.$asBag, 0));
      $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeArgument(t3, t3.$asBag, 0)]);
      t3._data = t4;
      $.JSArray_methods.setRange$3(t3._data, 0, oldData.length, oldData);
    }
    t4 = t3._data;
    t5 = t3._size;
    t3._size = $.$add$ns(t5, 1);
    if (t5 >>> 0 !== t5 || t5 >= t4.length)
      throw $.ioore(t5);
    t4[t5] = t1;
    t1._world = world;
    t1 = $.GroupManager$();
    t2.$indexSet(t2, t1.get$runtimeType(t1), t1);
    if ($.$eq(t3._size, t3._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t3._data.length * 3 / 2 + 1);
      oldData = t3._data;
      t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t3, t3.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t3, t3.$asBag, 0)]);
      t3._data = t2;
      $.JSArray_methods.setRange$3(t3._data, 0, oldData.length, oldData);
    }
    t2 = t3._data;
    t4 = t3._size;
    t3._size = $.$add$ns(t4, 1);
    if (t4 >>> 0 !== t4 || t4 >= t2.length)
      throw $.ioore(t4);
    t2[t4] = t1;
    t1._world = world;
    t1 = $.System_Animator$();
    t1.world = world;
    t1._passive = false;
    t4 = world._systems;
    t4.$indexSet(t4, t1.get$runtimeType(t1), t1);
    t2 = world._systemsList;
    t2.push(t1);
    t1 = $.System_Emitters$();
    t1.world = world;
    t1._passive = false;
    t4.$indexSet(t4, t1.get$runtimeType(t1), t1);
    t2.push(t1);
    t1 = $.System_Simulator$(16);
    t1.world = world;
    t1._passive = false;
    t4.$indexSet(t4, t1.get$runtimeType(t1), t1);
    t2.push(t1);
    t1 = $.System_Renderer$(canvas);
    t1.world = world;
    t1._passive = false;
    t4.$indexSet(t4, t1.get$runtimeType(t1), t1);
    t2.push(t1);
    world.initialize$0();
    world.deleteAllEntities$0();
    return this.initEntities_0.call$1(world);
  },
  $isFunction: true
};

$$.Ctrl = {"": "Object;running?"};

$$.start_loop = {"": "Closure;box_0,world_1,ctrl_2",
  call$1: function(highResTime) {
    return $.handleError(new $.start_loop_closure(this.box_0, this.world_1, this.ctrl_2, this, highResTime));
  },
  $isFunction: true
};

$$.start_loop_closure = {"": "Closure;box_0,world_3,ctrl_4,loop_5,highResTime_6",
  call$0: function() {
    var e, s, t1, t2, t3, exception;
    try {
      t1 = this.world_3;
      t2 = this.box_0;
      t3 = t2.lastT_0;
      t1.set$delta($.$gt$n(t3, 0) ? $.$sub$n(this.highResTime_6, t3) : 0);
      t1.process$0();
      t2.lastT_0 = this.highResTime_6;
      if (this.ctrl_4.running) {
        t1 = window;
        $.Window_methods.requestAnimationFrame$1(t1, this.loop_5);
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $.Primitives_printString($.toString$0(e));
      $.Primitives_printString($.toString$0(s));
    }

  },
  $isFunction: true
};

$$.addNewEntity_closure = {"": "Closure;e_0",
  call$1: function(c) {
    return this.e_0.addComponent$1(c);
  },
  $isFunction: true
};

$$.addNewEntity_closure0 = {"": "Closure;e_1,gm_2",
  call$1: function(group) {
    return $.add$2$ax(this.gm_2, this.e_1, group);
  },
  $isFunction: true
};

$$.closure4 = {"": "Closure;",
  call$1: function(hsl) {
    return $.irgba_rgbaString($.hsl_irgba(hsl));
  },
  $isFunction: true
};

$$.closure5 = {"": "Closure;",
  call$1: function(hsv) {
    return $.irgba_rgbaString($.hsv_irgba(hsv));
  },
  $isFunction: true
};

$$.closure = {"": "Closure;",
  call$1: function(world) {
    $.addNewEntity(world, [$.Transform_Transform$w3d($.vec3$(50, 50, 0), $.vec3$(0, 0, 0), null), $.Drawable$($.rect(10, 10, $.$index$asx($.get$foregroundcolorsM(), 3), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0)))], null, null);
    $.addNewEntity(world, [$.Transform_Transform$w3d($.vec3$(0, 20, 0), $.vec3$(0, 0, 0), null), $.Drawable$($.text("Hello World, choose an other demo in the list", null, "16px sans-serif", 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0), null))], null, null);
    return $._FutureImpl$immediate(world, null);
  },
  $isFunction: true
};

$$.closure0 = {"": "Closure;",
  call$1: function(world) {
    var t1, t2, c, t3;
    t1 = $.Transform_Transform$w3d($.vec3$(50, 50, 0), $.vec3$(0, 0, 0), null);
    t2 = $.Drawable$($.rect(10, 20, $.$index$asx($.get$foregroundcolorsM(), 1), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0)));
    c = $.ObjectPool_get($.Type_I6I, $.Animatable__ctor);
    c.cleanUp$0();
    t3 = $.Animation$();
    t3.onTick = new $._closure10();
    $.add$1$ax(c, t3);
    $.addNewEntity(world, [t1, t2, c], null, null);
    return $._FutureImpl$immediate(world, null);
  },
  $isFunction: true
};

$$._closure10 = {"": "Closure;",
  call$3: function(e, t, t00) {
    var tf = e.getComponent$1($.get$Transform_CT());
    $.set$x$x(tf.get$position3d(), $.periodicRatio($.linear, 10000).call$3(t, 1000, 100));
    $.set$y$x(tf.get$position3d(), $.periodicRatio($.goback($.inElastic), 2000).call$3(t, 100, 100));
    return true;
  },
  $isFunction: true,
  $isInitializer: true
};

$$.closure1 = {"": "Closure;",
  call$1: function(world) {
    var t1, t2, t3, c;
    t1 = $.Transform_Transform$w3d($.vec3$(50, 50, 0), $.vec3$(0, 0, 0), null);
    t2 = $.Emitter$();
    t2.genParticles = true;
    t2.counter = $.steady(100);
    t3 = t2.initializers;
    t3.push($.particlesStartPosition($.line($.vec3$(0, 0, 0), $.vec3$(800, 100, 0), $.periodicRatio($.random, 3000)), true));
    t3.push($.addComponents([new $._closure3(), new $._closure4()]));
    $.addNewEntity(world, [t1, t2], null, null);
    t2 = $.Transform_Transform$w3d($.vec3$(600, 50, 0), $.vec3$(0, 0, 0), null);
    t1 = $.Emitter$();
    t1.genParticles = true;
    t1.counter = $.steady(100);
    t3 = t1.initializers;
    t3.push($.particlesStartPosition($.constant($.vec3$zero()), true));
    t3.push($.particlesStartPositionPrevious($.line($.vec3$zero(), $.vec3$(5, 0, 0), $.periodicRatio($.random, 3000)), true));
    t3.push($.particlesAddComponents([new $._closure5()]));
    t3.push($.addComponents([new $._closure6(), new $._closure7(), new $._closure8()]));
    c = $.ObjectPool_get($.Type_I6I, $.Animatable__ctor);
    c.cleanUp$0();
    t3 = $.Animation$();
    t3.onTick = new $._closure9();
    $.add$1$ax(c, t3);
    $.addNewEntity(world, [t2, t1, c], null, null);
    return $._FutureImpl$immediate(world, null);
  },
  $isFunction: true
};

$$._closure3 = {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particles(3, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 1)));
  },
  $isFunction: true
};

$$._closure4 = {"": "Closure;",
  call$0: function() {
    var c, t1;
    c = $.ObjectPool_get($.Type_I6I, $.Animatable__ctor);
    c.cleanUp$0();
    t1 = $.Animation$();
    t1.onTick = new $.__closure6().call$0();
    t1.onEnd = new $.__closure7();
    $.add$1$ax(c, t1);
    return c;
  },
  $isFunction: true
};

$$.__closure6 = {"": "Closure;",
  call$0: function() {
    var t1 = {};
    t1.ys0_0 = [];
    return new $.___closure0(t1);
  },
  $isFunction: true
};

$$.___closure0 = {"": "Closure;box_0",
  call$3: function(e, t, t00) {
    var ps, t1, ratio, i, t2, t3, t4, t5;
    ps = e.getComponent$1($.get$Particles_CT());
    t1 = $.getInterceptor$n(t);
    ratio = $.$div$n(t1.$sub(t, t00), 10000);
    if (typeof ratio !== "number")
      return this.call$3$bailout(1, t, t00, ratio, ps, t1);
    if (t1.$eq(t, t00) === true) {
      t1 = this.box_0;
      t1.ys0_0 = $.List_List($.get$length$asx(ps.get$l()), null);
      i = $.$sub$n($.get$length$asx(ps.get$l()), 1);
      if (typeof i !== "number")
        return this.call$3$bailout(2, 0, 0, ratio, ps, t1, i);
      for (; i > -1; --i)
        $.$indexSet$ax(t1.ys0_0, i, $.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()));
    }
    i = $.$sub$n($.get$length$asx(ps.get$l()), 1);
    if (typeof i !== "number")
      return this.call$3$bailout(3, 0, 0, ratio, ps, 0, i);
    t1 = this.box_0;
    t2 = 1 - ratio;
    for (; i > -1; --i) {
      t3 = $.$index$asx(ps.get$l(), i).get$position3d();
      t4 = $.$index$asx(t1.ys0_0, i);
      t5 = $.outBounce(t2, 1, 0);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      $.set$y$x(t3, (1 - t5) * 200 + t4);
    }
    return ratio < 1;
  },
  call$3$bailout: function(state0, t, t00, ratio, ps, t1, i) {
    switch (state0) {
      case 0:
        ps = e.getComponent$1($.get$Particles_CT());
        t1 = $.getInterceptor$n(t);
        ratio = $.$div$n(t1.$sub(t, t00), 10000);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && t1.$eq(t, t00) === true)
          switch (state0) {
            case 0:
              t1 = this.box_0;
              t1.ys0_0 = $.List_List($.get$length$asx(ps.get$l()), null);
              i = $.$sub$n($.get$length$asx(ps.get$l()), 1);
            case 2:
              state0 = 0;
              for (; t2 = $.getInterceptor$n(i), t2.$gt(i, -1); i = t2.$sub(i, 1))
                $.$indexSet$ax(t1.ys0_0, i, $.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()));
          }
        i = $.$sub$n($.get$length$asx(ps.get$l()), 1);
      case 3:
        var t2, t3, t4, t5;
        state0 = 0;
        t1 = this.box_0;
        for (; t2 = $.getInterceptor$n(i), t2.$gt(i, -1); i = t2.$sub(i, 1)) {
          t3 = $.$index$asx(ps.get$l(), i).get$position3d();
          t4 = $.$index$asx(t1.ys0_0, i);
          if (typeof ratio !== "number")
            throw $.iae(ratio);
          t5 = $.outBounce(1 - ratio, 1, 0);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          $.set$y$x(t3, (1 - t5) * 200 + t4);
        }
        return $.$lt$n(ratio, 1);
    }
  },
  $isFunction: true,
  $isInitializer: true
};

$$.__closure7 = {"": "Closure;",
  call$3: function(e, t, t00) {
    e.deleteFromWorld$0();
  },
  $isFunction: true,
  $isInitializer: true
};

$$._closure5 = {"": "Closure;",
  call$1: function(lg) {
    var b = $.ParticleInfo0s$(lg);
    $.forEach$1$ax(b.l, new $.__closure5());
    return b;
  },
  $isFunction: true
};

$$.__closure5 = {"": "Closure;",
  call$1: function(p) {
    $.set$color$x(p, 4278190335);
    p.set$radius(4);
  },
  $isFunction: true
};

$$._closure6 = {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particleInfo0s(3, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1)));
  },
  $isFunction: true
};

$$._closure7 = {"": "Closure;",
  call$0: function() {
    return $.Constraints$();
  },
  $isFunction: true
};

$$._closure8 = {"": "Closure;",
  call$0: function() {
    var c, t1, t2;
    c = $.ObjectPool_get($.Type_I6I, $.Animatable__ctor);
    c.cleanUp$0();
    t1 = $.Animation$();
    t1.onTick = new $.__closure2();
    t1.onEnd = new $.__closure3();
    t2 = $.getInterceptor$ax(c);
    t2.add$1(c, t1);
    t1 = $.Animation$();
    t1.onTick = new $.__closure4();
    t2.add$1(c, t1);
    return c;
  },
  $isFunction: true
};

$$.__closure2 = {"": "Closure;",
  call$3: function(e, t, t00) {
    return $.$lt$n($.$sub$n(t, t00), 5000);
  },
  $isFunction: true,
  $isInitializer: true
};

$$.__closure3 = {"": "Closure;",
  call$3: function(e, t, t00) {
    return e.deleteFromWorld$0();
  },
  $isFunction: true,
  $isInitializer: true
};

$$.__closure4 = {"": "Closure;",
  call$3: function(e, t, t00) {
    var t1, opacity;
    t1 = $.getInterceptor$n(t);
    opacity = $.toInt$0$n($.onceRatio($.linear, 5000).call$3(t1.$sub(t, t00), -255, 255));
    $.forEach$1$ax(e.getComponent$1($.get$ParticleInfo0s_CT()).get$l(), new $.___closure(opacity));
    return $.$lt$n(t1.$sub(t, t00), 5001);
  },
  $isFunction: true,
  $isInitializer: true
};

$$.___closure = {"": "Closure;opacity_1",
  call$1: function(p0) {
    var t1 = $.getInterceptor$x(p0);
    t1.set$color(p0, ($.$and$n(t1.get$color(p0), 4294967040) | this.opacity_1) >>> 0);
  },
  $isFunction: true
};

$$._closure9 = {"": "Closure;",
  call$3: function(e, t, t00) {
    var t1 = e.getComponent$1($.get$Transform_CT()).get$rotation3d();
    t1.set$z(t1, $.periodicRatio($.linear, 3000).call$3($.$sub$n(t, t00), 6.283185307179586, 0));
    return true;
  },
  $isFunction: true,
  $isInitializer: true
};

$$.closure2 = {"": "Closure;",
  call$1: function(world) {
    var defaultDraw, t1, segment, t2, t3, t4;
    world.getSystem$1($.Type_bAc).set$friction(1);
    defaultDraw = $.drawComponentType([$.DrawComponentType$($.get$Particles_CT(), $.particles(5, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1))), $.DrawComponentType$($.get$Constraints_CT(), $.drawConstraints("rgba(255,255,0,0.2)", "#d8dde2", "rgba(0,153,255,0.1)"))]);
    t1 = $.JSArray_methods.toList$0($.makeLineSegments([$.vec3$(20, 10, 0), $.vec3$(40, 10, 0), $.vec3$(60, 10, 0), $.vec3$(80, 10, 0), $.vec3$(100, 10, 0)], 0.02, false));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    segment = $.addNewEntity(world, t1, null, null);
    t1 = $.$index$asx($.propertyTypeCast(segment.getComponent$1($.get$Particles_CT()), "$isParticles").l, 0).get$position3d();
    $.add$1$ax(segment.getComponent$1($.get$Constraints_CT()).get$l(), $.Constraint_Pin$(t1));
    t1 = $.$index$asx($.propertyTypeCast(segment.getComponent$1($.get$Particles_CT()), "$isParticles").l, 4).get$position3d();
    $.add$1$ax(segment.getComponent$1($.get$Constraints_CT()).get$l(), $.Constraint_Pin$(t1));
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.vec3$(200, 50, 0), 50, 30, 0.3, 0.9));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.vec3$(400, 50, 0), 70, 7, 0.1, 0.2));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.vec3$(600, 50, 0), 70, 3, 1, 1));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.JSArray_methods.toList$0($.makeCloth($.vec3$(800, 50, 0), $.vec3$(300, 0, 0), $.vec3$(0, 200, 0), 15, 3, 0.5));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.vec3$(600, 300, 0), 70, 4, 1, 1));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.vec3$(400, 300, 0);
    t2 = $.vec3$(70, 0, 0);
    t3 = $.vec3$(0, 70, 0);
    t4 = t1.$add(t1, t2);
    t2 = t1.$add(t1, t2);
    t3 = $.JSArray_methods.toList$0($.makeLineSegments([t1, t4, t2.$add(t2, t3), t1.$add(t1, t3)], 1, true));
    $.JSArray_methods.add$1(t3, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t3, null, null);
    t3 = $.vec3$(200, 300, 0);
    t1 = $.vec3$(70, 10, 0);
    t2 = $.vec3$(10, 30, 0);
    t4 = t3.$add(t3, t1);
    t1 = t3.$add(t3, t1);
    t2 = $.JSArray_methods.toList$0($.makeLineSegments([t3, t4, t1.$add(t1, t2), t3.$add(t3, t2)], 1, true));
    $.JSArray_methods.add$1(t2, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t2, null, null);
    return $._FutureImpl$immediate(world, null);
  },
  $isFunction: true
};

$$.closure3 = {"": "Closure;",
  call$1: function(world) {
    var t1, t2, t3;
    world.getSystem$1($.Type_bAc).set$friction(1);
    t1 = $.Transform_Transform$w3d($.vec3$(50, 50, 0), $.vec3$(0, 0, 0), null);
    t2 = $.Emitter$();
    t2.genParticles = true;
    t2.counter = $.singleWave(500);
    t3 = t2.initializers;
    t3.push($.particlesStartPosition($.box($.vec3$(500, 500, 0), $.vec3$(400, 400, 0)), true));
    t3.push($.particlesStartPositionPrevious($.box($.vec3$zero(), $.vec3$(3, 3, 0)), false));
    t3.push($.particlesAddComponents([new $._closure()]));
    t3.push($.addComponents([new $._closure0(), new $._closure1(), new $._closure2()]));
    $.addNewEntity(world, [t1, t2], null, null);
    return $._FutureImpl$immediate(world, null);
  },
  $isFunction: true
};

$$._closure = {"": "Closure;",
  call$1: function(lg) {
    var b = $.ParticleInfo0s$(lg);
    $.forEach$1$ax(b.l, new $.__closure1());
    return b;
  },
  $isFunction: true
};

$$.__closure1 = {"": "Closure;",
  call$1: function(p) {
    p.set$radius(3);
  },
  $isFunction: true
};

$$._closure0 = {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particleInfo0s(3, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1)));
  },
  $isFunction: true
};

$$._closure1 = {"": "Closure;",
  call$0: function() {
    return $.Constraints$();
  },
  $isFunction: true
};

$$._closure2 = {"": "Closure;",
  call$0: function() {
    var c, t1;
    c = $.ObjectPool_get($.Type_I6I, $.Animatable__ctor);
    c.cleanUp$0();
    t1 = $.Animation$();
    t1.onTick = new $.__closure();
    t1.onEnd = new $.__closure0();
    $.add$1$ax(c, t1);
    return c;
  },
  $isFunction: true
};

$$.__closure = {"": "Closure;",
  call$3: function(e, t, t00) {
    var ps, i, cont;
    ps = e.getComponent$1($.get$Particles_CT());
    i = $.$sub$n($.get$length$asx(ps.get$l()), 1);
    if (typeof i !== "number")
      return this.call$3$bailout(1, ps, i);
    for (; i > -1; --i) {
      cont = $.$gt$n($.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()), 0);
      cont = cont && $.$lt$n($.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()), 1000);
      cont = cont && $.$gt$n($.get$x$x($.$index$asx(ps.get$l(), i).get$position3d()), 0);
      cont = cont && $.$lt$n($.get$x$x($.$index$asx(ps.get$l(), i).get$position3d()), 1000);
      if (!cont)
        $.$index$asx(ps.get$l(), i).get$position3d().setFrom$1($.$index$asx(ps.get$l(), i).get$position3dPrevious());
    }
    return true;
  },
  call$3$bailout: function(state0, ps, i) {
    var t1, cont;
    for (; t1 = $.getInterceptor$n(i), t1.$gt(i, -1); i = t1.$sub(i, 1)) {
      cont = $.$gt$n($.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()), 0);
      cont = cont && $.$lt$n($.get$y$x($.$index$asx(ps.get$l(), i).get$position3d()), 1000);
      cont = cont && $.$gt$n($.get$x$x($.$index$asx(ps.get$l(), i).get$position3d()), 0);
      cont = cont && $.$lt$n($.get$x$x($.$index$asx(ps.get$l(), i).get$position3d()), 1000);
      if (!cont)
        $.$index$asx(ps.get$l(), i).get$position3d().setFrom$1($.$index$asx(ps.get$l(), i).get$position3dPrevious());
    }
    return true;
  },
  $isFunction: true,
  $isInitializer: true
};

$$.__closure0 = {"": "Closure;",
  call$3: function(e, t, t00) {
    e.deleteFromWorld$0();
  },
  $isFunction: true,
  $isInitializer: true
};

$$.init_autogenerated_closure = {"": "Closure;",
  call$0: function() {
    return $.get$initDemo().get$keys();
  },
  $isFunction: true
};

$$.init_autogenerated_closure0 = {"": "Closure;__html0_1",
  call$3: function($$list, $$index, __t) {
    var t1, k, __e2, t2, __binding0;
    t1 = {};
    k = $.$index$asx($$list, $$index);
    t1.__e1_0 = null;
    __e2 = $.clone$1$x(this.__html0_1, true);
    t2 = $.get$nodes$x(__e2)._this.childNodes;
    if (0 >= t2.length)
      throw $.ioore(0);
    t1.__e1_0 = t2[0];
    __binding0 = __t.contentBind$2(new $.init_autogenerated__closure(k), false);
    $.add$1$ax($.get$nodes$x(t1.__e1_0), __binding0);
    __t.oneWayBind$4(new $.init_autogenerated__closure0(k), new $.init_autogenerated__closure1(t1), false, true);
    __t.bindClass$3(__e2, new $.init_autogenerated__closure2(k), false);
    $.addAll$1$ax(__t, [document.createTextNode("\n            "), __e2, document.createTextNode("\n          ")]);
  },
  $isFunction: true,
  $isInitializer: true
};

$$.init_autogenerated__closure = {"": "Closure;k_2",
  call$0: function() {
    return this.k_2;
  },
  $isFunction: true
};

$$.init_autogenerated__closure0 = {"": "Closure;k_3",
  call$0: function() {
    return "#/" + $.S(this.k_3);
  },
  $isFunction: true
};

$$.init_autogenerated__closure1 = {"": "Closure;box_0",
  call$1: function(e) {
    var t1 = this.box_0;
    if ($.$eq($.get$href$x(t1.__e1_0), e) !== true)
      $.set$href$x(t1.__e1_0, e);
  },
  $isFunction: true
};

$$.init_autogenerated__closure2 = {"": "Closure;k_4",
  call$0: function() {
    var t1, t2;
    if ($.observeReads() === true)
      $.notifyRead($.get$__changes(), 1, "activeDemo");
    t1 = $.__$activeDemo;
    t2 = this.k_4;
    return (t1 == null ? t2 == null : t1 === t2) ? "active" : "";
  },
  $isFunction: true
};

$$.Aspect = {"": "Object;_all,_excluded,_one",
  get$all: function() {
    return this._all;
  },
  get$excluded: function() {
    return this._excluded;
  },
  get$one: function() {
    return this._one;
  },
  _updateBitMask$2: function(mask, componentTypes) {
    var t1 = {};
    t1.mask_0 = mask;
    $.JSArray_methods.forEach$1(componentTypes, new $.Aspect__updateBitMask_closure(t1));
    return t1.mask_0;
  }
};

$$.Aspect__updateBitMask_closure = {"": "Closure;box_0",
  call$1: function(componentType) {
    var t1 = this.box_0;
    t1.mask_0 = $.$or$n(t1.mask_0, $.ComponentTypeManager_getTypeFor(componentType).get$bit());
  },
  $isFunction: true
};

$$.Component = {"": "Object;",
  _removed$0: function() {
  },
  $isComponent: true
};

$$.ComponentPoolable = {"": "Component_Poolable;",
  _removed$0: function() {
    this.moveToPool$0();
  },
  cleanUp$0: function() {
  }
};

$$.Component_Poolable = {"": "Component+Poolable;"};

$$.ComponentManager = {"": "Manager;_componentsByType,_deleted<,_world",
  initialize$0: function() {
  },
  _removeComponentsOfEntity$1: function(e) {
    this._forComponentsOfEntity$2(e, new $.ComponentManager__removeComponentsOfEntity_closure(e));
    e.set$_typeBits(0);
  },
  _addComponent$3: function(e, type, component) {
    var index, t1, t2, oldData, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t2 = $.getInterceptor$n(index);
    if (t2.$ge(index, t1._data.length)) {
      t2 = t2.$mul(index, 2);
      oldData = t1._data;
      t2 = $.List_List(t2, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    components = t2[index];
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    $.$indexSet$ax(components, e.id, component);
    t1 = type.get$bit();
    e._typeBits = (e._typeBits | t1) >>> 0;
  },
  getComponentsByType$1: function(type) {
    var index, t1, t2, oldData, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t2 = $.getInterceptor$n(index);
    if (t2.$ge(index, t1._data.length)) {
      t2 = t2.$mul(index, 2);
      oldData = t1._data;
      t2 = $.List_List(t2, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    components = t2[index];
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    return components;
  },
  _getComponent$2: function(e, type) {
    var index, t1, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    components = t1[index];
    if (components != null && components.isIndexWithinBounds$1(e.id))
      return $.$index$asx(components, e.id);
    return;
  },
  _forComponentsOfEntity$2: function(e, f) {
    var componentBits, t1, index, t2;
    componentBits = e.get$_typeBits();
    for (t1 = this._componentsByType, index = 0; componentBits > 0;) {
      if ((componentBits & 1) === 1) {
        t2 = t1._data;
        if (index >= t2.length)
          throw $.ioore(index);
        f.call$2(t2[index], index);
      }
      ++index;
      componentBits = $.JSInt_methods.$shr(componentBits, 1);
    }
  },
  deleted$1: function(e) {
    var t1, newCapacity, oldData, t2, t3;
    t1 = this._deleted;
    if ($.$eq(t1._size, t1._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
      oldData = t1._data;
      t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    t3 = t1._size;
    t1._size = $.$add$ns(t3, 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = e;
    return;
  },
  clean$0: function() {
    var t1 = this._deleted;
    t1.forEach$1(t1, new $.ComponentManager_clean_closure(this));
    t1.clear$0(t1);
  }
};

$$.ComponentManager__removeComponentsOfEntity_closure = {"": "Closure;e_0",
  call$2: function(components, typeId) {
    var t1, t2, t3;
    t1 = this.e_0;
    t2 = $.getInterceptor$x(t1);
    t3 = $.getInterceptor$asx(components);
    t3.$index(components, t2.get$id(t1))._removed$0();
    t3.$indexSet(components, t2.get$id(t1), null);
  },
  $isFunction: true
};

$$.ComponentManager_clean_closure = {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0._removeComponentsOfEntity$1(entity);
  },
  $isFunction: true
};

$$.ComponentMapper = {"": "Object;_type,_components",
  getSafe$1: function(e) {
    var t1 = $.getInterceptor$x(e);
    if (this._components.isIndexWithinBounds$1(t1.get$id(e)))
      return $.$index$asx(this._components, t1.get$id(e));
    return;
  },
  ComponentMapper$2: function(componentType, world, A) {
    this._type = $.ComponentTypeManager_getTypeFor(componentType);
    this._components = world.get$componentManager().getComponentsByType$1(this._type);
  }
};

$$.ComponentType = {"": "Object;_bit,_liblib8$_id",
  get$bit: function() {
    return this._bit;
  },
  get$id: function(_) {
    return this._liblib8$_id;
  },
  ComponentType$0: function() {
    var t1 = $.ComponentType__nextBit;
    this._bit = t1;
    $.ComponentType__nextBit = t1 << 1 >>> 0;
    t1 = $.ComponentType__nextId;
    $.ComponentType__nextId = $.$add$ns(t1, 1);
    this._liblib8$_id = t1;
  },
  $isComponentType: true
};

$$.Entity = {"": "Object;id>,_uniqueId,_typeBits@,_systemBits<,_world,_entityManager,_componentManager",
  _addSystemBit$1: function(bit) {
    var t1 = this._systemBits;
    if (typeof bit !== "number")
      throw $.iae(bit);
    this._systemBits = (t1 | bit) >>> 0;
  },
  _removeSystemBit$1: function(bit) {
    this._systemBits = (this._systemBits & $.$not$i(bit)) >>> 0;
  },
  toString$0: function(_) {
    return "Entity[" + $.S(this.id) + "]";
  },
  addComponent$1: function(component) {
    this._componentManager._addComponent$3(this, $.ComponentTypeManager_getTypeFor($.get$runtimeType$(component)), component);
  },
  getComponent$1: function(type) {
    return this._componentManager._getComponent$2(this, type);
  },
  deleteFromWorld$0: function() {
    var t1, newCapacity, oldData, t2, t3;
    t1 = this._world._deleted;
    if (!t1.contains$1(t1, this)) {
      if ($.$eq(t1._size, t1._data.length) === true) {
        newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
        oldData = t1._data;
        t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
        $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
        t1._data = t2;
        $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
      }
      t2 = t1._data;
      t3 = t1._size;
      t1._size = $.$add$ns(t3, 1);
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3] = this;
    }
    return;
  },
  Entity$_$2: function(_world, id) {
    this._entityManager = this._world.get$entityManager();
    this._componentManager = this._world.get$componentManager();
  },
  $isEntity: true
};

$$.EntityManager = {"": "Manager;_entities,_deletedEntities,_disabled,_active,_added,_created,_deleted<,_identifierPool,_world",
  initialize$0: function() {
  },
  _createEntityInstance$0: function() {
    var t1, e;
    t1 = this._deletedEntities;
    e = t1.removeLast$0(t1);
    if (null == e)
      e = $.Entity$_(this._world, this._identifierPool.checkOut$0());
    this._created = this._created + 1;
    return e;
  },
  added$1: function(e) {
    var t1;
    this._active = this._active + 1;
    this._added = this._added + 1;
    t1 = this._entities;
    t1.$indexSet(t1, $.get$id$x(e), e);
  },
  enabled$1: function(e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), false);
  },
  disabled$1: function(_, e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), true);
  },
  deleted$1: function(e) {
    var t1, t2, newCapacity, oldData, t3;
    t1 = this._entities;
    t2 = $.getInterceptor$x(e);
    t1.$indexSet(t1, t2.get$id(e), null);
    t1 = this._disabled;
    t1.$indexSet(t1, t2.get$id(e), false);
    t2 = this._deletedEntities;
    if ($.$eq(t2._size, t2._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t2._data.length * 3 / 2 + 1);
      oldData = t2._data;
      t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t2, t2.$asBag, 0));
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t2, t2.$asBag, 0)]);
      t2._data = t1;
      $.JSArray_methods.setRange$3(t2._data, 0, oldData.length, oldData);
    }
    t1 = t2._data;
    t3 = t2._size;
    t2._size = $.$add$ns(t3, 1);
    if (t3 >>> 0 !== t3 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = e;
    this._active = this._active - 1;
    this._deleted = this._deleted + 1;
  }
};

$$._IdentifierPool = {"": "Object;_ids,_nextAvailableId",
  checkOut$0: function() {
    var t1 = this._ids;
    if ($.$gt$n(t1.get$size(t1), 0))
      return t1.removeLast$0(t1);
    t1 = this._nextAvailableId;
    this._nextAvailableId = t1 + 1;
    return t1;
  }
};

$$.EntitySystem = {"": "Object;world<",
  get$passive: function() {
    return this._passive;
  },
  begin$0: function() {
  },
  process$0: function() {
    if (this.checkProcessing$0()) {
      this.begin$0();
      var t1 = this._actives;
      this.processEntities$1(t1.get$readOnly(t1));
      this.end$0();
    }
  },
  end$0: function() {
  },
  initialize$0: function() {
  },
  _check$1: function(e) {
    var t1, contains, t2, interest, newCapacity, oldData, t3;
    if (this._liblib8$_dummy)
      return;
    t1 = this._systemBit;
    contains = $.$and$n(t1, e.get$_systemBits()) === t1;
    t1 = this._all;
    t2 = e.get$_typeBits();
    interest = $.$and$n(t1, t2) === t1;
    t1 = this._one;
    if (t1 > 0 && interest)
      interest = (t1 & t2) >>> 0 > 0;
    t1 = this._excluded;
    if (t1 > 0 && interest)
      interest = (t1 & t2) >>> 0 === 0;
    if (interest && !contains) {
      t1 = this._actives;
      if ($.$eq(t1._size, t1._data.length) === true) {
        newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
        oldData = t1._data;
        t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
        $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
        t1._data = t2;
        $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
      }
      t2 = t1._data;
      t3 = t1._size;
      t1._size = $.$add$ns(t3, 1);
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3] = e;
      e._addSystemBit$1(this._systemBit);
    } else if (!interest && contains) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  added$1: function(e) {
    return this._check$1(e);
  },
  changed$1: function(e) {
    return this._check$1(e);
  },
  enabled$1: function(e) {
    return this._check$1(e);
  },
  deleted$1: function(e) {
    var t1 = this._systemBit;
    if ($.$and$n(t1, e.get$_systemBits()) === t1) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  disabled$1: function(_, e) {
    var t1 = this._systemBit;
    if ($.$and$n(t1, e.get$_systemBits()) === t1) {
      t1 = this._actives;
      t1.remove$1(t1, e);
      e._removeSystemBit$1(this._systemBit);
    }
  },
  EntitySystem$1: function(aspect) {
    this._liblib8$_dummy = $.$eq(this._all, 0) === true && this._one === 0;
    this._systemBit = $._SystemBitManager__getBitFor(this.get$runtimeType(this));
  },
  $isEntitySystem: true
};

$$.Manager = {"": "Object;",
  added$1: function(e) {
  },
  changed$1: function(e) {
  },
  deleted$1: function(e) {
  },
  disabled$1: function(_, e) {
  },
  enabled$1: function(e) {
  },
  $isManager: true
};

$$.GroupManager = {"": "Manager;_entitiesByGroup<,_groupsByEntity,_world",
  initialize$0: function() {
  },
  add$2: function(_, e, group) {
    var t1, entities, groups;
    t1 = this._entitiesByGroup;
    entities = t1.$index(t1, group);
    if (entities == null) {
      entities = $.Bag$(16, $.Entity);
      t1.$indexSet(t1, group, entities);
    }
    $.add$1$ax(entities, e);
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    if (groups == null) {
      groups = $.Bag$(16, $.JSString);
      t1.$indexSet(t1, e, groups);
    }
    $.add$1$ax(groups, group);
  },
  removeFromAllGroups$1: function(e) {
    var t1, groups;
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    t1 = $.getInterceptor(groups);
    if (groups != null) {
      t1.forEach$1(groups, new $.GroupManager_removeFromAllGroups_closure(this, e));
      t1.clear$0(groups);
    }
  },
  deleted$1: function(e) {
    return this.removeFromAllGroups$1(e);
  },
  $isGroupManager: true
};

$$.GroupManager_removeFromAllGroups_closure = {"": "Closure;this_0,e_1",
  call$1: function(group) {
    var t1, entities;
    t1 = this.this_0.get$_entitiesByGroup();
    entities = t1.$index(t1, group);
    if (entities != null)
      $.remove$1$ax(entities, this.e_1);
  },
  $isFunction: true
};

$$.PlayerManager = {"": "Manager;_playerByEntity,_entitiesByPlayer,_world",
  setPlayer$2: function(e, player) {
    var t1, entities;
    t1 = this._playerByEntity;
    t1.$indexSet(t1, e, player);
    t1 = this._entitiesByPlayer;
    entities = t1.$index(t1, player);
    if (entities == null) {
      entities = $.Bag$(16, $.Entity);
      t1 = this._entitiesByPlayer;
      t1.$indexSet(t1, player, entities);
    }
    $.add$1$ax(entities, e);
  },
  removeFromPlayer$1: function(e) {
    var t1, player, entities;
    t1 = this._playerByEntity;
    player = t1.$index(t1, e);
    if (player != null) {
      t1 = this._entitiesByPlayer;
      entities = t1.$index(t1, player);
      if (entities != null)
        $.remove$1$ax(entities, e);
    }
  },
  initialize$0: function() {
  },
  deleted$1: function(e) {
    return this.removeFromPlayer$1(e);
  },
  PlayerManager$0: function() {
    this._playerByEntity = $.Map_Map($.Entity, $.JSString);
    this._entitiesByPlayer = $.Map_Map($.JSString, [$.Bag, $.Entity]);
  },
  $isPlayerManager: true
};

$$.EntityProcessingSystem = {"": "EntitySystem;",
  processEntities$1: function(entities) {
    var t1 = entities._bag;
    return t1.forEach$1(t1, new $.EntityProcessingSystem_processEntities_closure(this));
  },
  checkProcessing$0: function() {
    return true;
  }
};

$$.EntityProcessingSystem_processEntities_closure = {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0.processEntity$1(entity);
  },
  $isFunction: true
};

$$.Bag = {"": "Object;_data@,_size@,_readOnly",
  $index: function(_, index) {
    var t1 = this._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$size: function(_) {
    return this._size;
  },
  get$readOnly: function(_) {
    return this._readOnly;
  },
  get$isEmpty: function(_) {
    return $.$eq(this._size, 0);
  },
  forEach$1: function(_, f) {
    var i, t1;
    for (i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      t1 = this._data;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$1(t1[i]);
    }
  },
  removeLast$0: function(_) {
    var t1, t2, t3, current;
    t1 = this._size;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      t3 = this._data;
      t1 = t2.$sub(t1, 1);
      this._size = t1;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw $.ioore(t1);
      current = t3[t1];
      t1 = this._data;
      t3 = this._size;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      t1[t3] = null;
      return current;
    }
    return;
  },
  remove$1: function(_, element) {
    var t1, i, t2, t3;
    for (t1 = $.getInterceptor(element), i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i]) === true) {
        t1 = this._data;
        t2 = $.$sub$n(this._size, 1);
        this._size = t2;
        t3 = t1.length;
        if (t2 >>> 0 !== t2 || t2 >= t3)
          throw $.ioore(t2);
        t2 = t1[t2];
        if (i >= t3)
          throw $.ioore(i);
        t1[i] = t2;
        t2 = this._data;
        t1 = this._size;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          throw $.ioore(t1);
        t2[t1] = null;
        return true;
      }
    }
    return false;
  },
  contains$1: function(_, element) {
    var t1, i, t2;
    for (t1 = $.getInterceptor(element), i = 0; $.$gt$n(this._size, i); ++i) {
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i]) === true)
        return true;
    }
    return false;
  },
  removeAll$1: function(bag) {
    var t1, modified, i, o1, t2, j, t3, t4;
    for (t1 = $.getInterceptor$x(bag), modified = false, i = 0; $.JSNumber_methods.$lt(i, t1.get$size(bag)); ++i) {
      o1 = t1.$index(bag, i);
      for (t2 = $.getInterceptor(o1), j = 0; $.JSNumber_methods.$lt(j, this.get$size(this)); ++j) {
        t3 = this._data;
        if (j >= t3.length)
          throw $.ioore(j);
        if (t2.$eq(o1, t3[j]) === true) {
          t2 = this._data;
          t3 = t2.length;
          if (j >= t3)
            throw $.ioore(j);
          t4 = $.$sub$n(this._size, 1);
          this._size = t4;
          if (t4 >>> 0 !== t4 || t4 >= t3)
            throw $.ioore(t4);
          t2[j] = t2[t4];
          t4 = this._data;
          t2 = this._size;
          if (t2 >>> 0 !== t2 || t2 >= t4.length)
            throw $.ioore(t2);
          t4[t2] = null;
          modified = true;
          break;
        }
      }
    }
    return modified;
  },
  get$capacity: function() {
    return this._data.length;
  },
  add$1: function(_, element) {
    var t1, t2, newCapacity, oldData;
    t1 = this._size;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, t1);
    t2 = this._data.length;
    if (t1 === t2) {
      newCapacity = $.JSNumber_methods.toInt$0(t2 * 3 / 2 + 1);
      oldData = this._data;
      t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
      this._data = t1;
      $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
    }
    t1 = this._data;
    t2 = this._size;
    if (t2 !== (t2 | 0))
      return this.add$1$bailout(2, element, t1, t2);
    this._size = t2 + 1;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
  },
  add$1$bailout: function(state0, element, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._size;
      case 1:
        state0 = 0;
        if ($.$eq(t1, this._data.length) === true) {
          newCapacity = $.JSNumber_methods.toInt$0(this._data.length * 3 / 2 + 1);
          oldData = this._data;
          t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
          $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
          this._data = t1;
          $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
        }
        t1 = this._data;
        t2 = this._size;
      case 2:
        var newCapacity, oldData;
        state0 = 0;
        this._size = $.$add$ns(t2, 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          throw $.ioore(t2);
        t1[t2] = element;
    }
  },
  $indexSet: function(_, index, element) {
    var t1, t2, oldData;
    t1 = $.getInterceptor$n(index);
    if (t1.$ge(index, this._data.length)) {
      t2 = t1.$mul(index, 2);
      oldData = this._data;
      t2 = $.List_List(t2, $.getRuntimeTypeArgument(this, this.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
      this._data = t2;
      $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
    }
    if ($.$le$n(this._size, index))
      this._size = t1.$add(index, 1);
    t1 = this._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = element;
  },
  clear$0: function(_) {
    var t1, t2, i;
    for (t1 = this._data, t2 = t1.length, i = 0; $.JSNumber_methods.$lt(i, this._size); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = null;
    }
    this._size = 0;
  },
  addAll$1: function(_, items) {
    var t1, i, t2, newCapacity, oldData, t3, t4;
    for (t1 = $.getInterceptor$x(items), i = 0; $.$gt$n(t1.get$size(items), i); ++i) {
      t2 = t1.$index(items, i);
      if ($.$eq(this._size, this._data.length) === true) {
        newCapacity = $.JSNumber_methods.toInt$0(this._data.length * 3 / 2 + 1);
        oldData = this._data;
        t3 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, this.$asBag, 0));
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(this, this.$asBag, 0)]);
        this._data = t3;
        $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
      }
      t3 = this._data;
      t4 = this._size;
      this._size = $.$add$ns(t4, 1);
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4] = t2;
    }
  },
  isIndexWithinBounds$1: function(index) {
    return $.$lt$n(index, this.get$capacity());
  },
  toString$0: function(_) {
    return "[" + $.JSArray_methods.join$1(this._data, ",") + "]";
  },
  Bag$1$capacity: function(capacity, E) {
    this._readOnly = $.ReadOnlyBag$_of(this, null);
  },
  $isBag: true
};

$$.Poolable = {"": "Object;",
  moveToPool$0: function() {
    this.cleanUp$0();
    var t1 = $.get$ObjectPool__objectPools();
    $.add$1$ax(t1.$index(t1, this.get$runtimeType(this)), this);
  }
};

$$.ReadOnlyBag = {"": "Object;_bag",
  $index: function(_, index) {
    var t1 = this._bag._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$size: function(_) {
    var t1 = this._bag;
    return t1.get$size(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._bag;
    return t1.get$isEmpty(t1);
  },
  contains$1: function(_, element) {
    var t1 = this._bag;
    return t1.contains$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1 = this._bag;
    return t1.forEach$1(t1, f);
  }
};

$$.World = {"": "Object;_entityManager,_componentManager,_added,_changed,_deleted<,_enable,_disable,_systems,_systemsList<,_managers,_managersBag<,delta?",
  initialize$0: function() {
    var t1 = this._managersBag;
    t1.forEach$1(t1, new $.World_initialize_closure());
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_initialize_closure0());
  },
  get$entityManager: function() {
    return this._entityManager;
  },
  get$componentManager: function() {
    return this._componentManager;
  },
  addManager$1: function(manager) {
    var t1, newCapacity, oldData, t2, t3;
    t1 = this._managers;
    t1.$indexSet(t1, manager.get$runtimeType(manager), manager);
    t1 = this._managersBag;
    if ($.$eq(t1._size, t1._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
      oldData = t1._data;
      t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    t3 = t1._size;
    t1._size = $.$add$ns(t3, 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = manager;
    manager._world = this;
  },
  getManager$1: function(managerType) {
    var t1 = this._managers;
    return t1.$index(t1, managerType);
  },
  createEntity$0: function() {
    return this._entityManager._createEntityInstance$0();
  },
  getSystem$1: function(type) {
    var t1 = this._systems;
    return t1.$index(t1, type);
  },
  _check$2: function(entities, perform) {
    entities.forEach$1(entities, new $.World__check_closure(this, perform));
    entities.clear$0(entities);
  },
  process$0: function() {
    this.processEntityChanges$0();
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_process_closure());
  },
  processEntityChanges$0: function() {
    this._check$2(this._added, new $.World_processEntityChanges_closure());
    this._check$2(this._changed, new $.World_processEntityChanges_closure0());
    this._check$2(this._disable, new $.World_processEntityChanges_closure1());
    this._check$2(this._enable, new $.World_processEntityChanges_closure2());
    this._check$2(this._deleted, new $.World_processEntityChanges_closure3());
    this._componentManager.clean$0();
  },
  deleteAllEntities$0: function() {
    var t1 = this.get$entityManager()._entities;
    t1.forEach$1(t1, new $.World_deleteAllEntities_closure(this));
    this.processEntityChanges$0();
  },
  addEntity$1: function(e) {
    var t1, newCapacity, oldData, t2, t3;
    t1 = this._added;
    if ($.$eq(t1._size, t1._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
      oldData = t1._data;
      t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    t3 = t1._size;
    t1._size = $.$add$ns(t3, 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = e;
    return;
  },
  World$0: function() {
    this.addManager$1(this._entityManager);
    this.addManager$1(this._componentManager);
  }
};

$$.World_initialize_closure = {"": "Closure;",
  call$1: function(manager) {
    return manager.initialize$0();
  },
  $isFunction: true
};

$$.World_initialize_closure0 = {"": "Closure;",
  call$1: function(system) {
    return system.initialize$0();
  },
  $isFunction: true
};

$$.World__check_closure = {"": "Closure;this_0,perform_1",
  call$1: function(entity) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$_managersBag();
    t3 = this.perform_1;
    t2.forEach$1(t2, new $.World__check__closure(t3, entity));
    $.JSArray_methods.forEach$1(t1.get$_systemsList(), new $.World__check__closure0(t3, entity));
  },
  $isFunction: true
};

$$.World__check__closure = {"": "Closure;perform_2,entity_3",
  call$1: function(manager) {
    return this.perform_2.call$2(manager, this.entity_3);
  },
  $isFunction: true
};

$$.World__check__closure0 = {"": "Closure;perform_4,entity_5",
  call$1: function(system) {
    return this.perform_4.call$2(system, this.entity_5);
  },
  $isFunction: true
};

$$.World_process_closure = {"": "Closure;",
  call$1: function(system) {
    if (system.get$passive() !== true)
      system.process$0();
  },
  $isFunction: true
};

$$.World_processEntityChanges_closure = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.added$1(entity);
  },
  $isFunction: true
};

$$.World_processEntityChanges_closure0 = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.changed$1(entity);
  },
  $isFunction: true
};

$$.World_processEntityChanges_closure1 = {"": "Closure;",
  call$2: function(observer, entity) {
    return $.disabled$1$x(observer, entity);
  },
  $isFunction: true
};

$$.World_processEntityChanges_closure2 = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.enabled$1(entity);
  },
  $isFunction: true
};

$$.World_processEntityChanges_closure3 = {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.deleted$1(entity);
  },
  $isFunction: true
};

$$.World_deleteAllEntities_closure = {"": "Closure;this_0",
  call$1: function(entity) {
    var t1, newCapacity, oldData, t2, t3;
    if (null != entity) {
      t1 = this.this_0;
      if ($.contains$1$asx(t1.get$_deleted(), entity) !== true) {
        t1 = t1.get$_deleted();
        if ($.$eq(t1.get$_size(), t1.get$_data().length) === true) {
          newCapacity = $.JSNumber_methods.toInt$0(t1.get$_data().length * 3 / 2 + 1);
          oldData = t1.get$_data();
          t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
          t1.set$_data(t2);
          $.JSArray_methods.setRange$3(t1.get$_data(), 0, oldData.length, oldData);
        }
        t2 = t1.get$_data();
        t3 = t1.get$_size();
        t1.set$_size($.$add$ns(t3, 1));
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          throw $.ioore(t3);
        t2[t3] = entity;
      }
    }
  },
  $isFunction: true
};

$$.hsl_irgba_hue2rgb = {"": "Closure;",
  call$3: function(p, q, t) {
    var t1 = $.getInterceptor$n(t);
    if (t1.$lt(t, 0))
      t = t1.$add(t, 1);
    t1 = $.getInterceptor$n(t);
    if (t1.$gt(t, 1))
      t = t1.$sub(t, 1);
    t1 = $.getInterceptor$n(t);
    if (t1.$lt(t, 0.16666666666666666))
      return $.$add$ns(p, $.$mul$n($.$mul$n($.$sub$n(q, p), 6), t));
    if (t1.$lt(t, 0.5))
      return q;
    if (t1.$lt(t, 0.6666666666666666)) {
      t1 = $.$sub$n(q, p);
      if (typeof t !== "number")
        throw $.iae(t);
      return $.$add$ns(p, $.$mul$n($.$mul$n(t1, 0.6666666666666666 - t), 6));
    }
    return p;
  },
  $isFunction: true,
  $isInitializer: true
};

$$.reverse_closure = {"": "Closure;f0_0",
  call$3: function(ratio, change, baseValue) {
    return this.f0_0.call$3(ratio, $.$negate$n(change), $.$add$ns(baseValue, change));
  },
  $isFunction: true
};

$$.goback_closure = {"": "Closure;f0_0",
  call$3: function(ratio, change, baseValue) {
    var t1, t2;
    ratio = $.$mul$n(ratio, 2);
    t1 = $.getInterceptor$n(ratio);
    t2 = this.f0_0;
    return t1.$lt(ratio, 1) ? t2.call$3(ratio, change, baseValue) : $.reverse(t2).call$3(t1.$sub(ratio, 1), change, baseValue);
  },
  $isFunction: true
};

$$.periodicRatio_closure = {"": "Closure;f0_0,duration_1",
  call$3: function(ratio, change, baseValue) {
    var t1;
    ratio = $.$div$n(ratio, this.duration_1);
    t1 = $.getInterceptor$n(ratio);
    return this.f0_0.call$3(t1.$sub(ratio, t1.toInt$0(ratio)), change, baseValue);
  },
  $isFunction: true
};

$$.onceRatio_closure = {"": "Closure;f0_0,duration_1",
  call$3: function(ratio, change, baseValue) {
    var t1, t2;
    t1 = this.duration_1;
    t2 = $.getInterceptor$n(ratio);
    ratio = t2.$lt(ratio, t1) ? t2.$div(ratio, t1) : 1;
    return this.f0_0.call$3(ratio, change, baseValue);
  },
  $isFunction: true
};

$$.Animatable = {"": "ComponentPoolable;l<",
  cleanUp$0: function() {
    var t1 = this.l;
    t1.clear$0(t1);
  },
  add$1: function(_, a) {
    var t1 = this.l;
    t1.add$1(t1, a);
    return this;
  },
  $isAnimatable: true
};

$$.Animation = {"": "Object;_t0@,onBegin,onTick,onEnd,next<",
  onBegin$3: function(arg0, arg1, arg2) {
    return this.onBegin.call$3(arg0, arg1, arg2);
  },
  onTick$3: function(arg0, arg1, arg2) {
    return this.onTick.call$3(arg0, arg1, arg2);
  },
  onEnd$3: function(arg0, arg1, arg2) {
    return this.onEnd.call$3(arg0, arg1, arg2);
  },
  $isAnimation: true
};

$$.System_Animator = {"": "EntityProcessingSystem;_animatableMapper,_tickTime<,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._animatableMapper = $.ComponentMapper$($.Type_I6I, this.world, $.Animatable);
  },
  begin$0: function() {
    var t1, t2;
    t1 = this._tickTime;
    t2 = this.world.delta;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._tickTime = t1 + t2;
  },
  processEntity$1: function(entity) {
    $.$index$asx(this._animatableMapper._components, $.get$id$x(entity)).get$l().iterateAndUpdate$1(new $.System_Animator_processEntity_closure(this, entity));
  }
};

$$.System_Animator_processEntity_closure = {"": "Closure;this_0,entity_1",
  call$1: function(anim) {
    var t1, t2, t3, cont;
    if (anim.get$_t0() < 0) {
      t1 = this.this_0;
      anim.set$_t0(t1.get$_tickTime());
      anim.onBegin$3(this.entity_1, t1.get$_tickTime(), anim.get$_t0());
    }
    t1 = anim.get$_t0();
    t2 = this.this_0;
    t3 = t2.get$_tickTime();
    cont = !(t1 <= t3) || anim.onTick$3(this.entity_1, t3, t1);
    t1 = cont === true;
    if (!t1)
      anim.onEnd$3(this.entity_1, t2.get$_tickTime(), anim.get$_t0());
    return t1 ? anim : anim.get$next();
  },
  $isFunction: true
};

$$.Emitter = {"": "Component;initializers<,counter,genParticles<,once<",
  counter$1: function(arg0) {
    return this.counter.call$1(arg0);
  },
  $isEmitter: true
};

$$.System_Emitters = {"": "EntityProcessingSystem;_emitterMapper,_dt<,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._emitterMapper = $.ComponentMapper$($.Type_Opk, this.world, $.Emitter);
  },
  begin$0: function() {
    this._dt = this.world.delta;
  },
  processEntity$1: function(entity) {
    var em, nb, e, ne;
    em = $.$index$asx(this._emitterMapper._components, $.get$id$x(entity));
    nb = em.counter$1(this._dt);
    if (em.get$genParticles()) {
      e = this.world._entityManager._createEntityInstance$0();
      e.addComponent$1($.Particles$(nb));
      ne = $.List_List$filled(1, e, $.Entity);
    } else
      ne = this._genEntities$1(nb);
    $.JSArray_methods.forEach$1(em.get$initializers(), new $.System_Emitters_processEntity_closure(this, entity, ne));
    $.forEach$1$ax(ne, new $.System_Emitters_processEntity_closure0(this));
    if (em.get$once())
      entity.deleteFromWorld$0();
  },
  _genEntities$1: function(nb) {
    return $.List_List$generate(nb, new $.System_Emitters__genEntities_closure(this), true, $.Entity);
  }
};

$$.System_Emitters_processEntity_closure = {"": "Closure;this_0,entity_1,ne_2",
  call$1: function(init) {
    return init.call$3(this.this_0.get$_dt(), this.entity_1, this.ne_2);
  },
  $isFunction: true
};

$$.System_Emitters_processEntity_closure0 = {"": "Closure;this_3",
  call$1: function(e) {
    var t1, newCapacity, oldData, t2, t3;
    t1 = this.this_3.get$world()._added;
    if ($.$eq(t1._size, t1._data.length) === true) {
      newCapacity = $.JSNumber_methods.toInt$0(t1._data.length * 3 / 2 + 1);
      oldData = t1._data;
      t2 = $.List_List(newCapacity, $.getRuntimeTypeArgument(t1, t1.$asBag, 0));
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$asBag, 0)]);
      t1._data = t2;
      $.JSArray_methods.setRange$3(t1._data, 0, oldData.length, oldData);
    }
    t2 = t1._data;
    t3 = t1._size;
    t1._size = $.$add$ns(t3, 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = e;
    return;
  },
  $isFunction: true
};

$$.System_Emitters__genEntities_closure = {"": "Closure;this_0",
  call$1: function(i) {
    return this.this_0.get$world()._entityManager._createEntityInstance$0();
  },
  $isFunction: true
};

$$.processParticules_closure = {"": "Closure;f_0",
  call$1: function(e) {
    var ps = $.propertyTypeCast(e.getComponent$1($.get$Particles_CT()), "$isParticles");
    if (ps != null)
      $.forEach$1$ax(ps.l, this.f_0);
  },
  $isFunction: true
};

$$.particlesStartPosition_closure = {"": "Closure;gen_0,fromEmitter_1",
  call$3: function(dt, emitter, es) {
    $.processParticules(es, new $.particlesStartPosition__closure(this.gen_0, this.fromEmitter_1, dt, $.propertyTypeCast(emitter.getComponent$1($.get$Transform_CT()), "$isTransform").position3d));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.particlesStartPosition__closure = {"": "Closure;gen_2,fromEmitter_3,dt_4,pos_5",
  call$1: function(p) {
    this.gen_2.call$2(p.get$position3d(), this.dt_4);
    if (this.fromEmitter_3)
      $.add$1$ax(p.get$position3d(), this.pos_5);
  },
  $isFunction: true
};

$$.particlesStartPositionPrevious_closure = {"": "Closure;gen_0,fromEmitter_1",
  call$3: function(dt, emitter, es) {
    var mat4, tf, t1;
    mat4 = $.mat4$identity();
    if (this.fromEmitter_1) {
      tf = $.propertyTypeCast(emitter.getComponent$1($.get$Transform_CT()), "$isTransform");
      t1 = tf.rotation3d;
      mat4.rotateX$1(t1.get$x(t1));
      t1 = tf.rotation3d;
      mat4.rotateY$1(t1.get$y(t1));
      t1 = tf.rotation3d;
      mat4.rotateZ$1(t1.get$z(t1));
    }
    $.processParticules(es, new $.particlesStartPositionPrevious__closure(this.gen_0, dt, mat4));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.particlesStartPositionPrevious__closure = {"": "Closure;gen_2,dt_3,mat4_4",
  call$1: function(p) {
    var v = this.mat4_4.rotate3$1(this.gen_2.call$2($.vec3$zero(), this.dt_3));
    $.add$1$ax(v, p.get$position3d());
    p.set$position3dPrevious(v);
  },
  $isFunction: true
};

$$.addComponents_closure = {"": "Closure;fs_0",
  call$3: function(dt, emitter, es) {
    $.forEach$1$ax(es, new $.addComponents__closure(this.fs_0));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.addComponents__closure = {"": "Closure;fs_1",
  call$1: function(e) {
    $.JSArray_methods.forEach$1(this.fs_1, new $.addComponents___closure(e));
  },
  $isFunction: true
};

$$.addComponents___closure = {"": "Closure;e_2",
  call$1: function(f) {
    return this.e_2.addComponent$1(f.call$0());
  },
  $isFunction: true
};

$$.particlesAddComponents_closure = {"": "Closure;fs_0",
  call$3: function(dt, emitter, es) {
    $.forEach$1$ax(es, new $.particlesAddComponents__closure(this.fs_0));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.particlesAddComponents__closure = {"": "Closure;fs_1",
  call$1: function(e) {
    var ps = $.propertyTypeCast(e.getComponent$1($.get$Particles_CT()), "$isParticles");
    if (ps != null)
      $.JSArray_methods.forEach$1(this.fs_1, new $.particlesAddComponents___closure(e, ps));
  },
  $isFunction: true
};

$$.particlesAddComponents___closure = {"": "Closure;e_2,ps_3",
  call$1: function(f) {
    return this.e_2.addComponent$1(f.call$1($.get$length$asx(this.ps_3.get$l())));
  },
  $isFunction: true
};

$$.zero_closure = {"": "Closure;",
  call$1: function(dt) {
    return 0;
  },
  $isFunction: true
};

$$.singleWave_closure = {"": "Closure;v_0",
  call$1: function(dt) {
    return $.$eq(dt, 0) === true ? this.v_0 : 0;
  },
  $isFunction: true
};

$$.steady_closure = {"": "Closure;box_0,rate_1,_rateInv_2",
  call$1: function(dt) {
    var t1, t2, b;
    t1 = this.box_0;
    t1._acc_0 = $.$add$ns(t1._acc_0, dt);
    t2 = t1._acc_0;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    b = $.JSDouble_methods.round$0(this.rate_1 * t2 / 1000);
    t1._acc_0 = $.$sub$n(t1._acc_0, b * this._rateInv_2);
    return b;
  },
  $isFunction: true
};

$$.constant_closure = {"": "Closure;x_0",
  call$2: function(v, dt) {
    return v.setFrom$1(this.x_0);
  },
  $isFunction: true
};

$$.box_closure = {"": "Closure;center_0,offsets_1",
  call$2: function(v, dt) {
    var t1, t2, t3;
    v.setFrom$1(this.center_0);
    t1 = $.getInterceptor$x(v);
    t2 = t1.get$x(v);
    $.get$_random();
    t3 = this.offsets_1;
    t1.set$x(v, $.$add$ns(t2, (Math.random() - 0.5) * 2 * t3.get$x(t3)));
    t2 = t1.get$y(v);
    $.get$_random();
    t1.set$y(v, $.$add$ns(t2, (Math.random() - 0.5) * 2 * t3.get$y(t3)));
    t2 = t1.get$z(v);
    $.get$_random();
    t1.set$z(v, $.$add$ns(t2, (Math.random() - 0.5) * 2 * t3.get$z(t3)));
    return v;
  },
  $isFunction: true
};

$$.line_closure = {"": "Closure;box_0,start_1,easing_2,length_3",
  call$2: function(v, dt) {
    var t1 = this.box_0;
    $.add$1$ax($.scale$1$x(v.setFrom$1(this.length_3), this.easing_2.call$3(t1.acc_0, 1, 0)), this.start_1);
    t1.acc_0 = $.$add$ns(t1.acc_0, dt);
    return v;
  },
  $isFunction: true
};

$$.Particle = {"": "Object;position3d<,position3dPrevious@", $isParticle: true};

$$.ParticleInfo0 = {"": "Object;lifetime,color*,scale>,mass,radius@,age,energy,isDead",
  scale$1: function($receiver, arg0) {
    return this.scale.call$1(arg0);
  },
  $isParticleInfo0: true
};

$$.Particles = {"": "Component;l<", $isParticles: true};

$$.Particles_closure = {"": "Closure;",
  call$1: function(i) {
    return $.Particle$(null);
  },
  $isFunction: true
};

$$.ParticleInfo0s = {"": "Component;l<", $isParticleInfo0s: true};

$$.ParticleInfo0s_closure = {"": "Closure;",
  call$1: function(i) {
    return $.ParticleInfo0$();
  },
  $isFunction: true
};

$$.Drawable = {"": "Component;draw",
  draw$3: function(arg0, arg1, arg2) {
    return this.draw.call$3(arg0, arg1, arg2);
  },
  $isDrawable: true
};

$$.System_Renderer = {"": "EntityProcessingSystem;_gVisible,_g,_transformMapper,_drawMapper,_w,_h,_areaEntity,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._drawMapper = $.ComponentMapper$($.Type_iuI, this.world, $.Drawable);
    this._transformMapper = $.ComponentMapper$($.Type_UU7, this.world, $.Transform);
    this._initCanvasDimension$0();
  },
  _initCanvasDimension$0: function() {
    var t1, canvasV, dpr, t2;
    t1 = this._gVisible;
    canvasV = t1.canvas;
    dpr = window.devicePixelRatio;
    t2 = $.getInterceptor$n(dpr);
    this._w = $.JSNumber_methods.round$0(t2.$mul(dpr, canvasV.clientWidth));
    this._h = $.JSNumber_methods.round$0(t2.$mul(dpr, canvasV.clientHeight));
    canvasV.width = this._w;
    canvasV.height = this._h;
    t1.scale(dpr, dpr);
    t1 = this._g;
    t1.canvas.width = this._w;
    t1.canvas.height = this._h;
    t1.scale(dpr, dpr);
  },
  begin$0: function() {
    this._g.save();
  },
  processEntity$1: function(entity) {
    var d, tf, t1, t2, t3, t4;
    d = $.$index$asx(this._drawMapper._components, $.get$id$x(entity));
    tf = this._transformMapper.getSafe$1(entity);
    t1 = tf != null;
    if (t1) {
      t2 = this._g;
      t2.translate($.toInt$0$n($.get$x$x(tf.get$position3d())), $.toInt$0$n($.get$y$x(tf.get$position3d())));
      t3 = tf.get$rotation3d();
      t2.rotate(t3.get$z(t3));
      t3 = tf.get$scale3d();
      t3 = t3.get$x(t3);
      t4 = tf.get$scale3d();
      t2.scale(t3, t4.get$y(t4));
    }
    t2 = this._areaEntity;
    t2.set$x(t2, 0);
    t2.set$y(t2, 0);
    t3 = this._g;
    d.draw$3(t3, entity, t2);
    if (t1) {
      t3.translate(-$.toInt$0$n($.get$x$x(tf.get$position3d())), -$.toInt$0$n($.get$y$x(tf.get$position3d())));
      t1 = tf.get$rotation3d();
      t3.rotate(-t1.get$z(t1));
      t1 = tf.get$scale3d();
      t1 = t1.get$x(t1);
      t2 = tf.get$scale3d();
      t3.scale(1 / t1, 1 / t2.get$y(t2));
    }
    t3.restore();
  },
  end$0: function() {
    var t1, t2;
    t1 = this._g;
    t1.restore();
    t2 = this._gVisible;
    t2.clearRect(0, 0, this._w, this._h);
    t2.drawImage(t1.canvas, 0, 0);
    t1.clearRect(0, 0, this._w, this._h);
  }
};

$$.rect_closure = {"": "Closure;w_0,h_1,fillStyle_2,strokeStyle_3,strokeLineWidth_4,strokeLineDashOffset_5",
  call$3: function(g, e, area) {
    var t1, t2, t3, rx, t4, ry, t5, t6;
    t1 = this.strokeStyle_3;
    t2 = t1 == null;
    if (t2 && this.fillStyle_2 == null)
      return;
    t3 = this.w_0;
    rx = -t3 / 2;
    t4 = this.h_1;
    ry = -t4 / 2;
    t5 = this.fillStyle_2;
    if (t5 != null) {
      t6 = $.getInterceptor$x(g);
      t6.set$fillStyle(g, t5);
      t6.fillRect$4(g, rx, ry, t3, t4);
    }
    if (!t2) {
      t2 = $.getInterceptor$x(g);
      t2.set$strokeStyle(g, t1);
      t1 = this.strokeLineWidth_4;
      t2.set$lineWidth(g, t1);
      t2.set$lineDashOffset(g, this.strokeLineDashOffset_5);
      t2.strokeRect$5(g, rx, ry, t3, t4, t1);
    }
    t1 = $.getInterceptor$x(area);
    t1.set$x(area, $.JSDouble_methods.toDouble$0(t3));
    t1.set$y(area, $.JSDouble_methods.toDouble$0(t4));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.text_closure = {"": "Closure;txt_0,fillStyle_1,strokeStyle_2,strokeLineWidth_3,strokeLineDashOffset_4,font_5",
  call$3: function(g, e, area) {
    var t1, t2, t3, t4;
    t1 = this.strokeStyle_2;
    t2 = t1 == null;
    if (t2 && this.fillStyle_1 == null)
      return;
    t3 = this.fillStyle_1;
    if (t3 != null) {
      t4 = $.getInterceptor$x(g);
      t4.set$fillStyle(g, t3);
      t4.fillText$3(g, this.txt_0, 0, 0);
    }
    if (!t2) {
      t2 = $.getInterceptor$x(g);
      t2.set$strokeStyle(g, t1);
      t2.set$lineWidth(g, this.strokeLineWidth_3);
      t2.set$lineDashOffset(g, this.strokeLineDashOffset_4);
      t2.set$font(g, this.font_5);
      t2.strokeText$3(g, this.txt_0, 0, 0);
    }
  },
  $isFunction: true,
  $isInitializer: true
};

$$.particles_closure = {"": "Closure;radius_0,fillStyle_1,strokeStyle_2,strokeLineWidth_3,strokeLineDashOffset_4",
  call$3: function(g, entity, area) {
    var particle0s, t1, t2, t3, t4;
    particle0s = $.propertyTypeCast(entity.getComponent$1($.get$Particles_CT()), "$isParticles");
    if (particle0s == null || $.get$isEmpty$asx(particle0s.l) === true)
      return;
    t1 = this.strokeStyle_2;
    t2 = t1 == null;
    if (t2 && this.fillStyle_1 == null)
      return;
    t3 = $.getInterceptor$x(g);
    t3.beginPath$0(g);
    $.forEach$1$ax(particle0s.l, new $.particles__closure(this.radius_0, g));
    t3.closePath$0(g);
    t4 = this.fillStyle_1;
    if (t4 != null) {
      t3.set$fillStyle(g, t4);
      t3.fill$0(g);
    }
    if (!t2) {
      t3.set$strokeStyle(g, t1);
      t3.set$lineWidth(g, this.strokeLineWidth_3);
      t3.set$lineDashOffset(g, this.strokeLineDashOffset_4);
      t3.stroke$0(g);
    }
  },
  $isFunction: true,
  $isInitializer: true
};

$$.particles__closure = {"": "Closure;radius_5,g_6",
  call$1: function(p) {
    var pos, t1, t2, t3;
    pos = p.get$position3d();
    t1 = $.getInterceptor(pos);
    if (pos != null) {
      t2 = this.g_6;
      t3 = this.radius_5;
      $.moveTo$2$x(t2, $.$add$ns(t1.get$x(pos), t3), t1.get$y(pos));
      $.arc$6$x(t2, t1.get$x(pos), t1.get$y(pos), t3, 0, 6.283185307179586, true);
    }
  },
  $isFunction: true
};

$$.particleInfo0s_closure = {"": "Closure;radius_0,fillStyle_1,strokeStyle_2,strokeLineWidth_3,strokeLineDashOffset_4",
  call$3: function(g, entity, area) {
    var particle0s, t1, t2, i, t3, t4, t5, t6, t7, t8, radius0, pos, t9, p0, t10, t11, t12, t13, radius00, fillStyle0;
    particle0s = $.propertyTypeCast(entity.getComponent$1($.get$Particles_CT()), "$isParticles");
    if (particle0s == null || $.get$isEmpty$asx(particle0s.l) === true)
      return;
    t1 = entity.getComponent$1($.get$ParticleInfo0s_CT());
    $.propertyTypeCast(t1, "$isParticleInfo0s");
    if (t1 == null || $.get$isEmpty$asx(t1.l) === true)
      return $.particles(this.radius_0, this.fillStyle_1, this.strokeLineDashOffset_4, this.strokeLineWidth_3, this.strokeStyle_2).call$3(g, entity, area);
    t2 = particle0s.l;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.call$3$bailout(1, g, t2, t1);
    i = t2.length - 1;
    t3 = this.strokeStyle_2;
    t4 = $.getInterceptor$x(g);
    t5 = this.strokeLineWidth_3;
    t6 = this.strokeLineDashOffset_4;
    t7 = t3 != null;
    t8 = this.fillStyle_1;
    if (typeof t8 !== "string")
      return this.call$3$bailout(2, g, t2, t1, t3, t4, t5, t6, i, t8, t7);
    radius0 = this.radius_0;
    for (; i > -1; --i) {
      if (i >= t2.length)
        throw $.ioore(i);
      pos = t2[i].get$position3d();
      t9 = $.getInterceptor(pos);
      if (pos != null) {
        p0 = $.$index$asx(t1.l, i);
        t10 = $.getInterceptor(p0);
        t11 = p0 != null;
        if (t11) {
          t12 = p0.get$radius();
          t13 = t10.get$scale(p0);
          if (typeof t13 !== "number")
            throw $.iae(t13);
          radius00 = t12 * t13;
        } else
          radius00 = radius0;
        if (t11)
          fillStyle0 = $.irgba_rgbaString(t10.get$color(p0));
        else
          fillStyle0 = t8;
        t4.beginPath$0(g);
        t4.arc$6(g, t9.get$x(pos), t9.get$y(pos), radius00, 0, 6.283185307179586, true);
        t4.closePath$0(g);
        t4.set$fillStyle(g, fillStyle0);
        t4.fill$0(g);
        if (t7) {
          t4.set$strokeStyle(g, t3);
          t4.set$lineWidth(g, t5);
          t4.set$lineDashOffset(g, t6);
          t4.stroke$0(g);
        }
      }
    }
  },
  call$3$bailout: function(state0, g, t2, t1, t3, t4, t5, t6, i, t8, t7) {
    switch (state0) {
      case 0:
        particle0s = $.propertyTypeCast(entity.getComponent$1($.get$Particles_CT()), "$isParticles");
        if (particle0s == null || $.get$isEmpty$asx(particle0s.l) === true)
          return;
        t1 = entity.getComponent$1($.get$ParticleInfo0s_CT());
        $.propertyTypeCast(t1, "$isParticleInfo0s");
        if (t1 == null || $.get$isEmpty$asx(t1.l) === true)
          return $.particles(this.radius_0, this.fillStyle_1, this.strokeLineDashOffset_4, this.strokeLineWidth_3, this.strokeStyle_2).call$3(g, entity, area);
        t2 = particle0s.l;
      case 1:
        state0 = 0;
        i = $.$sub$n($.get$length$asx(t2), 1);
        t3 = this.strokeStyle_2;
        t4 = $.getInterceptor$x(g);
        t5 = this.strokeLineWidth_3;
        t6 = this.strokeLineDashOffset_4;
        t7 = t3 != null;
        t8 = this.fillStyle_1;
      case 2:
        var particle0s, t9, radius0, t10, pos, t11, p0, t12, t13, t14, t15, radius00, fillStyle0;
        state0 = 0;
        t9 = t8 != null;
        radius0 = this.radius_0;
        for (; t10 = $.getInterceptor$n(i), t10.$gt(i, -1); i = t10.$sub(i, 1)) {
          pos = $.$index$asx(t2, i).get$position3d();
          t11 = $.getInterceptor(pos);
          if (pos != null) {
            p0 = $.$index$asx(t1.l, i);
            t12 = $.getInterceptor(p0);
            t13 = p0 != null;
            if (t13) {
              t14 = p0.get$radius();
              t15 = t12.get$scale(p0);
              if (typeof t15 !== "number")
                throw $.iae(t15);
              radius00 = t14 * t15;
            } else
              radius00 = radius0;
            fillStyle0 = t13 ? $.irgba_rgbaString(t12.get$color(p0)) : t8;
            t4.beginPath$0(g);
            t4.arc$6(g, t11.get$x(pos), t11.get$y(pos), radius00, 0, 6.283185307179586, true);
            t4.closePath$0(g);
            if (t9) {
              t4.set$fillStyle(g, fillStyle0);
              t4.fill$0(g);
            }
            if (t7) {
              t4.set$strokeStyle(g, t3);
              t4.set$lineWidth(g, t5);
              t4.set$lineDashOffset(g, t6);
              t4.stroke$0(g);
            }
          }
        }
    }
  },
  $isFunction: true,
  $isInitializer: true
};

$$.drawConstraints_closure = {"": "Closure;pinStyle_0,distanceStyle_1,angleStyle_2",
  call$3: function(g, e, area) {
    $.JSArray_methods.forEach$1($.propertyTypeCast(e.getComponent$1($.get$Constraints_CT()), "$isConstraints").l, new $.drawConstraints__closure(this.pinStyle_0, this.distanceStyle_1, this.angleStyle_2, g));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.drawConstraints__closure = {"": "Closure;pinStyle_3,distanceStyle_4,angleStyle_5,g_6",
  call$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isConstraint_Distance)
      $.drawCDistance(this.g_6, x, this.distanceStyle_4);
    else if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isConstraint_Pin)
      $.drawCPin(this.g_6, x, this.pinStyle_3);
  },
  $isFunction: true
};

$$.DrawComponentType = {"": "Object;ct<,draw",
  draw$3: function(arg0, arg1, arg2) {
    return this.draw.call$3(arg0, arg1, arg2);
  }
};

$$.drawComponentType_closure = {"": "Closure;l_0",
  call$3: function(g, e, area) {
    $.JSArray_methods.forEach$1(this.l_0, new $.drawComponentType__closure(g, e, area));
  },
  $isFunction: true,
  $isInitializer: true
};

$$.drawComponentType__closure = {"": "Closure;g_1,e_2,area_3",
  call$1: function(i) {
    var t1 = this.e_2;
    if (t1.getComponent$1(i.get$ct()) != null)
      i.draw$3(this.g_1, t1, this.area_3);
  },
  $isFunction: true
};

$$.Transform = {"": "ComponentPoolable;position3d<,rotation3d<,scale3d<,_position2d", $isTransform: true};

$$.Constraint = {"": "Object;", $isConstraint: true};

$$.Constraints = {"": "Component;l<", $isConstraints: true};

$$.System_Simulator = {"": "EntitySystem;_particlesMapper<,_constraintsMapper<,friction@,step>,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._particlesMapper = $.ComponentMapper$($.Type_GZG, this.world, $.Particles);
    this._constraintsMapper = $.ComponentMapper$($.Type_rpo, this.world, $.Constraints);
  },
  checkProcessing$0: function() {
    return true;
  },
  processEntities$1: function(entities) {
    var particlesG, constraintsG, t1;
    particlesG = $.List_List($, null);
    constraintsG = $.List_List($, null);
    t1 = entities._bag;
    t1.forEach$1(t1, new $.System_Simulator_processEntities_closure(this, particlesG, constraintsG));
    $.JSArray_methods.forEach$1(particlesG, new $.System_Simulator_processEntities_closure0(this));
    $.JSArray_methods.forEach$1(constraintsG, new $.System_Simulator_processEntities_closure1(this, 1 / this.step));
  }
};

$$.System_Simulator_processEntities_closure = {"": "Closure;this_0,particlesG_1,constraintsG_2",
  call$1: function(e) {
    var t1, t2, ps, cs;
    t1 = this.this_0;
    t2 = $.getInterceptor$x(e);
    ps = $.$index$asx(t1.get$_particlesMapper()._components, t2.get$id(e));
    if (ps != null)
      this.particlesG_1.push(ps);
    cs = $.$index$asx(t1.get$_constraintsMapper()._components, t2.get$id(e));
    if (cs != null)
      this.constraintsG_2.push(cs);
  },
  $isFunction: true
};

$$.System_Simulator_processEntities_closure0 = {"": "Closure;this_3",
  call$1: function(c) {
    if (c == null)
      return;
    $.forEach$1$ax(c.get$l(), new $.System_Simulator_processEntities__closure0(this.this_3));
  },
  $isFunction: true
};

$$.System_Simulator_processEntities__closure0 = {"": "Closure;this_4",
  call$1: function(p) {
    var velocity;
    if (p.get$position3dPrevious() == null)
      p.set$position3dPrevious($.clone$0$x(p.get$position3d()));
    velocity = $.scale$1$x($.$sub$n(p.get$position3d(), p.get$position3dPrevious()), this.this_4.get$friction());
    p.get$position3dPrevious().setFrom$1(p.get$position3d());
    $.add$1$ax(p.get$position3d(), velocity);
  },
  $isFunction: true
};

$$.System_Simulator_processEntities_closure1 = {"": "Closure;this_5,stepCoef_6",
  call$1: function(c) {
    var t1, i;
    for (t1 = this.stepCoef_6, i = 0; $.JSNumber_methods.$lt(i, $.get$step$x(this.this_5)); ++i)
      $.forEach$1$ax(c.get$l(), new $.System_Simulator_processEntities__closure(t1));
  },
  $isFunction: true
};

$$.System_Simulator_processEntities__closure = {"": "Closure;stepCoef_7",
  call$1: function(j) {
    j.relax$1(this.stepCoef_7);
  },
  $isFunction: true
};

$$.Constraint_Distance = {"": "Object;a<,b<,distance2,stiffness",
  relax$1: function(stepCoef) {
    var t1, t2, normal, m;
    t1 = this.a;
    t2 = this.b;
    normal = $.$sub$n(t1, t2);
    m = normal.get$length2();
    $.scale$1$x(normal, $.$mul$n($.$mul$n($.$div$n($.$sub$n(this.distance2, m), m), this.stiffness), stepCoef));
    $.add$1$ax(t1, normal);
    t2.sub$1(normal);
  },
  Constraint_Distance$4: function(a, b, stiffness, distance1) {
    if (distance1 == null)
      distance1 = $.get$length$asx($.$sub$n(this.a, this.b));
    this.distance2 = $.$mul$n(distance1, distance1);
  },
  $isConstraint_Distance: true,
  $isConstraint: true
};

$$.Constraint_Pin = {"": "Object;pin<,a<",
  relax$1: function(stepCoef) {
    this.a.setFrom$1(this.pin);
  },
  $isConstraint_Pin: true,
  $isConstraint: true
};

$$.makeLineSegments_closure = {"": "Closure;",
  call$1: function(x) {
    return $.Particle$(x);
  },
  $isFunction: true
};

$$.LinkedBag = {"": "Object;_liblib9$_head",
  get$length: function(_) {
    var a, i;
    for (a = this._liblib9$_head, i = 0; a != null; a = a._liblib9$_next)
      if (a._obj != null)
        ++i;
    return i;
  },
  clear$0: function(_) {
    var a;
    for (a = this._liblib9$_head; a != null; a = a._liblib9$_next)
      a._obj = null;
  },
  add$1: function(_, obj) {
    var a, a0, e;
    a = this._liblib9$_head;
    for (; a != null; a = a0) {
      if (a._obj == null) {
        a._obj = obj;
        return;
      }
      a0 = a._liblib9$_next;
      if (a0 == null) {
        e = $.LinkedEntry$();
        e._obj = obj;
        a._liblib9$_next = e;
        return;
      }
    }
  },
  iterateAndUpdate$1: function(f) {
    var current, t1;
    for (current = this._liblib9$_head; current != null; current = current._liblib9$_next) {
      t1 = current._obj;
      if (t1 != null)
        current._obj = f.call$1(t1);
    }
  }
};

$$.LinkedEntry = {"": "Object;_liblib9$_next,_obj"};

$$.mat4 = {"": "Object;_storage<",
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this._storage;
    t2 = arg.get$_storage();
    if (15 >= t2.length)
      throw $.ioore(15);
    t2 = t2[15];
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t2;
    t2 = arg.get$_storage();
    if (14 >= t2.length)
      throw $.ioore(14);
    t1[14] = t2[14];
    t2 = arg.get$_storage();
    if (13 >= t2.length)
      throw $.ioore(13);
    t1[13] = t2[13];
    t2 = arg.get$_storage();
    if (12 >= t2.length)
      throw $.ioore(12);
    t1[12] = t2[12];
    t2 = arg.get$_storage();
    if (11 >= t2.length)
      throw $.ioore(11);
    t1[11] = t2[11];
    t2 = arg.get$_storage();
    if (10 >= t2.length)
      throw $.ioore(10);
    t1[10] = t2[10];
    t2 = arg.get$_storage();
    if (9 >= t2.length)
      throw $.ioore(9);
    t1[9] = t2[9];
    t2 = arg.get$_storage();
    if (8 >= t2.length)
      throw $.ioore(8);
    t1[8] = t2[8];
    t2 = arg.get$_storage();
    if (7 >= t2.length)
      throw $.ioore(7);
    t1[7] = t2[7];
    t2 = arg.get$_storage();
    if (6 >= t2.length)
      throw $.ioore(6);
    t1[6] = t2[6];
    t2 = arg.get$_storage();
    if (5 >= t2.length)
      throw $.ioore(5);
    t1[5] = t2[5];
    t2 = arg.get$_storage();
    if (4 >= t2.length)
      throw $.ioore(4);
    t1[4] = t2[4];
    t2 = arg.get$_storage();
    if (3 >= t2.length)
      throw $.ioore(3);
    t1[3] = t2[3];
    t2 = arg.get$_storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t1[2] = t2[2];
    t2 = arg.get$_storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[1] = t2[1];
    t2 = arg.get$_storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n[1] " + $.S(this.getRow$1(1)) + "\n[2] " + $.S(this.getRow$1(2)) + "\n[3] " + $.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var r, t1, t2, t3, t4, t5;
    r = $.vec4$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = 0 + row;
    t4 = t2.length;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = 4 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3;
    t3 = 8 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t3;
    t3 = 12 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t3;
    return r;
  },
  clone$0: function(_) {
    return $.mat4$copy(this);
  },
  _mul_scale$1: function(arg) {
    var r, t1, t2, t3;
    r = $.mat4$zero();
    t1 = r._storage;
    t2 = this._storage;
    if (15 >= t2.length)
      throw $.ioore(15);
    t3 = t2[15];
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t3 * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    r = $.mat4$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$_storage();
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t11 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t12 = t2[12];
    if (3 >= t6)
      throw $.ioore(3);
    t5 = t5[3];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5;
    t5 = t2[0];
    t12 = arg.get$_storage();
    t11 = t12.length;
    if (4 >= t11)
      throw $.ioore(4);
    t10 = t12[4];
    t9 = t2[4];
    if (5 >= t11)
      throw $.ioore(5);
    t8 = t12[5];
    t7 = t2[8];
    if (6 >= t11)
      throw $.ioore(6);
    t4 = t12[6];
    t13 = t2[12];
    if (7 >= t11)
      throw $.ioore(7);
    t12 = t12[7];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[0];
    t13 = arg.get$_storage();
    t4 = t13.length;
    if (8 >= t4)
      throw $.ioore(8);
    t7 = t13[8];
    t8 = t2[4];
    if (9 >= t4)
      throw $.ioore(9);
    t9 = t13[9];
    t10 = t2[8];
    if (10 >= t4)
      throw $.ioore(10);
    t5 = t13[10];
    t11 = t2[12];
    if (11 >= t4)
      throw $.ioore(11);
    t13 = t13[11];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t12 * t7 + t8 * t9 + t10 * t5 + t11 * t13;
    t13 = t2[0];
    t11 = arg.get$_storage();
    t5 = t11.length;
    if (12 >= t5)
      throw $.ioore(12);
    t10 = t11[12];
    t9 = t2[4];
    if (13 >= t5)
      throw $.ioore(13);
    t8 = t11[13];
    t7 = t2[8];
    if (14 >= t5)
      throw $.ioore(14);
    t12 = t11[14];
    t4 = t2[12];
    if (15 >= t5)
      throw $.ioore(15);
    t11 = t11[15];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t11;
    t11 = t2[1];
    t4 = arg.get$_storage();
    t12 = t4.length;
    if (0 >= t12)
      throw $.ioore(0);
    t7 = t4[0];
    t8 = t2[5];
    if (1 >= t12)
      throw $.ioore(1);
    t9 = t4[1];
    t10 = t2[9];
    if (2 >= t12)
      throw $.ioore(2);
    t13 = t4[2];
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    if (3 >= t12)
      throw $.ioore(3);
    t1[1] = t11 * t7 + t8 * t9 + t10 * t13 + t5 * t4[3];
    t4 = t2[1];
    t5 = arg.get$_storage();
    t13 = t5.length;
    if (4 >= t13)
      throw $.ioore(4);
    t10 = t5[4];
    t9 = t2[5];
    if (5 >= t13)
      throw $.ioore(5);
    t8 = t5[5];
    t7 = t2[9];
    if (6 >= t13)
      throw $.ioore(6);
    t11 = t5[6];
    t12 = t2[13];
    if (7 >= t13)
      throw $.ioore(7);
    t1[5] = t4 * t10 + t9 * t8 + t7 * t11 + t12 * t5[7];
    t5 = t2[1];
    t12 = arg.get$_storage();
    t11 = t12.length;
    if (8 >= t11)
      throw $.ioore(8);
    t7 = t12[8];
    t8 = t2[5];
    if (9 >= t11)
      throw $.ioore(9);
    t9 = t12[9];
    t10 = t2[9];
    if (10 >= t11)
      throw $.ioore(10);
    t4 = t12[10];
    t13 = t2[13];
    if (11 >= t11)
      throw $.ioore(11);
    t1[9] = t5 * t7 + t8 * t9 + t10 * t4 + t13 * t12[11];
    t12 = t2[1];
    t13 = arg.get$_storage();
    t4 = t13.length;
    if (12 >= t4)
      throw $.ioore(12);
    t10 = t13[12];
    t9 = t2[5];
    if (13 >= t4)
      throw $.ioore(13);
    t8 = t13[13];
    t7 = t2[9];
    if (14 >= t4)
      throw $.ioore(14);
    t5 = t13[14];
    t11 = t2[13];
    if (15 >= t4)
      throw $.ioore(15);
    t13 = t13[15];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t12 * t10 + t9 * t8 + t7 * t5 + t11 * t13;
    t13 = t2[2];
    t11 = arg.get$_storage();
    t5 = t11.length;
    if (0 >= t5)
      throw $.ioore(0);
    t7 = t11[0];
    t8 = t2[6];
    if (1 >= t5)
      throw $.ioore(1);
    t9 = t11[1];
    t10 = t2[10];
    if (2 >= t5)
      throw $.ioore(2);
    t12 = t11[2];
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    if (3 >= t5)
      throw $.ioore(3);
    t1[2] = t13 * t7 + t8 * t9 + t10 * t12 + t4 * t11[3];
    t11 = t2[2];
    t4 = arg.get$_storage();
    t12 = t4.length;
    if (4 >= t12)
      throw $.ioore(4);
    t10 = t4[4];
    t9 = t2[6];
    if (5 >= t12)
      throw $.ioore(5);
    t8 = t4[5];
    t7 = t2[10];
    if (6 >= t12)
      throw $.ioore(6);
    t13 = t4[6];
    t5 = t2[14];
    if (7 >= t12)
      throw $.ioore(7);
    t1[6] = t11 * t10 + t9 * t8 + t7 * t13 + t5 * t4[7];
    t4 = t2[2];
    t5 = arg.get$_storage();
    t13 = t5.length;
    if (8 >= t13)
      throw $.ioore(8);
    t7 = t5[8];
    t8 = t2[6];
    if (9 >= t13)
      throw $.ioore(9);
    t9 = t5[9];
    t10 = t2[10];
    if (10 >= t13)
      throw $.ioore(10);
    t11 = t5[10];
    t12 = t2[14];
    if (11 >= t13)
      throw $.ioore(11);
    t1[10] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5[11];
    t5 = t2[2];
    t12 = arg.get$_storage();
    t11 = t12.length;
    if (12 >= t11)
      throw $.ioore(12);
    t10 = t12[12];
    t9 = t2[6];
    if (13 >= t11)
      throw $.ioore(13);
    t8 = t12[13];
    t7 = t2[10];
    if (14 >= t11)
      throw $.ioore(14);
    t4 = t12[14];
    t13 = t2[14];
    if (15 >= t11)
      throw $.ioore(15);
    t12 = t12[15];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[3];
    t13 = arg.get$_storage();
    t4 = t13.length;
    if (0 >= t4)
      throw $.ioore(0);
    t7 = t13[0];
    t8 = t2[7];
    if (1 >= t4)
      throw $.ioore(1);
    t9 = t13[1];
    t10 = t2[11];
    if (2 >= t4)
      throw $.ioore(2);
    t5 = t13[2];
    if (15 >= t3)
      throw $.ioore(15);
    t3 = t2[15];
    if (3 >= t4)
      throw $.ioore(3);
    t1[3] = t12 * t7 + t8 * t9 + t10 * t5 + t3 * t13[3];
    t13 = t2[3];
    t3 = arg.get$_storage();
    t5 = t3.length;
    if (4 >= t5)
      throw $.ioore(4);
    t10 = t3[4];
    t9 = t2[7];
    if (5 >= t5)
      throw $.ioore(5);
    t8 = t3[5];
    t7 = t2[11];
    if (6 >= t5)
      throw $.ioore(6);
    t12 = t3[6];
    t4 = t2[15];
    if (7 >= t5)
      throw $.ioore(7);
    t1[7] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t3[7];
    t3 = t2[3];
    t4 = arg.get$_storage();
    t12 = t4.length;
    if (8 >= t12)
      throw $.ioore(8);
    t7 = t4[8];
    t8 = t2[7];
    if (9 >= t12)
      throw $.ioore(9);
    t9 = t4[9];
    t10 = t2[11];
    if (10 >= t12)
      throw $.ioore(10);
    t13 = t4[10];
    t5 = t2[15];
    if (11 >= t12)
      throw $.ioore(11);
    t1[11] = t3 * t7 + t8 * t9 + t10 * t13 + t5 * t4[11];
    t4 = t2[3];
    t5 = arg.get$_storage();
    t13 = t5.length;
    if (12 >= t13)
      throw $.ioore(12);
    t10 = t5[12];
    t9 = t2[7];
    if (13 >= t13)
      throw $.ioore(13);
    t8 = t5[13];
    t7 = t2[11];
    if (14 >= t13)
      throw $.ioore(14);
    t3 = t5[14];
    t2 = t2[15];
    if (15 >= t13)
      throw $.ioore(15);
    t5 = t5[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t4 * t10 + t9 * t8 + t7 * t3 + t2 * t5;
    return r;
  },
  _mul_vector$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    r = $.vec4$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = t2.length;
    if (3 >= t3)
      throw $.ioore(3);
    t4 = t2[3];
    t5 = arg._storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (7 >= t3)
      throw $.ioore(7);
    t8 = t2[7];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (11 >= t3)
      throw $.ioore(11);
    t10 = t2[11];
    if (2 >= t6)
      throw $.ioore(2);
    t11 = t5[2];
    if (15 >= t3)
      throw $.ioore(15);
    t3 = t2[15];
    if (3 >= t6)
      throw $.ioore(3);
    t6 = t5[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t4 * t7 + t8 * t9 + t10 * t11 + t3 * t6;
    t1[2] = t2[2] * t5[0] + t2[6] * t5[1] + t2[10] * t5[2] + t2[14] * t5[3];
    t1[1] = t2[1] * t5[0] + t2[5] * t5[1] + t2[9] * t5[2] + t2[13] * t5[3];
    t1[0] = t2[0] * t5[0] + t2[4] * t5[1] + t2[8] * t5[2] + t2[12] * t5[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    r = $.vec3$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg._storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t6 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t11 = t2[12];
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t6 + t11;
    t11 = t2[1];
    t6 = t5[0];
    t10 = t2[5];
    t9 = t5[1];
    t8 = t2[9];
    t7 = t5[2];
    if (13 >= t3)
      throw $.ioore(13);
    t4 = t2[13];
    if (1 >= t12)
      throw $.ioore(1);
    t1[1] = t11 * t6 + t10 * t9 + t8 * t7 + t4;
    t4 = t2[2];
    t7 = t5[0];
    t8 = t2[6];
    t9 = t5[1];
    t10 = t2[10];
    t5 = t5[2];
    if (14 >= t3)
      throw $.ioore(14);
    t2 = t2[14];
    if (2 >= t12)
      throw $.ioore(2);
    t1[2] = t4 * t7 + t8 * t9 + t10 * t5 + t2;
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw $.wrapException($.ArgumentError$(arg));
  },
  $add: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = $.mat4$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$_storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 + t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$_storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 + t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$_storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 + t5;
    if (3 >= t3)
      throw $.ioore(3);
    t5 = t2[3];
    t4 = arg.get$_storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t4 = t4[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t5 + t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    t5 = arg.get$_storage();
    if (4 >= t5.length)
      throw $.ioore(4);
    t5 = t5[4];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t4 + t5;
    if (5 >= t3)
      throw $.ioore(5);
    t5 = t2[5];
    t4 = arg.get$_storage();
    if (5 >= t4.length)
      throw $.ioore(5);
    t4 = t4[5];
    if (5 >= t6)
      throw $.ioore(5);
    t1[5] = t5 + t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    t5 = arg.get$_storage();
    if (6 >= t5.length)
      throw $.ioore(6);
    t5 = t5[6];
    if (6 >= t6)
      throw $.ioore(6);
    t1[6] = t4 + t5;
    if (7 >= t3)
      throw $.ioore(7);
    t5 = t2[7];
    t4 = arg.get$_storage();
    if (7 >= t4.length)
      throw $.ioore(7);
    t4 = t4[7];
    if (7 >= t6)
      throw $.ioore(7);
    t1[7] = t5 + t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    t5 = arg.get$_storage();
    if (8 >= t5.length)
      throw $.ioore(8);
    t5 = t5[8];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t4 + t5;
    if (9 >= t3)
      throw $.ioore(9);
    t5 = t2[9];
    t4 = arg.get$_storage();
    if (9 >= t4.length)
      throw $.ioore(9);
    t4 = t4[9];
    if (9 >= t6)
      throw $.ioore(9);
    t1[9] = t5 + t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    t5 = arg.get$_storage();
    if (10 >= t5.length)
      throw $.ioore(10);
    t5 = t5[10];
    if (10 >= t6)
      throw $.ioore(10);
    t1[10] = t4 + t5;
    if (11 >= t3)
      throw $.ioore(11);
    t5 = t2[11];
    t4 = arg.get$_storage();
    if (11 >= t4.length)
      throw $.ioore(11);
    t4 = t4[11];
    if (11 >= t6)
      throw $.ioore(11);
    t1[11] = t5 + t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    t5 = arg.get$_storage();
    if (12 >= t5.length)
      throw $.ioore(12);
    t5 = t5[12];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t4 + t5;
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    t4 = arg.get$_storage();
    if (13 >= t4.length)
      throw $.ioore(13);
    t4 = t4[13];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t5 + t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    t5 = arg.get$_storage();
    if (14 >= t5.length)
      throw $.ioore(14);
    t5 = t5[14];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t4 + t5;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    t3 = arg.get$_storage();
    if (15 >= t3.length)
      throw $.ioore(15);
    t3 = t3[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t2 + t3;
    return r;
  },
  $sub: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = $.mat4$zero();
    t1 = r._storage;
    t2 = this._storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$_storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 - t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$_storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 - t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$_storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 - t5;
    if (3 >= t3)
      throw $.ioore(3);
    t5 = t2[3];
    t4 = arg.get$_storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t4 = t4[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t5 - t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    t5 = arg.get$_storage();
    if (4 >= t5.length)
      throw $.ioore(4);
    t5 = t5[4];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t4 - t5;
    if (5 >= t3)
      throw $.ioore(5);
    t5 = t2[5];
    t4 = arg.get$_storage();
    if (5 >= t4.length)
      throw $.ioore(5);
    t4 = t4[5];
    if (5 >= t6)
      throw $.ioore(5);
    t1[5] = t5 - t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    t5 = arg.get$_storage();
    if (6 >= t5.length)
      throw $.ioore(6);
    t5 = t5[6];
    if (6 >= t6)
      throw $.ioore(6);
    t1[6] = t4 - t5;
    if (7 >= t3)
      throw $.ioore(7);
    t5 = t2[7];
    t4 = arg.get$_storage();
    if (7 >= t4.length)
      throw $.ioore(7);
    t4 = t4[7];
    if (7 >= t6)
      throw $.ioore(7);
    t1[7] = t5 - t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    t5 = arg.get$_storage();
    if (8 >= t5.length)
      throw $.ioore(8);
    t5 = t5[8];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t4 - t5;
    if (9 >= t3)
      throw $.ioore(9);
    t5 = t2[9];
    t4 = arg.get$_storage();
    if (9 >= t4.length)
      throw $.ioore(9);
    t4 = t4[9];
    if (9 >= t6)
      throw $.ioore(9);
    t1[9] = t5 - t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    t5 = arg.get$_storage();
    if (10 >= t5.length)
      throw $.ioore(10);
    t5 = t5[10];
    if (10 >= t6)
      throw $.ioore(10);
    t1[10] = t4 - t5;
    if (11 >= t3)
      throw $.ioore(11);
    t5 = t2[11];
    t4 = arg.get$_storage();
    if (11 >= t4.length)
      throw $.ioore(11);
    t4 = t4[11];
    if (11 >= t6)
      throw $.ioore(11);
    t1[11] = t5 - t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    t5 = arg.get$_storage();
    if (12 >= t5.length)
      throw $.ioore(12);
    t5 = t5[12];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t4 - t5;
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    t4 = arg.get$_storage();
    if (13 >= t4.length)
      throw $.ioore(13);
    t4 = t4[13];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t5 - t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    t5 = arg.get$_storage();
    if (14 >= t5.length)
      throw $.ioore(14);
    t5 = t5[14];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t4 - t5;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    t3 = arg.get$_storage();
    if (15 >= t3.length)
      throw $.ioore(15);
    t3 = t3[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t2 - t3;
    return r;
  },
  rotateX$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    cosAngle = $.cos(angle, null);
    sinAngle = $.sin(angle, null);
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0] * 0;
    if (4 >= t2)
      throw $.ioore(4);
    t4 = t1[4];
    if (typeof cosAngle !== "number")
      throw $.iae(cosAngle);
    if (8 >= t2)
      throw $.ioore(8);
    t5 = t1[8];
    if (typeof sinAngle !== "number")
      throw $.iae(sinAngle);
    if (12 >= t2)
      throw $.ioore(12);
    t6 = t1[12] * 0;
    t7 = t1[1] * 0;
    t8 = t1[5];
    t9 = t1[9];
    if (13 >= t2)
      throw $.ioore(13);
    t10 = t1[13] * 0;
    t11 = t1[2] * 0;
    t12 = t1[6];
    t13 = t1[10];
    if (14 >= t2)
      throw $.ioore(14);
    t14 = t1[14] * 0;
    t15 = t1[3] * 0;
    t16 = t1[7];
    t17 = t1[11];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15] * 0;
    t18 = -sinAngle;
    t1[4] = t3 + t4 * cosAngle + t5 * sinAngle + t6;
    t1[5] = t7 + t8 * cosAngle + t9 * sinAngle + t10;
    t1[6] = t11 + t12 * cosAngle + t13 * sinAngle + t14;
    t1[7] = t15 + t16 * cosAngle + t17 * sinAngle + t2;
    t1[8] = t3 + t4 * t18 + t5 * cosAngle + t6;
    t1[9] = t7 + t8 * t18 + t9 * cosAngle + t10;
    t1[10] = t11 + t12 * t18 + t13 * cosAngle + t14;
    t1[11] = t15 + t16 * t18 + t17 * cosAngle + t2;
    return this;
  },
  rotateY$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    cosAngle = $.cos(angle, null);
    sinAngle = $.sin(angle, null);
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof cosAngle !== "number")
      throw $.iae(cosAngle);
    if (4 >= t2)
      throw $.ioore(4);
    t4 = t1[4] * 0;
    if (8 >= t2)
      throw $.ioore(8);
    t5 = t1[8];
    if (typeof sinAngle !== "number")
      throw $.iae(sinAngle);
    if (12 >= t2)
      throw $.ioore(12);
    t6 = t1[12] * 0;
    t7 = t1[1];
    t8 = t1[5] * 0;
    t9 = t1[9];
    if (13 >= t2)
      throw $.ioore(13);
    t10 = t1[13] * 0;
    t11 = t1[2];
    t12 = t1[6] * 0;
    t13 = t1[10];
    if (14 >= t2)
      throw $.ioore(14);
    t14 = t1[14] * 0;
    t15 = t1[3];
    t16 = t1[7] * 0;
    t17 = t1[11];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15] * 0;
    t18 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 + t5 * sinAngle + t6;
    t1[1] = t7 * cosAngle + t8 + t9 * sinAngle + t10;
    t1[2] = t11 * cosAngle + t12 + t13 * sinAngle + t14;
    t1[3] = t15 * cosAngle + t16 + t17 * sinAngle + t2;
    t1[8] = t3 * t18 + t4 + t5 * cosAngle + t6;
    t1[9] = t7 * t18 + t8 + t9 * cosAngle + t10;
    t1[10] = t11 * t18 + t12 + t13 * cosAngle + t14;
    t1[11] = t15 * t18 + t16 + t17 * cosAngle + t2;
    return this;
  },
  rotateZ$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    cosAngle = $.cos(angle, null);
    sinAngle = $.sin(angle, null);
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof cosAngle !== "number")
      throw $.iae(cosAngle);
    if (4 >= t2)
      throw $.ioore(4);
    t4 = t1[4];
    if (typeof sinAngle !== "number")
      throw $.iae(sinAngle);
    if (8 >= t2)
      throw $.ioore(8);
    t5 = t1[8] * 0;
    if (12 >= t2)
      throw $.ioore(12);
    t6 = t1[12] * 0;
    t7 = t1[1];
    t8 = t1[5];
    t9 = t1[9] * 0;
    if (13 >= t2)
      throw $.ioore(13);
    t10 = t1[13] * 0;
    t11 = t1[2];
    t12 = t1[6];
    t13 = t1[10] * 0;
    if (14 >= t2)
      throw $.ioore(14);
    t14 = t1[14] * 0;
    t15 = t1[3];
    t16 = t1[7];
    t17 = t1[11] * 0;
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15] * 0;
    t18 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 * sinAngle + t5 + t6;
    t1[1] = t7 * cosAngle + t8 * sinAngle + t9 + t10;
    t1[2] = t11 * cosAngle + t12 * sinAngle + t13 + t14;
    t1[3] = t15 * cosAngle + t16 * sinAngle + t17 + t2;
    t1[4] = t3 * t18 + t4 * cosAngle + t5 + t6;
    t1[5] = t7 * t18 + t8 * cosAngle + t9 + t10;
    t1[6] = t11 * t18 + t12 * cosAngle + t13 + t14;
    t1[7] = t15 * t18 + t16 * cosAngle + t17 + t2;
    return this;
  },
  scale$3: function(_, x, y, z) {
    var t1, sw, sx, sy, sz, t2, t3;
    t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec4;
    sw = t1 ? x.get$w() : 1;
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec3 || t1) {
      t1 = $.getInterceptor$x(x);
      sx = t1.get$x(x);
      sy = t1.get$y(x);
      sz = t1.get$z(x);
    } else {
      sy = y == null ? x : $.toDouble$0$n(y);
      sz = z == null ? x : $.toDouble$0$n(z);
      sx = x;
    }
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof sx !== "number")
      throw $.iae(sx);
    t1[0] = t3 * sx;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * sx;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * sx;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t1[3] * sx;
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    if (typeof sy !== "number")
      throw $.iae(sy);
    t1[4] = t3 * sy;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = t1[5] * sy;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = t1[6] * sy;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = t1[7] * sy;
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    if (typeof sz !== "number")
      throw $.iae(sz);
    t1[8] = t3 * sz;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = t1[9] * sz;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = t1[10] * sz;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = t1[11] * sz;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = t1[12] * sw;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = t1[13] * sw;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = t1[14] * sw;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = t1[15] * sw;
    return this;
  },
  scale$1: function($receiver, x) {
    return this.scale$3($receiver, x, null, null);
  },
  get$scale: function(receiver) {
    return new $.Bound_scale_mat4(this, "scale$3", receiver);
  },
  $negate: function(_) {
    var r, t1;
    r = $.mat4$zero();
    t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    r.$indexSet(r, 0, -t1[0]);
    if (1 >= t1.length)
      throw $.ioore(1);
    r.$indexSet(r, 1, -t1[1]);
    if (2 >= t1.length)
      throw $.ioore(2);
    r.$indexSet(r, 2, -t1[2]);
    if (3 >= t1.length)
      throw $.ioore(3);
    r.$indexSet(r, 3, -t1[3]);
    return r;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 1;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 1;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 1;
    return this;
  },
  add$1: function(_, o) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = o.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = o.get$_storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t4 = t1[3];
    t3 = o.get$_storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t1[3] = t4 + t3[3];
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    t4 = o.get$_storage();
    if (4 >= t4.length)
      throw $.ioore(4);
    t1[4] = t3 + t4[4];
    if (5 >= t2)
      throw $.ioore(5);
    t4 = t1[5];
    t3 = o.get$_storage();
    if (5 >= t3.length)
      throw $.ioore(5);
    t1[5] = t4 + t3[5];
    if (6 >= t2)
      throw $.ioore(6);
    t3 = t1[6];
    t4 = o.get$_storage();
    if (6 >= t4.length)
      throw $.ioore(6);
    t1[6] = t3 + t4[6];
    if (7 >= t2)
      throw $.ioore(7);
    t4 = t1[7];
    t3 = o.get$_storage();
    if (7 >= t3.length)
      throw $.ioore(7);
    t1[7] = t4 + t3[7];
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    t4 = o.get$_storage();
    if (8 >= t4.length)
      throw $.ioore(8);
    t1[8] = t3 + t4[8];
    if (9 >= t2)
      throw $.ioore(9);
    t4 = t1[9];
    t3 = o.get$_storage();
    if (9 >= t3.length)
      throw $.ioore(9);
    t1[9] = t4 + t3[9];
    if (10 >= t2)
      throw $.ioore(10);
    t3 = t1[10];
    t4 = o.get$_storage();
    if (10 >= t4.length)
      throw $.ioore(10);
    t1[10] = t3 + t4[10];
    if (11 >= t2)
      throw $.ioore(11);
    t4 = t1[11];
    t3 = o.get$_storage();
    if (11 >= t3.length)
      throw $.ioore(11);
    t1[11] = t4 + t3[11];
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    t4 = o.get$_storage();
    if (12 >= t4.length)
      throw $.ioore(12);
    t1[12] = t3 + t4[12];
    if (13 >= t2)
      throw $.ioore(13);
    t4 = t1[13];
    t3 = o.get$_storage();
    if (13 >= t3.length)
      throw $.ioore(13);
    t1[13] = t4 + t3[13];
    if (14 >= t2)
      throw $.ioore(14);
    t3 = t1[14];
    t4 = o.get$_storage();
    if (14 >= t4.length)
      throw $.ioore(14);
    t1[14] = t3 + t4[14];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    t4 = o.get$_storage();
    if (15 >= t4.length)
      throw $.ioore(15);
    t1[15] = t2 + t4[15];
    return this;
  },
  sub$1: function(o) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = o.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = o.get$_storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 - t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t4 = t1[3];
    t3 = o.get$_storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t1[3] = t4 - t3[3];
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    t4 = o.get$_storage();
    if (4 >= t4.length)
      throw $.ioore(4);
    t1[4] = t3 - t4[4];
    if (5 >= t2)
      throw $.ioore(5);
    t4 = t1[5];
    t3 = o.get$_storage();
    if (5 >= t3.length)
      throw $.ioore(5);
    t1[5] = t4 - t3[5];
    if (6 >= t2)
      throw $.ioore(6);
    t3 = t1[6];
    t4 = o.get$_storage();
    if (6 >= t4.length)
      throw $.ioore(6);
    t1[6] = t3 - t4[6];
    if (7 >= t2)
      throw $.ioore(7);
    t4 = t1[7];
    t3 = o.get$_storage();
    if (7 >= t3.length)
      throw $.ioore(7);
    t1[7] = t4 - t3[7];
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    t4 = o.get$_storage();
    if (8 >= t4.length)
      throw $.ioore(8);
    t1[8] = t3 - t4[8];
    if (9 >= t2)
      throw $.ioore(9);
    t4 = t1[9];
    t3 = o.get$_storage();
    if (9 >= t3.length)
      throw $.ioore(9);
    t1[9] = t4 - t3[9];
    if (10 >= t2)
      throw $.ioore(10);
    t3 = t1[10];
    t4 = o.get$_storage();
    if (10 >= t4.length)
      throw $.ioore(10);
    t1[10] = t3 - t4[10];
    if (11 >= t2)
      throw $.ioore(11);
    t4 = t1[11];
    t3 = o.get$_storage();
    if (11 >= t3.length)
      throw $.ioore(11);
    t1[11] = t4 - t3[11];
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    t4 = o.get$_storage();
    if (12 >= t4.length)
      throw $.ioore(12);
    t1[12] = t3 - t4[12];
    if (13 >= t2)
      throw $.ioore(13);
    t4 = t1[13];
    t3 = o.get$_storage();
    if (13 >= t3.length)
      throw $.ioore(13);
    t1[13] = t4 - t3[13];
    if (14 >= t2)
      throw $.ioore(14);
    t3 = t1[14];
    t4 = o.get$_storage();
    if (14 >= t4.length)
      throw $.ioore(14);
    t1[14] = t3 - t4[14];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    t4 = o.get$_storage();
    if (15 >= t4.length)
      throw $.ioore(15);
    t1[15] = t2 - t4[15];
    return this;
  },
  rotate3$1: function(arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (4 >= t2)
      throw $.ioore(4);
    t7 = t1[4];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (8 >= t2)
      throw $.ioore(8);
    t9 = t1[8];
    if (2 >= t5)
      throw $.ioore(2);
    t4 = t4[2];
    t5 = t1[1];
    t10 = t1[5];
    if (9 >= t2)
      throw $.ioore(9);
    t11 = t1[9];
    t12 = t1[2];
    t13 = t1[6];
    if (10 >= t2)
      throw $.ioore(10);
    t1 = t1[10];
    t2 = $.getInterceptor$x(arg);
    t2.set$x(arg, t3 * t6 + t7 * t8 + t9 * t4);
    t2.set$y(arg, t5 * t6 + t10 * t8 + t11 * t4);
    t2.set$z(arg, t12 * t6 + t13 * t8 + t1 * t4);
    return arg;
  },
  get$right: function(_) {
    var t1, t2, x, y;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    x = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    y = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(x, y, t1[2]);
  },
  mat4$identity$0: function() {
    this.setIdentity$0();
  },
  mat4$copy$1: function(other) {
    this.setFrom$1(other);
  }
};

$$.vec2 = {"": "Object;_storage<",
  setValues$2: function(x_, y_) {
    var t1, t2;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this._storage;
    t2 = other.get$_storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = other.get$_storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    return t2 + $.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    return $.vec2$(-t3, -t1[1]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    return $.vec2$(t3 - t6, t1 - t4[1]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    return $.vec2$(t3 + t6, t1 + t4[1]);
  },
  $div: function(_, scale) {
    var o, t1, t2, t3;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    return $.vec2$(t3 * o, t1[1] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    return $.vec2$(t3 * scale, t1[1] * scale);
  },
  $index: function(_, i) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    return $.sqrt(t3 * t3 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    return t3 * t3 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t4 = arg.get$_storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t4 = arg.get$_storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t1[1] = t2 - t4[1];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[1] = t2 * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  get$scale: function(receiver) {
    return new $.BoundClosure$i1(this, "scale$1", receiver);
  },
  clone$0: function(_) {
    return $.vec2$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  vec2$copy$1: function(other) {
    this.setFrom$1(other);
  },
  vec2$2: function(x_, y_) {
    this.setValues$2(x_, y_);
  },
  $isvec2: true
};

$$.vec3 = {"": "Object;_storage<",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = other.get$_storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = other.get$_storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = other.get$_storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t2 = t2[2];
    if (2 >= t3)
      throw $.ioore(2);
    t1[2] = t2;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    return t2 + $.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(-t3, -t4, -t1[2]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.vec3$(t3 - t6, t7 - t8, t1 - t4[2]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.vec3$(t3 + t6, t7 + t8, t1 + t4[2]);
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(t3 * o, t4 * o, t1[2] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(t3 * scale, t4 * scale, t1[2] * scale);
  },
  $index: function(_, i) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return $.sqrt(t3 * t3 + t4 * t4 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return t3 * t3 + t4 * t4 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = t1[2];
    t3 = arg.get$_storage();
    if (2 >= t3.length)
      throw $.ioore(2);
    t1[2] = t2 + t3[2];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = t1[2];
    t3 = arg.get$_storage();
    if (2 >= t3.length)
      throw $.ioore(2);
    t1[2] = t2 - t3[2];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t1[2];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[2] = t2 * arg;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  get$scale: function(receiver) {
    return new $.BoundClosure$i1(this, "scale$1", receiver);
  },
  clone$0: function(_) {
    return $.vec3$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = arg;
    return arg;
  },
  get$b: function() {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  get$x: function(_) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  vec3$copy$1: function(other) {
    this.setFrom$1(other);
  },
  vec3$3: function(x_, y_, z_) {
    this.setValues$3(x_, y_, z_);
  },
  $isvec3: true
};

$$.vec4 = {"": "Object;_storage<",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this._storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this._storage;
    t2 = other.get$_storage();
    if (3 >= t2.length)
      throw $.ioore(3);
    t2 = t2[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t2;
    t2 = other.get$_storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t1[2] = t2[2];
    t2 = other.get$_storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[1] = t2[1];
    t2 = other.get$_storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t2 + $.S(t1[2]) + ",";
    if (3 >= t1.length)
      throw $.ioore(3);
    return t2 + $.S(t1[3]);
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.vec4$(-t3, -t4, -t5, -t1[3]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    return $.vec4$(t3 - t6, t7 - t8, t9 - t10, t1 - t4[3]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$_storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    return $.vec4$(t3 + t6, t7 + t8, t9 + t10, t1 + t4[3]);
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.vec4$(t3 * o, t4 * o, t5 * o, t1[3] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.vec4$(t3 * scale, t4 * scale, t5 * scale, t1[3] * scale);
  },
  $index: function(_, i) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    return $.sqrt(t3 * t3 + t4 * t4 + t5 * t5 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3, t4, t5;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    return t3 * t3 + t4 * t4 + t5 * t5 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = arg.get$_storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    t4 = arg.get$_storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t1[3] = t2 + t4[3];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$_storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$_storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = arg.get$_storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 - t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    t4 = arg.get$_storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t1[3] = t2 - t4[3];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this._storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[0] = t3 * arg;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * arg;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * arg;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t1[3] * arg;
    return this;
  },
  get$scale: function(receiver) {
    return new $.BoundClosure$i1(this, "scale$1", receiver);
  },
  clone$0: function(_) {
    return $.vec4$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = arg;
    return arg;
  },
  get$b: function() {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  get$a: function() {
    var t1 = this._storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    return t1[3];
  },
  get$x: function(_) {
    var t1 = this._storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this._storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this._storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  get$w: function() {
    var t1 = this._storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    return t1[3];
  },
  vec4$copy$1: function(other) {
    this.setFrom$1(other);
  },
  vec4$4: function(x_, y_, z_, w_) {
    this.setValues$4(x_, y_, z_, w_);
  },
  $isvec4: true
};

$$.ChangeNotification = {"": "Object;oldValue>,newValue>,changes<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeNotification) {
      other;
      t1 = $.$eq(this.oldValue, other.oldValue) === true && $.$eq(this.newValue, other.newValue) === true && $.$eq(this.changes, other.changes) === true;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash3(this.oldValue, this.newValue, this.changes);
  },
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + $.S(this.newValue) + ": " + $.S(t1) + ">";
    return "#<ChangeNotification from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeNotification: true
};

$$.ChangeRecord = {"": "Object;type>,key>,oldValue>,newValue>",
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeRecord) {
      other;
      if (this.type === other.type)
        if (this.key === other.key) {
          t1 = this.oldValue;
          t2 = other.oldValue;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this.newValue;
            t2 = other.newValue;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash4(this.type, this.key, this.oldValue, this.newValue);
  },
  toString$0: function(_) {
    var typeStr = null;
    switch (this.type) {
      case 1:
        typeStr = "field";
        break;
      case 2:
        typeStr = "index";
        break;
      case 6:
        typeStr = "insert";
        break;
      case 10:
        typeStr = "remove";
        break;
    }
    return "#<ChangeRecord " + $.S(typeStr) + " " + this.key + " from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeRecord: true
};

$$.observe_closure = {"": "Closure;callback_0,obs_1",
  call$1: function(changes) {
    var t1 = this.obs_1;
    this.callback_0.call$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
};

$$.Observable = {"": "Object;$$_observers@,$$_changes@,hashCode>", $isObservable: true};

$$.deliverChangesSync_closure = {"": "Closure;",
  call$2: function(id, obs) {
    obs._deliver$0();
  },
  $isFunction: true
};

$$._ExpressionObserver = {"": "Object;_id<,_expression,_callback,_debugName,_reads,_unobservers,_scheduled@,_liblib2$_value",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._debugName;
    t2 = this._id;
    return t1 != null ? "<observer " + $.S(t2) + ": " + $.S(t1) + ">" : "<observer " + $.S(t2) + ">";
  },
  _observe$0: function() {
    var e, trace, $parent, t1, exception;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib2$_value = this._expression$0();
      t1 = this._liblib2$_value;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable) && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isList) && (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isObservable))
        this._liblib2$_value = $.toList$0$ax($.listSuperNativeTypeCast(t1, "$isIterable"));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + $.S(this));
      this._liblib2$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    if (t1._liblib1$_length > 0) {
      t1._keys = null;
      t1._rest = null;
      t1._nums = null;
      t1._strings = null;
      t1._liblib1$_length = 0;
    }
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._callback$1(change);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._callback, "from " + $.S(this));
    }

  },
  _observeValue$0: function() {
    var value, t1, node;
    value = this._liblib2$_value;
    if (typeof value !== "object" || value === null || !$.getInterceptor(value).$isObservable)
      return;
    else
      value;
    if (value.$$_observers == null)
      value.$$_observers = $.LinkedList$(null);
    t1 = value.$$_observers;
    node = t1.add$1(t1, new $._ExpressionObserver__observeValue_closure(this, value));
    this._unobservers.push(node.get$remove(node));
  },
  _addRead$3: function(target, type, key) {
    var reads, mask, e, trace, exception, t1;
    reads = this._reads.putIfAbsent$2(target, new $._ExpressionObserver__addRead_closure());
    try {
      mask = $.$index$asx(reads, key);
      if (mask == null)
        mask = 0;
      $.$indexSet$ax(reads, key, $.$or$n(mask, type));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, key, "hashCode or operator == from " + $.S(this));
    }

  },
  _watchForChange$2: function(target, reads) {
    var t1, node;
    if (target.get$$$_observers() == null)
      target.set$$$_observers($.LinkedList$(null));
    t1 = target.get$$$_observers();
    node = t1.add$1(t1, new $._ExpressionObserver__watchForChange_closure(this, reads));
    this._unobservers.push(node.get$remove(node));
  },
  get$_watchForChange: function() {
    return new $.BoundClosure$2(this, "_watchForChange$2");
  },
  _unobserve$0: function() {
    for (var t1 = $.JSArray_methods.get$iterator(this._unobservers); t1.moveNext$0();)
      t1.get$current().call$0();
    this._scheduled = false;
  },
  get$_unobserve: function() {
    return new $.BoundClosure$0(this, "_unobserve$0");
  },
  _deliver$0: function() {
    var oldValue, e, trace, exception, t1, change;
    if (!this._scheduled)
      return;
    oldValue = this._liblib2$_value;
    this._unobserve$0();
    this._observe$0();
    try {
      if ($.$eq(oldValue, this._liblib2$_value) === true)
        return;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, oldValue, "operator == from " + $.S(this));
      return;
    }

    change = $.ChangeNotification$(oldValue, this._liblib2$_value, null);
    this._runCallback$1(change);
    return change;
  }
};

$$._ExpressionObserver__observeValue_closure = {"": "Closure;this_0,value_1",
  call$1: function(changes) {
    var t1 = this.value_1;
    this.this_0._runCallback$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
};

$$._ExpressionObserver__addRead_closure = {"": "Closure;",
  call$0: function() {
    return $.HashMap$(null, null);
  },
  $isFunction: true
};

$$._ExpressionObserver__watchForChange_closure = {"": "Closure;this_0,reads_1",
  call$1: function(changes) {
    var t1, t2, t3, change, t4, t5, mask;
    t1 = this.this_0;
    if (t1.get$_scheduled())
      return;
    t2 = $.get$iterator$ax(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.getInterceptor(t3).$isJavaScriptIndexingBehavior))
      return this.call$1$bailout(1, t2, t1, t3);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t4 = $.getInterceptor$x(change);
      t5 = t4.get$key(change);
      if (t5 >>> 0 !== t5 || t5 >= t3.length)
        throw $.ioore(t5);
      mask = t3[t5];
      if (mask != null && $.$and$n(mask, t4.get$type(change)) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1.get$_id(), t1);
        return;
      }
    }
  },
  call$1$bailout: function(state0, t2, t1, t3) {
    var t4, change, t5, mask;
    t4 = $.getInterceptor$asx(t3);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t5 = $.getInterceptor$x(change);
      mask = t4.$index(t3, t5.get$key(change));
      if (mask != null && $.$and$n(mask, t5.get$type(change)) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1.get$_id(), t1);
        return;
      }
    }
  },
  $isFunction: true
};

$$.closure6 = {"": "Closure;",
  call$1: function(message) {
    $.Primitives_printString($.toString$0(message));
    return;
  },
  $isFunction: true
};

$$._ObservableAnnotation = {"": "Object;"};

$$.LinkedListNode = {"": "Object;_previous?,_next?,_list<,_liblib0$_value",
  get$next: function() {
    return this._next;
  },
  get$value: function(_) {
    return this._liblib0$_value;
  },
  set$value: function(_, e) {
    this._liblib0$_value = e;
    return e;
  },
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    if (p != null)
      p.set$_next(this);
    if (n != null)
      n.set$_previous(this);
    return this;
  },
  remove$0: function(_) {
    var t1, t2;
    t1 = this._list;
    if (t1 == null)
      return;
    t1._liblib0$_length = t1._liblib0$_length - 1;
    t1 = this._previous;
    t2 = this._next;
    if (t1 != null)
      t1.set$_next(t2);
    else
      this._list._head = t2;
    t1 = this._next;
    t2 = this._previous;
    if (t1 != null)
      t1.set$_previous(t2);
    else
      this._list._tail = t2;
    this._next = null;
    this._previous = null;
    this._list = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  LinkedListNode$_$2: function(value, _list, E) {
    var t1 = this._list;
    if (t1 != null)
      t1._liblib0$_length = t1._liblib0$_length + 1;
  },
  $isLinkedListNode: true
};

$$.LinkedList = {"": "IterableBase;_head,_tail,_liblib0$_length",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$head: function(_) {
    return this._head;
  },
  add$1: function(_, e) {
    var node, t1;
    node = $.LinkedListNode$_(e, this, $.getRuntimeTypeArgument(this, this.$asLinkedList, 0));
    t1 = this._tail;
    if (t1 == null) {
      this._tail = node;
      this._head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._tail = t1;
    return t1;
  },
  get$add: function(receiver) {
    return new $.BoundClosure$i1(this, "add$1", receiver);
  },
  addAll$1: function(_, e) {
    return $.forEach$1$ax(e, this.get$add(this));
  },
  get$iterator: function(_) {
    return $.LinkedListIterator$(this, $.getRuntimeTypeArgument(this, this.$asLinkedList, 0));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedListIterator = {"": "Object;_copy,_list<,_liblib0$_current,_pos",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      t2 = this._copy;
      t3 = t2.length;
      if (t1 < t3) {
        if (t1 >>> 0 !== t1 || t1 >= t3)
          throw $.ioore(t1);
        t1 = $.$eq(t2[t1].get$_list(), this._list) !== true;
      } else
        t1 = false;
    } while (t1);
    t1 = this._pos;
    t2 = this._copy;
    t3 = t2.length;
    if (t1 < t3) {
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw $.ioore(t1);
      this._liblib0$_current = $.get$value$x(t2[t1]);
      return true;
    } else {
      this._liblib0$_current = null;
      return false;
    }
  },
  LinkedListIterator$1: function(_list, E) {
    var t1, node, i, i0;
    t1 = this._list;
    t1 = $.List_List(t1.get$length(t1), $.LinkedListNode);
    $.setRuntimeTypeInfo(t1, [$.LinkedListNode]);
    this._copy = t1;
    t1 = this._list;
    node = t1.get$head(t1);
    for (i = 0; node != null; i = i0) {
      t1 = this._copy;
      i0 = i + 1;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = node;
      node = node.get$next();
    }
  }
};

$$.setImmediate_closure = {"": "Closure;callback_0,port_1",
  call$2: function(msg, sendPort) {
    var t1 = this.port_1;
    t1._liblib4$_callback = null;
    $globalState.currentContext.unregister$1(t1._liblib4$_id);
    this.callback_0.call$0();
  },
  $isFunction: true
};

$$.updateCssClass_closure = {"": "Closure;",
  call$1: function(e) {
    return e != null && $.$eq(e, "") !== true;
  },
  $isFunction: true
};

$$.updateCssClass_closure0 = {"": "Closure;",
  call$1: function(e) {
    return e != null && $.$eq(e, "") !== true;
  },
  $isFunction: true
};

$$.bindCssClasses_closure = {"": "Closure;elem_0",
  call$1: function(e) {
    var t1, t2, change, t3, t4;
    t1 = e.get$changes();
    if (t1 != null)
      for (t1 = $.get$iterator$ax(t1), t2 = this.elem_0; t1.moveNext$0() === true;) {
        change = t1.get$current();
        t3 = $.getInterceptor$x(change);
        if (t3.get$oldValue(change) != null) {
          t4 = $.get$classes$x(t2);
          t4.remove$1(t4, t3.get$oldValue(change));
        }
        if (t3.get$newValue(change) != null) {
          t4 = $.get$classes$x(t2);
          t4.add$1(t4, t3.get$newValue(change));
        }
      }
    else {
      t1 = this.elem_0;
      t2 = $.getInterceptor$x(e);
      $.updateCssClass(t1, false, t2.get$oldValue(e));
      $.updateCssClass(t1, true, t2.get$newValue(e));
    }
  },
  $isFunction: true
};

$$.TemplateItem = {"": "Object;",
  create$0: function() {
  }
};

$$.Binding = {"": "TemplateItem;exp,action,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  action$1: function($receiver, arg0) {
    return this.action.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      this.action$1(this, $.ChangeNotification$(null, this.exp$0(), null));
    else if (this.stopper != null)
      throw $.wrapException($.StateError$("binding already attached"));
    else
      this.stopper = $.watchAndInvoke(this.exp, this.action, "generic-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
};

$$.ClassAttrBinding = {"": "TemplateItem;elem,exp,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      $.updateCssClass(this.elem, true, this.exp$0());
    else if (this.stopper != null)
      throw $.wrapException($.StateError$("class binding already attached"));
    else
      this.stopper = $.bindCssClasses(this.elem, this.exp);
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
};

$$.DomPropertyBinding = {"": "TemplateItem;setter,getter,isUrl<,isFinal,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  getter$0: function() {
    return this.getter.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    var t1;
    if (this.isFinal) {
      t1 = this.getter$0();
      this.setter$1(this.isUrl ? $.sanitizeUri(t1) : t1);
    } else if (this.stopper != null)
      throw $.wrapException($.StateError$("data binding already attached."));
    else
      this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_closure(this), "dom-property-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
};

$$.DomPropertyBinding_insert_closure = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    t2 = $.get$newValue$x(e);
    t1.setter$1(t1.get$isUrl() ? $.sanitizeUri(t2) : t2);
    return;
  },
  $isFunction: true
};

$$.Template = {"": "TemplateItem;node,children>,nodes>",
  contentBind$2: function(exp, isFinal) {
    var t1 = {};
    t1.bindNode_0 = document.createTextNode("");
    this.children.push($.Binding$(new $.Template_contentBind_closure(exp), new $.Template_contentBind_closure0(t1, exp), isFinal));
    return t1.bindNode_0;
  },
  bindClass$3: function(elem, exp, isFinal) {
    this.children.push($.ClassAttrBinding$(elem, exp, isFinal));
  },
  oneWayBind$4: function(exp, setter, isFinal, isUrl) {
    this.children.push($.DomPropertyBinding$(exp, setter, isUrl, isFinal));
  },
  add$1: function(_, n) {
    return this.nodes.push(n);
  },
  addAll$1: function(_, list) {
    return $.JSArray_methods.addAll$1(this.nodes, list);
  },
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].create$0();
    }
  },
  insert$0: function(_) {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.insert$0$ax(t1[i]);
    }
  },
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  }
};

$$.Template_contentBind_closure = {"": "Closure;exp_1",
  call$0: function() {
    return $.S(this.exp_1.call$0());
  },
  $isFunction: true
};

$$.Template_contentBind_closure0 = {"": "Closure;box_0,exp_2",
  call$1: function(e) {
    var t1 = this.box_0;
    t1.bindNode_0 = $.updateBinding(this.exp_2.call$0(), t1.bindNode_0, $.get$newValue$x(e));
  },
  $isFunction: true
};

$$.PlaceholderTemplate = {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function(_) {
    var t1, t2, t3, t4, $parent, reference, i;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    t2 = t1.length;
    if (t2 > 0) {
      t3 = this.node;
      t4 = $.getInterceptor$x(t3);
      $parent = t4.get$parentNode(t3);
      reference = t4.get$nextNode(t3);
      for (i = 0; i < t2; ++i) {
        if (i >= t1.length)
          throw $.ioore(i);
        $parent.insertBefore(t1[i], reference);
      }
    }
    $.Template.prototype.insert$0.call(this, this);
  },
  remove$0: function(_) {
    var t1, i;
    $.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  }
};

$$.LoopTemplate = {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$3: function(arg0, arg1, arg2) {
    return this.iterSetup.call$3(arg0, arg1, arg2);
  },
  insert$0: function(_) {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_closure(this), "loop-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  }
};

$$.LoopTemplate_insert_closure = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, list, i;
    t1 = this.this_0;
    $.PlaceholderTemplate.prototype.remove$0.call($.getInterceptor$ax(t1), t1);
    list = $.get$newValue$x(e);
    for (i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(list)); ++i)
      t1.iterSetup$3(list, i, t1);
    $.PlaceholderTemplate.prototype.insert$0.call($.getInterceptor$ax(t1), t1);
  },
  $isFunction: true
};

$$.watch_closure4 = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$.watch_closure = {"": "Closure;target_0",
  call$0: function() {
    return $.toList$0$ax(this.target_0.call$0());
  },
  $isFunction: true
};

$$.watch_closure0 = {"": "Closure;target_1",
  call$0: function() {
    return this.target_1;
  },
  $isFunction: true
};

$$.watch_closure1 = {"": "Closure;target_2",
  call$0: function() {
    var t1 = this.target_2;
    return t1.toList$0(t1);
  },
  $isFunction: true
};

$$.watch_closure2 = {"": "Closure;target_3",
  call$0: function() {
    return this.target_3;
  },
  $isFunction: true
};

$$.watch_closure3 = {"": "Closure;target_4",
  call$0: function() {
    return this.target_4;
  },
  $isFunction: true
};

$$._Watcher = {"": "Object;debugName,_getter,_liblib3$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  toString$0: function(_) {
    var t1 = this.debugName;
    return t1;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.Primitives_printString("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  },
  $is_Watcher: true
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib3$_callback,_lastValue",
  _update$1: function(currentValue) {
    this._lastValue = $.List_List$from(currentValue, true, $.getRuntimeTypeArgument(this, this.$as_ListWatcher, 0));
  },
  _ListWatcher$3: function(getter, callback, debugName, T) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._HashMapWatcher = {"": "_Watcher;debugName,_getter,_liblib3$_callback,_lastValue",
  _update$1: function(currentValue) {
    var t1 = $.HashMap$($.getRuntimeTypeArgument(this, this.$as_HashMapWatcher, 0), $.getRuntimeTypeArgument(this, this.$as_HashMapWatcher, 1));
    t1.addAll$1(t1, currentValue);
    this._lastValue = t1;
  },
  _HashMapWatcher$3: function(getter, callback, debugName, K, V) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._OrderDependantMapWatcher = {"": "_Watcher;debugName,_getter,_liblib3$_callback,_lastValue",
  _update$1: function(currentValue) {
    var t1 = $.LinkedHashMap$(null, null);
    t1.addAll$1(t1, currentValue);
    this._lastValue = t1;
  },
  _OrderDependantMapWatcher$3: function(getter, callback, debugName, K, V) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._WatcherType = {"": "Object;_liblib3$_value",
  toString$0: function(_) {
    return "Enum." + this._liblib3$_value;
  }
};

// Native classes
$$._WorkerStub = {"": "Interceptor;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null
};

$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;hash%,href%,type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "Element;hash=,href%"};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;href%"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height},width}",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  },
  get$context2d: function(receiver) {
    return this.get$context2D(receiver);
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;fillStyle},font},lineWidth},strokeStyle}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text, x, y, maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  scale$2: function(receiver, sx, sy) {
    return receiver.scale(sx, sy);
  },
  get$scale: function(receiver) {
    return new $.BoundClosure$i2(this, "scale$2", receiver);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  strokeRect$5: function(receiver, x, y, width, height, lineWidth) {
    return receiver.strokeRect(x, y, width, height, lineWidth);
  },
  strokeText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.strokeText(text, x, y, maxWidth);
  },
  strokeText$3: function($receiver, text, x, y) {
    return $receiver.strokeText(text, x, y);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  arc$5: function($receiver, x, y, radius, startAngle, endAngle) {
    return this.arc$6($receiver, x, y, radius, startAngle, endAngle, false);
  },
  set$lineDashOffset: function(receiver, value) {
    return typeof receiver.lineDashOffset != "undefined" ? receiver.lineDashOffset = value : receiver.webkitLineDashOffset = value;
  }
};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$color: function(receiver) {
    return this.getPropertyValue$1(receiver, "color");
  },
  set$color: function(receiver, value) {
    this.setProperty$3(receiver, "color", value, "");
  },
  set$font: function(receiver, value) {
    this.setProperty$3(receiver, "font", value, "");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  set$right: function(receiver, value) {
    this.setProperty$3(receiver, "right", value, "");
  },
  get$size: function(receiver) {
    return this.getPropertyValue$1(receiver, "size");
  }
};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver, null);
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), false, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML},tagName=",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  get$classes: function(receiver) {
    return $._ElementCssClassSet$(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;height},type=,width}"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;type="};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "Element;length="};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Object_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "Element;height},width}"};

$$.ImageElement = {"": "Element;height},width},x=,y="};

$$.InputElement = {"": "Element;height},size=,step=,type=,value%,width}",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  },
  $isElement: true,
  $asElement: null,
  $isNode: true,
  $asNode: null
};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.LIElement = {"": "Element;type=,value%"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;href%,type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.Location = {"": "Interceptor;hash%,href%",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  $asLocation: null
};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "Element;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;value%"};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;newValue="};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;nextNode:nextSibling=,parentNode=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeList = {"": "Object_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;type="};

$$.ObjectElement = {"": "Element;height},type=,width}"};

$$.OptGroupElement = {"": "Element;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OptionElement = {"": "Element;value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OutputElement = {"": "Element;type=,value%"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value%"};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;value%"};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "Element;type="};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length=,size=,type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
};

$$.SourceElement = {"": "Element;type="};

$$.SpanElement = {"": "Element;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;key=,newValue=,oldValue="};

$$.StyleElement = {"": "Element;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;", $isTableCellElement: true, $asTableCellElement: null};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;caption=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$(receiver.tBodies, $.TableSectionElement);
  },
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "Element;",
  get$cells: function(receiver) {
    return $._WrappedList$(receiver.cells, $.TableCellElement);
  },
  $isTableRowElement: true,
  $asTableRowElement: null
};

$$.TableSectionElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  },
  $isTableSectionElement: true,
  $asTableSectionElement: null
};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;", $isText: true, $asText: null};

$$.TextAreaElement = {"": "Element;rows=,type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.TextEvent = {"": "UIEvent;"};

$$.TitleElement = {"": "Element;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height},width}"};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;",
  get$location: function(receiver) {
    var result = this.get$_location(receiver);
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = $._LocationWrapper$(result);
    return receiver._location_wrapper;
  },
  get$_location: function(receiver) {
    return receiver.location;
  },
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._NamedNodeMap = {"": "Object_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;href="};

$$.AltGlyphElement = {"": "TextPositioningElement;href="};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;type=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;x=,y="};

$$.FECompositeElement = {"": "StyledElement;x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;scale=,x=,y=",
  scale$1: function($receiver, arg0) {
    return this.scale.call$1(arg0);
  }
};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;x=,y="};

$$.FEImageElement = {"": "StyledElement;x=,y=,href="};

$$.FEMergeElement = {"": "StyledElement;x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;x=,y="};

$$.FEOffsetElement = {"": "StyledElement;x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y=,z="};

$$.FESpecularLightingElement = {"": "StyledElement;x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y=,z="};

$$.FETileElement = {"": "StyledElement;x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;type=,x=,y="};

$$.FilterElement = {"": "StyledElement;x=,y=,href="};

$$.ForeignObjectElement = {"": "StyledElement;x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;x=,y=,href="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;x=,y=,href="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;x=,y="};

$$.ScriptElement0 = {"": "SvgElement;type=,href="};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = $._AttributeClassSet$(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver, null);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;href="};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;x=,y=,href="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;href="};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.ByteBuffer = {"": "Interceptor;"};

$$.TypedData = {"": "Interceptor;"};

$$.Float32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.JSNumber);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.JSInt);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.JSInt);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.Bound_scale_mat4 = {"": "Closure;self,target,receiver",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](this.receiver, p0, p1, p2);
  },
  call$1: function(x) {
    return this.call$3(x, null, null);
  },
  call$2: function(x, y) {
    return this.call$3(x, y, null);
  }
};

$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.BoundClosure$i2 = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart))
    for (i = srcStart + count - 1, j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, _iterator, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.TakeIterator$ = function(_iterator, _remaining, E) {
  var t1 = new $.TakeIterator(_iterator, _remaining);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.TakeIterator$2(_iterator, _remaining, E);
  return t1;
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount, E) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    if (element === t1.get$current())
      return true;
  return false;
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0) === true)
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    otherList = $.toList$1$growable$ax($.skip$1$ax(from, skipCount), false);
    otherStart = 0;
  }
  if (typeof $length !== "number")
    throw $.iae($length);
  if ($.JSNumber_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key) === true)
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications, E) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications, E);
  return t1;
};

$.LinkedHashSet__findBucketIndex = function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_element(), element) === true)
      return i;
  return -1;
};

$.LinkedHashSetCell$ = function(_element) {
  return new $.LinkedHashSetCell(_element, null, null);
};

$.LinkedHashSetIterator$ = function(_set, _modifications, E) {
  var t1 = new $.LinkedHashSetIterator(_set, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashSetIterator$2(_set, _modifications, E);
  return t1;
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchProperty = function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.initializeDispatchProperty$bailout = function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.events._add$1($._IsolateEvent$(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        $.get$globalThis().postMessage(t1);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    $globalState;
    t1 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    $.get$globalThis().postMessage(t1);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  $._WorkerStub_methods.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  $._WorkerStub_methods.set$id(worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.JSArray).then$1(new $._waitForPendingPorts_closure(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.wrapException($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw $.ioore(2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw $.ioore(3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    throw $.wrapException($.ArgumentError$("Radix is not an integer"));
    if ($.JSNull_methods.$lt(radix, 2) || $.JSNull_methods.$gt(radix, 36))
      throw $.wrapException($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (match != null) {
      t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (!$.JSNull_methods.$lt(radix, 10)) {
        if (3 >= match.length)
          throw $.ioore(3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        if ($.JSNull_methods.$le(radix, 10)) {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 48 + radix - 1;
        } else {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 97 + radix - 10 - 1;
        }
        if (1 >= match.length)
          throw $.ioore(1);
        digitsPart = $.toLowerCase$0$s(match[1]);
        for (i = 0; i < digitsPart.length; ++i)
          if ($.JSString_methods.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $._StackTrace$(exception.stack);
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCast = function(value, property) {
  var t1;
  if (value == null || !!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.listSuperNativeTypeCast = function(value, property) {
  var t1;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList) || value == null)
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.getRuntimeTypeString = function(object) {
  var className = object.constructor === Array ? "List" : $.getInterceptor(object).constructor.builtin$cls;
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
};

$.getRuntimeType = function(object) {
  return $.TypeImpl$($.getRuntimeTypeString(object));
};

$.checkSubtype = function(object, isField, checks, asField) {
  var $arguments, interceptor, isSubclass, substitution;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = typeof object == "function" ? object : $.getInterceptor(object);
  isSubclass = interceptor[isField];
  if (isSubclass == null || isSubclass !== true)
    return false;
  substitution = interceptor[asField];
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, checks);
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t) {
  var t1, len, t2, i;
  t1 = $.getInterceptor(s);
  if (s == null || t == null)
    return true;
  len = t1.get$length(s);
  for (t2 = $.getInterceptor$asx(t), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
    if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
      return false;
  return true;
};

$.objectIsSubtype = function(o, t) {
  var rti, type;
  if (o == null || t == null)
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = typeof o == "function" ? o : $.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, substitution, $arguments;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(3, s, t, true, true, typeOfS, t1);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(s.constructor === Array) && substitution == null))
    t1 = !(t.constructor === Array);
  else
    t1 = true;
  if (t1)
    return true;
  $arguments = s.constructor === Array ? s.slice(1) : null;
  t1 = t.constructor === Array ? t.slice(1) : null;
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, t1);
};

$.isSubtype$bailout = function(state0, s, t, t1, t2, typeOfS, t3) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (s == null || t == null)
        return true;
      if (s === t)
        return true;
      t1 = s != null;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.$index$asx(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = t != null;
    case 3:
      var typeOfT, substitution, $arguments;
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.$index$asx(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
        return false;
      substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
      if (!(!(t1 && s.constructor === Array) && substitution == null))
        t3 = !(t2 && t.constructor === Array);
      else
        t3 = true;
      if (t3)
        return true;
      $arguments = t1 && s.constructor === Array ? s.slice(1) : null;
      t1 = t2 && t.constructor === Array ? t.slice(1) : null;
      if (substitution != null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = substitution.apply(null, $arguments);
      return $.areSubtypes($arguments, t1);
  }
};

$.createRuntimeType = function($name) {
  return $.TypeImpl$($name);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; !$.JSArray_methods.get$isEmpty($.get$_asyncCallbacks());) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$.Future_Future$value = function(value, T) {
  return $._FutureImpl$immediate(value, T);
};

$._AsyncCompleter$ = function(T) {
  var t1 = new $._AsyncCompleter($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._AsyncCompleter$($.JSArray);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._throwDelayed = function(error, stackTrace) {
  $.get$_asyncCallbacks().push(new $._throwDelayed_closure(error, stackTrace));
  if (!$._callbacksAreEnqueued) {
    $.Timer_run($._asyncRunCallback);
    $._callbacksAreEnqueued = true;
  }
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._runUserCode = function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError, S, T) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._BaseStreamSubscription$3(onData, onError, onDone, T);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError, S, T);
  return t1;
};

$._WhereStream$ = function(source, test, T) {
  var t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._SkipStream$ = function(source, count, T) {
  var t1 = new $._SkipStream(count, source);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._SkipStream$2(source, count, T);
  return t1;
};

$.Timer_run = function(callback) {
  var milliseconds;
  $.get$Timer__runCallbacks().push(callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, new $.Timer_run_closure());
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashSet$ = function(E) {
  var t1 = new $.LinkedHashSet(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$shl$n(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._liblib1$_tail, queue._modificationCount, queue._liblib1$_head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._SplayTreeNode$ = function(key, K) {
  var t1 = new $._SplayTreeNode(key, null, null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeMapNode$ = function(key, value, K, V) {
  var t1 = new $._SplayTreeMapNode(value, key, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.SplayTreeMap$ = function(compare, K, V) {
  var t1 = compare == null ? $.Comparable_compare : compare;
  t1 = new $.SplayTreeMap(t1, null, $._SplayTreeNode$(null, K), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterable$ = function(_tree, K) {
  var t1 = new $._SplayTreeKeyIterable(_tree);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeValueIterable$ = function(_map, K, V) {
  var t1 = new $._SplayTreeValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterator$ = function(map, K) {
  var t1 = new $._SplayTreeKeyIterator(map, [], map._modificationCount, map._splayCount, null);
  $.setRuntimeTypeInfo(t1, [K]);
  t1._SplayTreeIterator$1(map, K);
  return t1;
};

$._SplayTreeValueIterator$ = function(map, K, V) {
  var t1 = new $._SplayTreeValueIterator(map, [], map._modificationCount, map._splayCount, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._SplayTreeIterator$1(map, V);
  return t1;
};

$._SplayTreeNodeIterator$ = function(map, K) {
  var t1 = new $._SplayTreeNodeIterator(map, [], map._modificationCount, map._splayCount, null);
  $.setRuntimeTypeInfo(t1, [K]);
  t1._SplayTreeIterator$1(map, [$._SplayTreeNode, K]);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Expando$ = function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$filled = function($length, fill, E) {
  var result, t1, i;
  if ($length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = new Array($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.getInterceptor(result).$isJavaScriptIndexingBehavior)
    return $.List_List$filled$bailout(1, result, fill, $length);
  result.fixed$length = true;
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$filled$bailout = function(state0, result, fill, $length) {
  var i;
  result.fixed$length = true;
  if ($length !== 0 && fill != null)
    for (i = 0; i < result.length; ++i)
      $.JSArray_methods.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.List_List$generate = function($length, generator, growable, E) {
  var result, i, t1;
  if (typeof $length !== "number")
    return $.List_List$generate$bailout(1, $length, generator, growable, E);
  if (growable) {
    result = [];
    $.JSArray_methods.set$length(result, $length);
  } else {
    result = $.List_List($length, E);
    $.setRuntimeTypeInfo(result, [E]);
  }
  for (i = 0; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
};

$.List_List$generate$bailout = function(state0, $length, generator, growable, E) {
  var result, i, t1;
  if (growable) {
    result = [];
    $.JSArray_methods.set$length(result, $length);
  } else {
    result = $.List_List($length, E);
    $.setRuntimeTypeInfo(result, [E]);
  }
  for (i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.createElement("canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, parentTag, temp, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    t1 = match._groups;
    if (1 >= t1.length)
      throw $.ioore(1);
    tag = $.toLowerCase$0$s(t1[1]);
    if ($.Device__isIE == null)
      $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0) === true;
    if ($.Device__isIE === true && $.Map_Ai46y.containsKey$1(tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.Map_8h6qb.$index($.Map_8h6qb, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = document.createElement(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1) === true)
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") === true && $.$eq($.get$length$asx(t1.get$children(temp)), 2) === true) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, t1, table, element;
  div = document.createElement("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + html + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  var t1 = $.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_closure());
  return $._ElementFactoryProvider__singleNode($.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0)));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1) === true)
    return t1.$index(list, 0);
  throw $.wrapException($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " top level elements but 1 expected"));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Window__isDartLocation = function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    return typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isLocation;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$._LocationWrapper__get = function(p, m) {
  return p[m];
};

$._LocationWrapper__set = function(p, m, v) {
  return p[m] = v;
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
};

$.Device_userAgent = function() {
  return $.window().navigator.userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.FilteredElementList$ = function(node, T) {
  var t1 = new $.FilteredElementList(node, $.get$nodes$x(node));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var t1, i;
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if (end > t1.get$length(a))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    a;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      b;
      if (typeof a === "number") {
        a;
        if (a === 0)
          return (a + b) * a * b;
      }
      if (a === 0 && $.JSInt_methods.get$isNegative(b) || $.JSInt_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    a;
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      b;
      if (typeof a === "number") {
        a;
        if (a === 0)
          return a + b;
      }
      if ($.JSInt_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && $.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.sqrt = function(x) {
  return Math.sqrt(x);
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.Float32List_Float32List = function($length) {
  return new Float32Array($length);
};

$.Uri$ = function(uri) {
  var t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  return new $.Uri($.Uri__emptyIfNull(t1.$index(t1, 1)), $.Uri__emptyIfNull(t1.$index(t1, 2)), $.Uri__eitherOf(t1.$index(t1, 3), t1.$index(t1, 4)), $.Uri__parseIntOrZero(t1.$index(t1, 5)), $.Uri__emptyIfNull(t1.$index(t1, 6)), $.Uri__emptyIfNull(t1.$index(t1, 7)), $.Uri__emptyIfNull(t1.$index(t1, 8)));
};

$.Uri__emptyIfNull = function(val) {
  return val != null ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  if (val != null && $.$eq(val, "") !== true)
    return $.Primitives_parseInt(val, null, null);
  else
    return 0;
};

$.Uri__eitherOf = function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
};

$.main = function() {
  var milliseconds = $.Duration_0.get$inMilliseconds();
  if (milliseconds < 0)
    milliseconds = 0;
  $.TimerImpl$(milliseconds, new $.main_closure());
};

$._setupRoutes = function() {
  var t1 = $._EventStream$(window, $.EventStreamProvider_hashchange._eventType, false, null);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $._setupRoutes_closure(), t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0));
  $._route($.get$hash$x($.Window_methods.get$location(window)));
};

$.activeDemo = function(value) {
  if ($.hasObservers($.get$__changes()))
    $.notifyChange($.get$__changes(), 1, "activeDemo", $.__$activeDemo, value);
  $.__$activeDemo = value;
};

$._route = function(hash) {
  var t1, k, t2, initEntities;
  t1 = $.getInterceptor(hash);
  k = hash != null && $.$lt$n(t1.get$length(hash), 2) ? null : t1.substring$1(hash, 2);
  $.Primitives_printString("k :: " + $.S(k));
  if (k == null) {
    t1 = $.Window_methods.get$location(window);
    t2 = $.get$initDemo().get$keys();
    $.set$hash$x(t1, "/" + $.S(t2.get$first(t2)));
    return;
  }
  t1 = $.get$initDemo();
  initEntities = t1.$index(t1, k);
  if (initEntities == null) {
    t1 = $.Window_methods.get$location(window);
    t2 = $.get$initDemo().get$keys();
    $.set$hash$x(t1, "/" + $.S(t2.get$first(t2)));
    return;
  }
  $.activeDemo(k);
  $.get$activeCtrl().then$1(new $._route_closure());
  $.activeCtrl = $.init(initEntities).then$1($.start);
};

$.init = function(initEntities) {
  return $.handleError(new $.init_closure(initEntities));
};

$.Ctrl$ = function() {
  return new $.Ctrl(true);
};

$.start = function(world) {
  var t1, ctrl;
  t1 = {};
  t1.lastT_0 = -1;
  ctrl = $.Ctrl$();
  $.Window_methods.requestAnimationFrame$1(window, new $.start_loop(t1, world, ctrl));
  return ctrl;
};

$.handleError = function(f) {
  var e, s, t1, exception;
  try {
    t1 = f.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    $.Primitives_printString($.toString$0(e));
    $.Primitives_printString($.toString$0(s));
    throw $.wrapException(e);
  }

};

$.addNewEntity = function(world, cs, groups, player) {
  var e = world.createEntity$0();
  $.forEach$1$ax(cs, new $.addNewEntity_closure(e));
  if (groups != null)
    $.JSNull_methods.forEach$1(groups, new $.addNewEntity_closure0(e, $.propertyTypeCast(world.getManager$1($.Type_Uzk), "$isGroupManager")));
  if (player != null)
    $.propertyTypeCast(world.getManager$1($.Type_UAO), "$isPlayerManager").setPlayer$2(e, player);
  world.addEntity$1(e);
  return e;
};

$.init_autogenerated = function() {
  var __root, __html0, __t, t1;
  __root = document.body;
  __html0 = $._ElementFactoryProvider_createElement_html("<li class=\"\"><a></a></li>");
  __t = $.Template$(__root);
  t1 = $.get$nodes$x(__root)._this.childNodes;
  if (1 >= t1.length)
    throw $.ioore(1);
  __t.children.push($.LoopTemplate$($.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x(t1[1]), 5)), 1)), 1), new $.init_autogenerated_closure(), new $.init_autogenerated_closure0(__html0)));
  __t.create$0();
  __t.insert$0(__t);
};

$.main0 = function() {
  $.useObservers = true;
  $.main();
  $.init_autogenerated();
};

$.Aspect$ = function() {
  return new $.Aspect(0, 0, 0);
};

$.Aspect_getAspectForAllOf = function(componentTypes) {
  var aspect = $.Aspect$();
  aspect._all = aspect._updateBitMask$2(aspect._all, componentTypes);
  return aspect;
};

$.ComponentManager$ = function() {
  return new $.ComponentManager($.Bag$(16, [$.Bag, $.Component]), $.Bag$(16, $.Entity), null);
};

$.ComponentMapper$ = function(componentType, world, A) {
  var t1 = new $.ComponentMapper(null, null);
  $.setRuntimeTypeInfo(t1, [A]);
  t1.ComponentMapper$2(componentType, world, A);
  return t1;
};

$.ComponentType$ = function() {
  var t1 = new $.ComponentType(0, 0);
  t1.ComponentType$0();
  return t1;
};

$.ComponentTypeManager_getTypeFor = function(componentType) {
  var t1, type;
  t1 = $.get$ComponentTypeManager__componentTypes();
  type = t1.$index(t1, componentType);
  if (type == null) {
    type = $.ComponentType$();
    t1 = $.get$ComponentTypeManager__componentTypes();
    t1.$indexSet(t1, componentType, type);
  }
  return type;
};

$.Entity$_ = function(_world, id) {
  var t1 = new $.Entity(id, 0, 0, 0, _world, null, null);
  t1.Entity$_$2(_world, id);
  return t1;
};

$.EntityManager$ = function() {
  return new $.EntityManager($.Bag$(16, $.Entity), $.Bag$(16, $.Entity), $.Bag$(16, $.JSBool), 0, 0, 0, 0, $._IdentifierPool$(), null);
};

$._IdentifierPool$ = function() {
  return new $._IdentifierPool($.Bag$(16, $.JSInt), 0);
};

$.GroupManager$ = function() {
  return new $.GroupManager($.Map_Map($.JSString, [$.Bag, $.Entity]), $.Map_Map($.Entity, [$.Bag, $.JSString]), null);
};

$.PlayerManager$ = function() {
  var t1 = new $.PlayerManager(null, null, null);
  t1.PlayerManager$0();
  return t1;
};

$._SystemBitManager__getBitFor = function(esType) {
  var t1, bit;
  if (null == $._SystemBitManager__systemBits)
    $._SystemBitManager__systemBits = $.HashMap$($.Type, $.JSInt);
  t1 = $._SystemBitManager__systemBits;
  bit = t1.$index(t1, esType);
  if (bit == null) {
    t1 = $._SystemBitManager__POS;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    bit = $.JSInt_methods.$shl(1, t1);
    $._SystemBitManager__POS = $.$add$ns($._SystemBitManager__POS, 1);
    t1 = $._SystemBitManager__systemBits;
    t1.$indexSet(t1, esType, bit);
  }
  return bit;
};

$.Bag$ = function(capacity, E) {
  var t1 = new $.Bag($.List_List(capacity, null), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.Bag$1$capacity(capacity, E);
  return t1;
};

$.ObjectPool_get = function(type, createPoolable) {
  var obj = $.removeLast$0$ax($.ObjectPool__getPool(type));
  return null == obj ? createPoolable.call$0() : obj;
};

$.ObjectPool__getPool = function(type) {
  var t1, pooledObjects;
  t1 = $.get$ObjectPool__objectPools();
  pooledObjects = t1.$index(t1, type);
  if (null == pooledObjects) {
    pooledObjects = $.Bag$(16, null);
    t1 = $.get$ObjectPool__objectPools();
    t1.$indexSet(t1, type, pooledObjects);
  }
  return pooledObjects;
};

$.ReadOnlyBag$_of = function(_bag, E) {
  var t1 = new $.ReadOnlyBag(_bag);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.World$ = function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = $.EntityManager$();
  t2 = $.ComponentManager$();
  t3 = $.Bag$(16, $.Entity);
  t4 = $.Bag$(16, $.Entity);
  t5 = $.Bag$(16, $.Entity);
  t6 = $.Bag$(16, $.Entity);
  t7 = $.Bag$(16, $.Entity);
  t8 = $.Map_Map($.Type, $.EntitySystem);
  t9 = $.List_List($, $.EntitySystem);
  $.setRuntimeTypeInfo(t9, [$.EntitySystem]);
  t9 = new $.World(t1, t2, t3, t4, t5, t6, t7, t8, t9, $.Map_Map($.Type, $.Manager), $.Bag$(16, $.Manager), null);
  t9.World$0();
  return t9;
};

$.rgb1_irgba = function(r, g, b) {
  return (255 | $.toInt$0$n($.$mul$n(r, 255)) << 24 | $.toInt$0$n($.$mul$n(g, 255)) << 16 | $.toInt$0$n($.$mul$n(b, 255)) << 8) >>> 0;
};

$.irgba_hsl = function(c) {
  var r, g, b, max, min, t1, l, h, s, d, t2;
  r = $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24) / 255;
  g = $.JSInt_methods.$shr(c & 16711680, 16) / 255;
  b = $.JSInt_methods.$shr(c & 65280, 8) / 255;
  max = $.max($.max(r, g), b);
  min = $.min($.min(r, g), b);
  t1 = $.getInterceptor$ns(max);
  l = $.$div$n(t1.$add(max, min), 2);
  if (t1.$eq(max, min) === true) {
    h = 0;
    s = 0;
  } else {
    d = t1.$sub(max, min);
    t2 = $.getInterceptor$n(d);
    if ($.$gt$n(l, 0.5)) {
      if (typeof max !== "number")
        throw $.iae(max);
      if (typeof min !== "number")
        throw $.iae(min);
      s = t2.$div(d, 2 - max - min);
    } else
      s = t2.$div(d, t1.$add(max, min));
    if (t1.$eq(max, r) === true) {
      if (typeof d !== "number")
        throw $.iae(d);
      t1 = g < b ? 6 : 0;
      h = (g - b) / d + t1;
    } else if (t1.$eq(max, g) === true) {
      if (typeof d !== "number")
        throw $.iae(d);
      t1 = (b - r) / d + 2;
      h = t1;
    } else {
      if (typeof d !== "number")
        throw $.iae(d);
      t1 = (r - g) / d + 4;
      h = t1;
    }
    h /= 6;
  }
  return [h, s, l];
};

$.hsl_irgba = function(hsl) {
  var t1, h, s, l, b, g, r, t2, q, p;
  t1 = $.getInterceptor$asx(hsl);
  h = t1.$index(hsl, 0);
  s = t1.$index(hsl, 1);
  l = t1.$index(hsl, 2);
  t1 = new $.hsl_irgba_hue2rgb();
  if ($.$eq(s, 0) === true) {
    b = l;
    g = b;
    r = g;
  } else {
    t2 = $.getInterceptor$n(l);
    if (t2.$lt(l, 0.5)) {
      if (typeof s !== "number")
        throw $.iae(s);
      q = t2.$mul(l, 1 + s);
    } else
      q = $.$sub$n(t2.$add(l, s), t2.$mul(l, s));
    if (typeof l !== "number")
      throw $.iae(l);
    if (typeof q !== "number")
      throw $.iae(q);
    p = 2 * l - q;
    t2 = $.getInterceptor$ns(h);
    r = t1.call$3(p, q, t2.$add(h, 0.3333333333333333));
    g = t1.call$3(p, q, h);
    b = t1.call$3(p, q, t2.$sub(h, 0.3333333333333333));
  }
  return $.rgb1_irgba(r, g, b);
};

$.irgba_hsv = function(c) {
  var r, g, b, max, min, d, s, h, t1;
  r = $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24) / 255;
  g = $.JSInt_methods.$shr(c & 16711680, 16) / 255;
  b = $.JSInt_methods.$shr(c & 65280, 8) / 255;
  max = $.max($.max(r, g), b);
  min = $.min($.min(r, g), b);
  d = max - min;
  s = max === 0 ? 0 : d / max;
  if (max === min)
    h = 0;
  else {
    if (max === r) {
      t1 = g < b ? 6 : 0;
      h = (g - b) / d + t1;
    } else
      h = max === g ? (b - r) / d + 2 : (r - g) / d + 4;
    h /= 6;
  }
  return [h, s, max];
};

$.hsv_irgba = function(hsv) {
  var t1, h2, s, v, c, t2, x, r, g, b, m;
  t1 = $.getInterceptor$asx(hsv);
  h2 = $.$mul$n(t1.$index(hsv, 0), 6);
  s = t1.$index(hsv, 1);
  v = t1.$index(hsv, 2);
  t1 = $.getInterceptor$n(v);
  c = t1.$mul(v, s);
  t2 = $.getInterceptor$n(h2);
  x = $.$mul$n(c, 1 - $.JSNumber_methods.abs$0(t2.$mod(h2, 2) - 1));
  r = 0;
  g = 0;
  b = 0;
  switch ($.JSNumber_methods.$mod(t2.floor$0(h2), 6)) {
    case 0:
      g = x;
      r = c;
      b = 0;
      break;
    case 1:
      g = c;
      r = x;
      b = 0;
      break;
    case 2:
      b = x;
      g = c;
      r = 0;
      break;
    case 3:
      b = c;
      g = x;
      r = 0;
      break;
    case 4:
      b = c;
      r = x;
      g = 0;
      break;
    case 5:
      b = x;
      r = c;
      g = 0;
      break;
  }
  m = t1.$sub(v, c);
  return $.rgb1_irgba($.$add$ns(r, m), $.$add$ns(g, m), $.$add$ns(b, m));
};

$.hsl_tetrad = function(hsl) {
  var h, t1, t2, t3, t4, t5, t6, t7, t8, t9;
  if (0 >= hsl.length)
    throw $.ioore(0);
  h = hsl[0];
  t1 = $.getInterceptor$ns(h);
  t2 = $.$mod$n(t1.$add(h, 0.25), 1);
  t3 = hsl.length;
  if (1 >= t3)
    throw $.ioore(1);
  t4 = hsl[1];
  if (2 >= t3)
    throw $.ioore(2);
  t3 = hsl[2];
  t5 = $.$mod$n(t1.$add(h, 0.5), 1);
  t6 = hsl.length;
  if (1 >= t6)
    throw $.ioore(1);
  t7 = hsl[1];
  if (2 >= t6)
    throw $.ioore(2);
  t6 = hsl[2];
  t1 = $.$mod$n(t1.$add(h, 0.75), 1);
  t8 = hsl.length;
  if (1 >= t8)
    throw $.ioore(1);
  t9 = hsl[1];
  if (2 >= t8)
    throw $.ioore(2);
  return [hsl, [t2, t4, t3], [t5, t7, t6], [t1, t9, hsl[2]]];
};

$.hsv_monochromatic = function(hsv, results) {
  var t1, h, s, v, ret, modification, i;
  t1 = hsv.length;
  if (0 >= t1)
    throw $.ioore(0);
  h = hsv[0];
  if (1 >= t1)
    throw $.ioore(1);
  s = hsv[1];
  if (2 >= t1)
    throw $.ioore(2);
  v = hsv[2];
  if (typeof v !== "number")
    return $.hsv_monochromatic$bailout(1, hsv, results, h, s, v);
  ret = $.List_List(results, [$.JSArray, $.JSDouble]);
  $.setRuntimeTypeInfo(ret, [[$.JSArray, $.JSDouble]]);
  modification = 1 / results;
  t1 = ret.length;
  if (0 >= t1)
    throw $.ioore(0);
  ret[0] = hsv;
  for (i = 1; i < results; ++i) {
    v = $.JSNumber_methods.$mod(v + modification, 1);
    if (i >= t1)
      throw $.ioore(i);
    ret[i] = [h, s, v];
  }
  return ret;
};

$.hsv_monochromatic$bailout = function(state0, hsv, results, h, s, v) {
  var ret, modification, t1, i;
  ret = $.List_List(results, [$.JSArray, $.JSDouble]);
  $.setRuntimeTypeInfo(ret, [[$.JSArray, $.JSDouble]]);
  modification = 1 / results;
  t1 = ret.length;
  if (0 >= t1)
    throw $.ioore(0);
  ret[0] = hsv;
  for (i = 1; i < results; ++i) {
    v = $.$mod$n($.$add$ns(v, modification), 1);
    if (i >= t1)
      throw $.ioore(i);
    ret[i] = [h, s, v];
  }
  return ret;
};

$.irgba_rgbaString = function(c) {
  var r, g, b;
  if (typeof c !== "number")
    throw c.$and();
  r = $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24);
  g = $.JSInt_methods.$shr(c & 16711680, 16);
  b = $.JSInt_methods.$shr(c & 65280, 8);
  return "rgba(" + r + ", " + g + ", " + b + ", " + (c & 255) / 255 + ")";
};

$.reverse = function(f0) {
  return new $.reverse_closure(f0);
};

$.goback = function(f0) {
  return new $.goback_closure(f0);
};

$.periodicRatio = function(f0, duration) {
  return new $.periodicRatio_closure(f0, duration);
};

$.onceRatio = function(f0, duration) {
  return new $.onceRatio_closure(f0, duration);
};

$.linear = function(ratio, change, baseValue) {
  return $.$add$ns($.$mul$n(change, ratio), baseValue);
};

$.random = function(ratio, change, baseValue) {
  var t1, r;
  t1 = $.getInterceptor$n(ratio);
  if (t1.$gt(ratio, 0) && t1.$lt(ratio, 1)) {
    $.get$_randomRatio();
    r = Math.random();
  } else
    r = ratio;
  return $.$add$ns($.$mul$n(change, r), baseValue);
};

$.inElastic = function(ratio, change, baseValue) {
  var t1, t2, r;
  t1 = $.getInterceptor(ratio);
  if (!(t1.$eq(ratio, 0) === true || t1.$eq(ratio, 1) === true)) {
    ratio = t1.$sub(ratio, 1);
    if (typeof ratio !== "number")
      throw $.iae(ratio);
    t1 = 10 * ratio;
    t1 = Math.pow(2, t1);
    t2 = (ratio - 0.075) * 6.283185307179586 / 0.3;
    r = -t1 * Math.sin(t2);
  } else
    r = ratio;
  return $.$add$ns($.$mul$n(r, change), baseValue);
};

$.outBounce = function(ratio, change, baseValue) {
  if (ratio < 0.36363636363636365)
    ratio = 7.5625 * ratio * ratio;
  else if (ratio < 0.7272727272727273) {
    ratio -= 0.5454545454545454;
    ratio = 7.5625 * ratio * ratio + 0.75;
  } else if (ratio < 0.9090909090909091) {
    ratio -= 0.8181818181818182;
    ratio = 7.5625 * ratio * ratio + 0.9375;
  } else {
    ratio -= 0.9545454545454546;
    ratio = 7.5625 * ratio * ratio + 0.984375;
  }
  return ratio * change + baseValue;
};

$.Animatable$_ = function() {
  return new $.Animatable($.LinkedBag$($.Animation));
};

$.Animatable__ctor = function() {
  return $.Animatable$_();
};

$.onNoop = function(e, t, t00) {
  return false;
};

$.Animation$ = function() {
  return new $.Animation(-1, $.onNoop, $.onNoop, $.onNoop, null);
};

$.System_Animator$ = function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_I6I]);
  t2 = new $.System_Animator(null, 0, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.Emitter$ = function() {
  var t1 = $.List_List($, {func: true, retvoid: true, args: [null, $.Entity, [$.Iterable, $.Entity]]});
  $.setRuntimeTypeInfo(t1, [{func: true, retvoid: true, args: [null, $.Entity, [$.Iterable, $.Entity]]}]);
  return new $.Emitter(t1, $.zero(), true, false);
};

$.System_Emitters$ = function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Opk]);
  t2 = new $.System_Emitters(null, 0, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.processParticules = function(es, f) {
  $.forEach$1$ax(es, new $.processParticules_closure(f));
};

$.particlesStartPosition = function(gen, fromEmitter) {
  return new $.particlesStartPosition_closure(gen, fromEmitter);
};

$.particlesStartPositionPrevious = function(gen, fromEmitter) {
  return new $.particlesStartPositionPrevious_closure(gen, fromEmitter);
};

$.addComponents = function(fs) {
  return new $.addComponents_closure(fs);
};

$.particlesAddComponents = function(fs) {
  return new $.particlesAddComponents_closure(fs);
};

$.zero = function() {
  return new $.zero_closure();
};

$.singleWave = function(v) {
  return new $.singleWave_closure(v);
};

$.steady = function(rate) {
  var t1, _rateInv;
  t1 = {};
  t1._acc_0 = 0;
  _rateInv = rate > 0 ? 1000 / rate : 0;
  return new $.steady_closure(t1, rate, _rateInv);
};

$.constant = function(x) {
  return new $.constant_closure(x);
};

$.box = function(center, offsets) {
  return new $.box_closure(center, offsets);
};

$.line = function(start, end, easing) {
  var t1, $length;
  t1 = {};
  $length = end.$sub(end, start);
  t1.acc_0 = 0;
  return new $.line_closure(t1, start, easing, $length);
};

$.Particle$ = function(pos) {
  var t1 = pos == null ? $.vec3$zero() : pos;
  return new $.Particle(t1, null);
};

$.ParticleInfo0$ = function() {
  return new $.ParticleInfo0(1 / 0, 255, 1, 1, 1, 0, 1, false);
};

$.Particles$ = function(nb) {
  var t1;
  if ($.$eq(nb, 0) === true) {
    t1 = $.List_List($, $.Particle);
    $.setRuntimeTypeInfo(t1, [$.Particle]);
  } else
    t1 = $.List_List$generate(nb, new $.Particles_closure(), true, null);
  return new $.Particles(t1);
};

$.ParticleInfo0s$ = function(nb) {
  var t1;
  if ($.$eq(nb, 0) === true) {
    t1 = $.List_List($, $.ParticleInfo0);
    $.setRuntimeTypeInfo(t1, [$.ParticleInfo0]);
  } else
    t1 = $.List_List$generate(nb, new $.ParticleInfo0s_closure(), true, null);
  return new $.ParticleInfo0s(t1);
};

$.Drawable$ = function(draw) {
  return new $.Drawable(draw);
};

$.System_Renderer$ = function(canvas) {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.vec2$(0, 0);
  t2 = $.Aspect_getAspectForAllOf([$.Type_iuI]);
  t3 = $.Bag$(16, $.Entity);
  t4 = t2.get$all();
  t5 = t2.get$excluded();
  t6 = t2.get$one();
  t6 = new $.System_Renderer($.get$context2d$x(canvas), $.get$context2d$x($.CanvasElement_CanvasElement(null, null)), null, null, 0, 0, t1, 0, null, t3, t4, t5, t6, null, null);
  t6.EntitySystem$1(t2);
  return t6;
};

$.rect = function(w, h, fillStyle, strokeLineDashOffset, strokeLineWidth, strokeStyle) {
  return new $.rect_closure(w, h, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset);
};

$.text = function(txt, fillStyle, font, strokeLineDashOffset, strokeLineWidth, strokeStyle, textAlign) {
  return new $.text_closure(txt, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset, font);
};

$.particles = function(radius, fillStyle, strokeLineDashOffset, strokeLineWidth, strokeStyle) {
  return new $.particles_closure(radius, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset);
};

$.particleInfo0s = function(radius, fillStyle, strokeLineDashOffset, strokeLineWidth, strokeStyle) {
  return new $.particleInfo0s_closure(radius, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset);
};

$.drawCDistance = function(g, x, strokeStyle) {
  var t1 = $.getInterceptor$x(g);
  t1.beginPath$0(g);
  t1.moveTo$2(g, $.get$x$x(x.get$a()), $.get$y$x(x.get$a()));
  t1.lineTo$2(g, $.get$x$x(x.get$b()), $.get$y$x(x.get$b()));
  t1.set$strokeStyle(g, strokeStyle);
  t1.stroke$0(g);
};

$.drawCPin = function(g, x, fillStyle) {
  var t1 = $.getInterceptor$x(g);
  t1.beginPath$0(g);
  t1.arc$5(g, $.get$x$x(x.get$pin()), $.get$y$x(x.get$pin()), 6, 0, 6.283185307179586);
  t1.set$fillStyle(g, fillStyle);
  t1.fill$0(g);
};

$.drawConstraints = function(angleStyle, distanceStyle, pinStyle) {
  return new $.drawConstraints_closure(pinStyle, distanceStyle, angleStyle);
};

$.DrawComponentType$ = function(ct, draw) {
  return new $.DrawComponentType(ct, draw);
};

$.drawComponentType = function(l) {
  return new $.drawComponentType_closure(l);
};

$.Transform$_ = function() {
  return new $.Transform(null, null, null, $.vec2$zero());
};

$.Transform__ctor = function() {
  return $.Transform$_();
};

$.Transform_Transform$w3d = function(position, rotation, scale) {
  var c = $.propertyTypeCast($.ObjectPool_get($.Type_UU7, $.Transform__ctor), "$isTransform");
  c.position3d = position;
  c.rotation3d = rotation;
  c.scale3d = scale == null ? $.vec3$(1, 1, 1) : scale;
  return c;
};

$.Constraints$ = function() {
  var t1 = $.List_List($, $.Constraint);
  $.setRuntimeTypeInfo(t1, [$.Constraint]);
  return new $.Constraints(t1);
};

$.System_Simulator$ = function(step) {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_GZG, $.Type_rpo]);
  t2 = new $.System_Simulator(null, null, 0.99, step, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.Constraint_Distance$ = function(a, b, stiffness, distance1) {
  var t1 = new $.Constraint_Distance(a, b, null, stiffness);
  t1.Constraint_Distance$4(a, b, stiffness, distance1);
  return t1;
};

$.Constraint_Pin$ = function(v) {
  return new $.Constraint_Pin($.clone$0$x(v), v);
};

$.makeTireXY = function(origin, radius, segments, spokeStiffness, treadStiffness) {
  var stride, ps, t1, i, t2, theta, v, t3, cs, t4, i0, t5;
  stride = 6.283185307179586 / segments;
  ps = $.Particles$(segments + 1);
  t1 = ps.l;
  if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
    return $.makeTireXY$bailout(1, origin, radius, segments, ps, t1, treadStiffness, spokeStiffness, stride);
  i = 0;
  for (; t2 = t1.length, i < segments; ++i) {
    theta = i * stride;
    if (i >= t2)
      throw $.ioore(i);
    v = t1[i].get$position3d().setFrom$1(origin);
    t2 = $.getInterceptor$x(v);
    t3 = t2.get$x(v);
    t2.set$x(v, $.$add$ns(t3, Math.cos(theta) * radius));
    t3 = t2.get$y(v);
    t2.set$y(v, $.$add$ns(t3, Math.sin(theta) * radius));
  }
  if (segments < 0 || segments >= t2)
    throw $.ioore(segments);
  t1[segments].get$position3d().setFrom$1(origin);
  cs = $.Constraints$();
  for (t2 = cs.l, i = 0; i < segments; i = i0) {
    t3 = t1.length;
    if (i >= t3)
      throw $.ioore(i);
    t4 = t1[i].get$position3d();
    i0 = i + 1;
    t5 = $.JSNumber_methods.$mod(i0, segments);
    if (t5 >>> 0 !== t5 || t5 >= t3)
      throw $.ioore(t5);
    t2.push($.Constraint_Distance$(t4, t1[t5].get$position3d(), treadStiffness, null));
    if (i >= t1.length)
      throw $.ioore(i);
    t2.push($.Constraint_Distance$(t1[i].get$position3d(), origin, spokeStiffness, null));
    t5 = t1.length;
    if (i >= t5)
      throw $.ioore(i);
    t4 = t1[i].get$position3d();
    t3 = $.JSNumber_methods.$mod(i + 5, segments);
    if (t3 >>> 0 !== t3 || t3 >= t5)
      throw $.ioore(t3);
    t2.push($.Constraint_Distance$(t4, t1[t3].get$position3d(), treadStiffness, null));
  }
  return [ps, cs];
};

$.makeTireXY$bailout = function(state0, origin, radius, segments, ps, t1, treadStiffness, spokeStiffness, stride) {
  var t2, i, theta, v, t3, t4, cs, i0;
  t2 = $.getInterceptor$asx(t1);
  i = 0;
  for (; i < segments; ++i) {
    theta = i * stride;
    v = t2.$index(t1, i).get$position3d().setFrom$1(origin);
    t3 = $.getInterceptor$x(v);
    t4 = t3.get$x(v);
    t3.set$x(v, $.$add$ns(t4, Math.cos(theta) * radius));
    t4 = t3.get$y(v);
    t3.set$y(v, $.$add$ns(t4, Math.sin(theta) * radius));
  }
  t2.$index(t1, segments).get$position3d().setFrom$1(origin);
  cs = $.Constraints$();
  for (t3 = cs.l, i = 0; i < segments; i = i0) {
    i0 = i + 1;
    t3.push($.Constraint_Distance$(t2.$index(t1, i).get$position3d(), t2.$index(t1, $.JSNumber_methods.$mod(i0, segments)).get$position3d(), treadStiffness, null));
    t3.push($.Constraint_Distance$(t2.$index(t1, i).get$position3d(), origin, spokeStiffness, null));
    t3.push($.Constraint_Distance$(t2.$index(t1, i).get$position3d(), t2.$index(t1, $.JSNumber_methods.$mod(i + 5, segments)).get$position3d(), treadStiffness, null));
  }
  return [ps, cs];
};

$.makeLineSegments = function(vertices, stiffness, $closed) {
  var ps, t1, cs, t2, t3, i, t4;
  ps = $.Particles$(0);
  t1 = ps.l;
  $.addAll$1$ax(t1, $.JSArray_methods.map$1(vertices, new $.makeLineSegments_closure()));
  cs = $.Constraints$();
  for (t2 = cs.l, t3 = $.getInterceptor$asx(t1), i = 1; t4 = $.getInterceptor$asx(t1), $.JSNumber_methods.$lt(i, t4.get$length(t1)); ++i)
    t2.push($.Constraint_Distance$(t3.$index(t1, i).get$position3d(), t3.$index(t1, i - 1).get$position3d(), stiffness, null));
  if ($closed)
    t2.push($.Constraint_Distance$(t3.$index(t1, 0).get$position3d(), t3.$index(t1, $.$sub$n(t4.get$length(t1), 1)).get$position3d(), stiffness, null));
  return [ps, cs];
};

$.makeCloth = function(origin, width, height, segments, pinMod, stiffness) {
  var xStride, yStride, ps, cs, t1, t2, t3, y, x0, t4, t5, t6, t7, x, t8, xi;
  xStride = width.$div(width, $.JSInt_methods.toDouble$0(segments));
  yStride = height.$div(height, $.JSInt_methods.toDouble$0(segments));
  ps = $.Particles$(0);
  cs = $.Constraints$();
  for (t1 = cs.l, t2 = ps.l, t3 = $.getInterceptor$asx(t2), y = 0; y < segments; ++y) {
    x0 = $.Particle$(origin.$add(origin, yStride.$mul(yStride, $.JSNumber_methods.toDouble$0(y))));
    t3.add$1(t2, x0);
    t4 = y > 0;
    if (t4)
      t1.push($.Constraint_Distance$(x0.position3d, t3.$index(t2, (y - 1) * segments).get$position3d(), stiffness, null));
    t5 = (y - 1) * segments;
    t6 = x0.position3d;
    if (typeof t6 !== "number")
      return $.makeCloth$bailout(1, y, origin, segments, t3, stiffness, t3, t4, xStride, pinMod, t6, yStride, ps, cs, t1, t2, t5);
    t7 = y * segments;
    x = 1;
    for (; x < segments; ++x) {
      t8 = xStride.$mul(xStride, $.JSNumber_methods.toDouble$0(x));
      if (typeof t8 !== "number")
        throw $.iae(t8);
      xi = $.Particle$(t6 + t8);
      t3.add$1(t2, xi);
      t8 = xi.position3d;
      t1.push($.Constraint_Distance$(t8, t3.$index(t2, t7 + x - 1).get$position3d(), stiffness, null));
      if (t4)
        t1.push($.Constraint_Distance$(t8, t3.$index(t2, t5 + x).get$position3d(), stiffness, null));
    }
  }
  for (x = 0; x < segments; ++x)
    if ($.JSNumber_methods.$mod(x, pinMod) === 0)
      t1.push($.Constraint_Pin$(t3.$index(t2, x).get$position3d()));
  return [ps, cs];
};

$.makeCloth$bailout = function(state0, y, origin, segments, t4, stiffness, t3, t5, xStride, pinMod, t7, yStride, ps, cs, t1, t2, t6) {
  switch (state0) {
    case 0:
      xStride = width.$div(width, $.JSInt_methods.toDouble$0(segments));
      yStride = height.$div(height, $.JSInt_methods.toDouble$0(segments));
      ps = $.Particles$(0);
      cs = $.Constraints$();
      t1 = cs.l;
      t2 = ps.l;
      t3 = $.getInterceptor$asx(t2);
      t4 = $.getInterceptor$ax(t2);
      y = 0;
    case 1:
      var x0, t8, t9, x, xi, t10;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(y < segments))
                break L0;
              x0 = $.Particle$(origin.$add(origin, yStride.$mul(yStride, $.JSNumber_methods.toDouble$0(y))));
              t4.add$1(t2, x0);
              t5 = y > 0;
              if (t5)
                t1.push($.Constraint_Distance$(x0.position3d, t3.$index(t2, (y - 1) * segments).get$position3d(), stiffness, null));
              t6 = (y - 1) * segments;
              t7 = x0.position3d;
            case 1:
              state0 = 0;
              t8 = $.getInterceptor$ns(t7);
              t9 = y * segments;
              x = 1;
              for (; x < segments; ++x) {
                xi = $.Particle$(t8.$add(t7, xStride.$mul(xStride, $.JSNumber_methods.toDouble$0(x))));
                t4.add$1(t2, xi);
                t10 = xi.position3d;
                t1.push($.Constraint_Distance$(t10, t3.$index(t2, t9 + x - 1).get$position3d(), stiffness, null));
                if (t5)
                  t1.push($.Constraint_Distance$(t10, t3.$index(t2, t6 + x).get$position3d(), stiffness, null));
              }
              ++y;
          }
      for (x = 0; x < segments; ++x)
        if ($.JSNumber_methods.$mod(x, pinMod) === 0)
          t1.push($.Constraint_Pin$(t3.$index(t2, x).get$position3d()));
      return [ps, cs];
  }
};

$.LinkedBag$ = function(E) {
  var t1 = new $.LinkedBag($.LinkedEntry$());
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedEntry$ = function() {
  return new $.LinkedEntry(null, null);
};

$.mat4$zero = function() {
  return new $.mat4($.Float32List_Float32List(16));
};

$.mat4$identity = function() {
  var t1 = new $.mat4($.Float32List_Float32List(16));
  t1.mat4$identity$0();
  return t1;
};

$.mat4$copy = function(other) {
  var t1 = new $.mat4($.Float32List_Float32List(16));
  t1.mat4$copy$1(other);
  return t1;
};

$.sin = function(arg, out) {
  var t1, x, y, z, w;
  if (typeof arg === "number")
    return Math.sin(arg);
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec2) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.sin(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.sin(t1);
    if (out == null)
      out = $.vec2$(x, y);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
    }
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec3) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.sin(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.sin(t1);
    t1 = $.JSNumber_methods.get$z(arg);
    z = Math.sin(t1);
    if (out == null)
      out = $.vec3$(x, y, z);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
      $.$indexSet$ax(out.get$storage(), 2, z);
    }
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec4) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.sin(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.sin(t1);
    t1 = $.JSNumber_methods.get$z(arg);
    z = Math.sin(t1);
    t1 = arg.get$w();
    w = Math.sin(t1);
    if (out == null)
      out = $.vec4$(x, y, z, w);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
      $.$indexSet$ax(out.get$storage(), 2, z);
      $.$indexSet$ax(out.get$storage(), 3, w);
    }
    return out;
  }
  throw $.wrapException($.ArgumentError$(arg));
};

$.cos = function(arg, out) {
  var t1, x, y, z, w;
  if (typeof arg === "number")
    return Math.cos(arg);
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec2) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.cos(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.cos(t1);
    if (out == null)
      out = $.vec2$(x, y);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
    }
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec3) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.cos(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.cos(t1);
    t1 = $.JSNumber_methods.get$z(arg);
    z = Math.cos(t1);
    if (out == null)
      out = $.vec3$(x, y, z);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
      $.$indexSet$ax(out.get$storage(), 2, z);
    }
    return out;
  }
  if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isvec4) {
    t1 = $.JSNumber_methods.get$x(arg);
    x = Math.cos(t1);
    t1 = $.JSNumber_methods.get$y(arg);
    y = Math.cos(t1);
    t1 = $.JSNumber_methods.get$z(arg);
    z = Math.cos(t1);
    t1 = arg.get$w();
    w = Math.cos(t1);
    if (out == null)
      out = $.vec4$(x, y, z, w);
    else {
      $.$indexSet$ax(out.get$storage(), 0, x);
      $.$indexSet$ax(out.get$storage(), 1, y);
      $.$indexSet$ax(out.get$storage(), 2, z);
      $.$indexSet$ax(out.get$storage(), 3, w);
    }
    return out;
  }
  throw $.wrapException($.ArgumentError$(arg));
};

$.vec2$ = function(x_, y_) {
  var t1 = new $.vec2($.Float32List_Float32List(2));
  t1.vec2$2(x_, y_);
  return t1;
};

$.vec2$zero = function() {
  return new $.vec2($.Float32List_Float32List(2));
};

$.vec2$copy = function(other) {
  var t1 = new $.vec2($.Float32List_Float32List(2));
  t1.vec2$copy$1(other);
  return t1;
};

$.vec3$ = function(x_, y_, z_) {
  var t1 = new $.vec3($.Float32List_Float32List(3));
  t1.vec3$3(x_, y_, z_);
  return t1;
};

$.vec3$zero = function() {
  return new $.vec3($.Float32List_Float32List(3));
};

$.vec3$copy = function(other) {
  var t1 = new $.vec3($.Float32List_Float32List(3));
  t1.vec3$copy$1(other);
  return t1;
};

$.vec4$ = function(x_, y_, z_, w_) {
  var t1 = new $.vec4($.Float32List_Float32List(4));
  t1.vec4$4(x_, y_, z_, w_);
  return t1;
};

$.vec4$zero = function() {
  return new $.vec4($.Float32List_Float32List(4));
};

$.vec4$copy = function(other) {
  var t1 = new $.vec4($.Float32List_Float32List(4));
  t1.vec4$copy$1(other);
  return t1;
};

$.ChangeNotification$ = function(oldValue, newValue, changes) {
  return new $.ChangeNotification(oldValue, newValue, changes);
};

$.ChangeRecord$ = function(type, key, oldValue, newValue) {
  return new $.ChangeRecord(type, key, oldValue, newValue);
};

$.observe = function(value, callback, debugName) {
  var exprObserver = $._ExpressionObserver$(value, callback, debugName);
  if (!exprObserver._observe$0())
    return $._doNothing;
  return exprObserver.get$_unobserve();
};

$.Observable$ = function() {
  var t1 = $.$add$ns($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  return new $.Observable(null, null, t1);
};

$.hasObservers = function($self) {
  var t1 = $self.$$_observers;
  return t1 != null && t1.get$head(t1) != null;
};

$.observeReads = function() {
  return $._activeObserver != null;
};

$.notifyRead = function($self, type, key) {
  return $._activeObserver._addRead$3($self, type, key);
};

$.notifyChange = function($self, type, key, oldValue, newValue) {
  if ((type & 14) === 0)
    if (oldValue == null ? newValue == null : oldValue === newValue)
      return;
  if ($._changedObjects == null) {
    $._changedObjects = [];
    $.setImmediate($.deliverChangesSync);
  }
  if ($self.$$_changes == null) {
    $self.$$_changes = [];
    $.add$1$ax($._changedObjects, $self);
  }
  $.add$1$ax($self.$$_changes, $.ChangeRecord$(type, key, oldValue, newValue));
};

$._doNothing = function() {
};

$.deliverChangesSync = function() {
  var observable, changes, observer, error, trace, iterations, t1, t2, changedExpressions, iterations0, n, exception;
  iterations = 0;
  while (true) {
    t1 = $._changedObjects;
    t2 = t1 == null;
    if (!(!t2 || $._changedExpressions != null))
      break;
    $._changedObjects = null;
    changedExpressions = $._changedExpressions;
    $._changedExpressions = null;
    iterations0 = iterations + 1;
    if (iterations === $.circularNotifyLimit) {
      $._diagnoseCircularLimit(t1, changedExpressions);
      return;
    }
    if (!t2)
      for (t1 = $.get$iterator$ax(t1); t1.moveNext$0();) {
        observable = t1.get$current();
        changes = observable.get$$$_changes();
        observable.set$$$_changes(null);
        for (t2 = observable.get$$$_observers(), n = t2.get$head(t2); n != null; n = n.get$next()) {
          observer = $.get$value$x(n);
          try {
            observer.call$1(changes);
          } catch (exception) {
            t2 = $.unwrapException(exception);
            error = t2;
            trace = $.getTraceFromException(exception);
            $.onObserveUnhandledError.call$4(error, trace, observer, "from " + $.S(observable));
          }

        }
      }
    if (changedExpressions != null)
      changedExpressions.forEach$1(changedExpressions, new $.deliverChangesSync_closure());
    iterations = iterations0;
  }
};

$._diagnoseCircularLimit = function(changedObjects, changedExpressions) {
  var trace, t1, observable, changes, exprObserver, change, t2, msg;
  trace = [];
  if (changedObjects != null)
    for (t1 = $.get$iterator$ax(changedObjects); t1.moveNext$0();) {
      observable = t1.get$current();
      changes = observable.get$$$_changes();
      trace.push($.S(observable) + " " + $.S(changes));
    }
  if (changedExpressions != null)
    for (t1 = changedExpressions.get$values(changedExpressions), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      exprObserver = t1.get$current();
      change = exprObserver._deliver$0();
      if (change != null)
        trace.push($.S(exprObserver) + " " + $.S(change));
    }
  $._changedObjects = null;
  $._changedExpressions = null;
  t1 = "exceeded notifiction limit of " + $.circularNotifyLimit + ", possible circular reference in observer callbacks: ";
  t2 = $.JSArray_methods.take$1(trace, 10);
  msg = t1 + t2.join$1(t2, ", ");
  $.get$onCircularNotifyLimit().call$1(msg);
};

$._ExpressionObserver$ = function(_expression, _callback, _debugName) {
  var t1 = $.$add$ns($._ExpressionObserver__nextId, 1);
  $._ExpressionObserver__nextId = t1;
  return new $._ExpressionObserver(t1, _expression, _callback, _debugName, $.Map_Map(null, null), [], false, null);
};

$.defaultObserveUnhandledError = function(error, trace, obj, message) {
  $.Primitives_printString("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\nerror:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
};

$.LinkedListNode$_ = function(value, _list, E) {
  var t1 = new $.LinkedListNode(null, null, _list, value);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListNode$_$2(value, _list, E);
  return t1;
};

$.LinkedList$ = function(E) {
  var t1 = new $.LinkedList(null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedListIterator$ = function(_list, E) {
  var t1 = new $.LinkedListIterator(null, _list, null, -1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListIterator$1(_list, E);
  return t1;
};

$.hash3 = function(x, y, z) {
  return $.$add$ns($.$mul$n($.get$hashCode$($.$add$ns($.$mul$n($.get$hashCode$(x), 31), $.get$hashCode$(y))), 31), $.get$hashCode$(z));
};

$.hash4 = function(w, x, y, z) {
  var t1, t2, t3, t4;
  t1 = $.JSInt_methods.get$hashCode(w);
  t2 = $.JSString_methods.get$hashCode(x);
  t3 = $.get$hashCode$(y);
  t4 = $.get$hashCode$(z);
  return $.JSNumber_methods.get$hashCode(t1 * 31 + t2) * 31 + $.JSNumber_methods.get$hashCode(t3 * 31 + t4);
};

$.setImmediate = function(callback) {
  var port = $.ReceivePortImpl$();
  port._liblib4$_callback = new $.setImmediate_closure(callback, port);
  $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)).send$1(null);
};

$.updateBinding = function(value, node, stringValue) {
  var node0;
  if (stringValue == null)
    stringValue = $.toString$0(value);
  if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isText)
    $.set$text$x(node, stringValue);
  else {
    node0 = document.createTextNode(stringValue);
    $.replaceWith$1$x(node, node0);
    node = node0;
  }
  return node;
};

$.updateCssClass = function(elem, addClasses, classes) {
  var t1, t2;
  t1 = $.getInterceptor(classes);
  if (t1.$eq(classes, "") === true || classes == null)
    return;
  if (addClasses)
    if (typeof classes === "string") {
      t1 = $.getInterceptor$x(elem);
      if ($.JSString_methods.contains$1(classes, " ") === true) {
        t1 = t1.get$classes(elem);
        t1.addAll$1(t1, classes.split(" "));
      } else {
        t1 = t1.get$classes(elem);
        t1.add$1(t1, classes);
      }
    } else {
      t2 = $.checkSubtype(classes, "$isList", [$.JSString], "$asList");
      if (t2) {
        t2 = $.get$classes$x(elem);
        t2.addAll$1(t2, t1.where$1(classes, new $.updateCssClass_closure()));
      } else
        throw $.wrapException($.ArgumentError$("classes must be a String or List<String>."));
    }
  else if (typeof classes === "string") {
    t1 = $.getInterceptor$x(elem);
    if ($.JSString_methods.contains$1(classes, " ") === true)
      t1.get$classes(elem).removeAll$1(classes.split(" "));
    else {
      t1 = t1.get$classes(elem);
      t1.remove$1(t1, classes);
    }
  } else {
    t2 = $.checkSubtype(classes, "$isList", [$.JSString], "$asList");
    if (t2)
      $.get$classes$x(elem).removeAll$1(t1.where$1(classes, new $.updateCssClass_closure0()));
    else
      throw $.wrapException($.ArgumentError$("classes must be a String or List<String>."));
  }
};

$.bindCssClasses = function(elem, exp) {
  return $.watchAndInvoke(exp, new $.bindCssClasses_closure(elem), "css-class-bind");
};

$.sanitizeUri = function(uri) {
  uri = $.toString$0(uri);
  return $._isSafeUri(uri) ? uri : "#";
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$(uri).scheme;
  t1 = $.getInterceptor(scheme);
  if (t1.$eq(scheme, "") === true)
    return true;
  return $.JSArray_methods.contains$1($.List_http_https_ftp_mailto, t1.toLowerCase$0(scheme)) || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.Binding$ = function(exp, action, isFinal) {
  return new $.Binding(exp, action, isFinal, null);
};

$.ClassAttrBinding$ = function(elem, exp, isFinal) {
  return new $.ClassAttrBinding(elem, exp, isFinal, null);
};

$.DomPropertyBinding$ = function(getter, setter, isUrl, isFinal) {
  return new $.DomPropertyBinding(setter, getter, isUrl, isFinal, null);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.LoopTemplate$ = function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
};

$.watch = function(target, callback, debugName) {
  var exp, watcherType, val, e, trace, t1, exception, watcher, node;
  if ($.useObservers)
    return $.observe(target, callback, null);
  if ($._watchers == null)
    $._watchers = $.LinkedList$($._Watcher);
  exp = null;
  watcherType = $._WatcherType_OTHER;
  t1 = target;
  if (typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFunction) {
    exp = target;
    try {
      val = target.call$0();
      t1 = val;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList))
        watcherType = $._WatcherType_LIST;
      else {
        t1 = val;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
          watcherType = $._WatcherType_LIST;
          exp = new $.watch_closure(target);
        } else {
          t1 = val;
          if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
            t1 = val;
            t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
          } else
            t1 = true;
          if (t1)
            watcherType = $._WatcherType_ORDERED_MAP;
          else {
            t1 = val;
            if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap)
              watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.Primitives_printString("error: evaluating " + $.S(debugName != null ? debugName : "<unnamed>") + " watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
    }

  } else {
    t1 = target;
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList)) {
      exp = new $.watch_closure0(target);
      watcherType = $._WatcherType_LIST;
    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
        exp = new $.watch_closure1(target);
        watcherType = $._WatcherType_LIST;
      } else {
        t1 = target;
        if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
          t1 = target;
          t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
        } else
          t1 = true;
        if (t1) {
          exp = new $.watch_closure2(target);
          watcherType = $._WatcherType_ORDERED_MAP;
        } else {
          t1 = target;
          if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap) {
            exp = new $.watch_closure3(target);
            watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    }
  }
  watcher = $._createWatcher(watcherType, exp, callback, debugName);
  t1 = $._watchers;
  node = t1.add$1(t1, watcher);
  return node.get$remove(node);
};

$._createWatcher = function(type, exp, callback, debugName) {
  switch (type) {
    case $._WatcherType_LIST:
      return $._ListWatcher$(exp, callback, debugName, null);
    case $._WatcherType_ORDERED_MAP:
      return $._OrderDependantMapWatcher$(exp, callback, debugName, null, null);
    case $._WatcherType_HASH_MAP:
      return $._HashMapWatcher$(exp, callback, debugName, null, null);
    default:
      return $._Watcher$(exp, callback, debugName);
  }
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res, value;
  res = $.watch(exp, callback, debugName);
  value = typeof exp === "function" || typeof exp === "object" && exp !== null && !!$.getInterceptor(exp).$isFunction ? exp.call$0() : exp;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isIterable) && (typeof value !== "object" || value === null || value.constructor !== Array && !$.getInterceptor(value).$isList))
    value = $.toList$0$ax(value);
  callback.call$1($.ChangeNotification$(null, value, null));
  return res;
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName, T);
  return t1;
};

$._HashMapWatcher$ = function(getter, callback, debugName, K, V) {
  var t1 = new $._HashMapWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._Watcher$3(getter, callback, debugName);
  t1._HashMapWatcher$3(getter, callback, debugName, K, V);
  return t1;
};

$._OrderDependantMapWatcher$ = function(getter, callback, debugName, K, V) {
  var t1 = new $._OrderDependantMapWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._Watcher$3(getter, callback, debugName);
  t1._OrderDependantMapWatcher$3(getter, callback, debugName, K, V);
  return t1;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.wrapException.call$1 = $.wrapException;
$.wrapException.$name = "wrapException";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._asyncRunCallback.call$0 = $._asyncRunCallback;
$._asyncRunCallback.$name = "_asyncRunCallback";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$.start.call$1 = $.start;
$.start.$name = "start";
$.linear.call$3 = $.linear;
$.linear.$name = "linear";
$.random.call$3 = $.random;
$.random.$name = "random";
$.inElastic.call$3 = $.inElastic;
$.inElastic.$name = "inElastic";
$.Animatable__ctor.call$0 = $.Animatable__ctor;
$.Animatable__ctor.$name = "Animatable__ctor";
$.onNoop.call$3 = $.onNoop;
$.onNoop.$name = "onNoop";
$.Transform__ctor.call$0 = $.Transform__ctor;
$.Transform__ctor.$name = "Transform__ctor";
$._doNothing.call$0 = $._doNothing;
$._doNothing.$name = "_doNothing";
$.deliverChangesSync.call$0 = $.deliverChangesSync;
$.deliverChangesSync.$name = "deliverChangesSync";
$.defaultObserveUnhandledError.call$4 = $.defaultObserveUnhandledError;
$.defaultObserveUnhandledError.$name = "defaultObserveUnhandledError";
$.Entity.$isEntity = true;
$.Entity.$isEntity = true;
$.Transform.$isPoolable = true;
$.Transform.$isPoolable = true;
$.Transform.$isComponent = true;
$.Transform.$isComponent = true;
$.Particles.$isComponent = true;
$.Particles.$isComponent = true;
$.JSDouble.$isdouble = true;
$.JSDouble.$isdouble = true;
$.JSString.$isString = true;
$.JSString.$isString = true;
$.Constraints.$isComponent = true;
$.Constraints.$isComponent = true;
$.Poolable.$isPoolable = true;
$.Poolable.$isPoolable = true;
$.Component.$isComponent = true;
$.Component.$isComponent = true;
$.Animatable.$isPoolable = true;
$.Animatable.$isPoolable = true;
$.Animatable.$isComponent = true;
$.Animatable.$isComponent = true;
$.Emitter.$isComponent = true;
$.Emitter.$isComponent = true;
$.Drawable.$isComponent = true;
$.Drawable.$isComponent = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.List_Aia = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.Map_Ai46y = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.List_Aia);
$.Type_yPV = $.createRuntimeType('ParticleInfo0s');
$.Window_methods = $.Window.prototype;
$.EventStreamProvider_hashchange = new $.EventStreamProvider("hashchange");
$.Type_iuI = $.createRuntimeType('Drawable');
$.JSNull_methods = $.JSNull.prototype;
$.Type_UAO = $.createRuntimeType('PlayerManager');
$.List_8h5 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.Map_8h6qb = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.List_8h5);
$.C__Random = new $._Random();
$.JSDouble_methods = $.JSDouble.prototype;
$._WatcherType_ORDERED_MAP = new $._WatcherType("ORDERED_MAP");
$.List_http_https_ftp_mailto = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.Type_cGl = $.createRuntimeType('double');
$.Type_8aB = $.createRuntimeType('int');
$.Duration_0 = new $.Duration(0);
$.Type_rpo = $.createRuntimeType('Constraints');
$._WatcherType_HASH_MAP = new $._WatcherType("HASH_MAP");
$.Type_Opk = $.createRuntimeType('Emitter');
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.Type_UU7 = $.createRuntimeType('Transform');
$.Type_bAc = $.createRuntimeType('System_Simulator');
$.NodeList_methods = $.NodeList.prototype;
$._WorkerStub_methods = $._WorkerStub.prototype;
$.Type_a9w = $.createRuntimeType('bool');
$._WatcherType_OTHER = new $._WatcherType("OTHER");
$.Type_I6I = $.createRuntimeType('Animatable');
$.JSArray_methods = $.JSArray.prototype;
$.C_CloseToken = new $.CloseToken();
$.Type_IYi = $.createRuntimeType('String');
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.Type_woc = $.createRuntimeType('Null');
$.Float32List_methods = $.Float32List.prototype;
$.Type_GZG = $.createRuntimeType('Particles');
$._WatcherType_LIST = new $._WatcherType("LIST");
$.Type_Uzk = $.createRuntimeType('GroupManager');
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Device__isOpera = null;
$.Device__isIE = null;
$.__$activeDemo = null;
$.foregroundcolor = 3823368447;
$.ComponentType__nextBit = 1;
$.ComponentType__nextId = 0;
$._SystemBitManager__POS = 0;
$._SystemBitManager__systemBits = null;
$.Observable_$_nextHashCode = 0;
$._activeObserver = null;
$.circularNotifyLimit = 100;
$._changedObjects = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = $.defaultObserveUnhandledError;
$.useObservers = false;
$._watchers = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$not$i = function(receiver) {
  if (typeof receiver == "number" && Math.floor(receiver) == receiver)
    return ~receiver >>> 0;
  return $.getInterceptor$i(receiver).$not(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.add$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).add$2(receiver, a0, a1);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clone$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).clone$0(receiver);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.disabled$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).disabled$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$context2d$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2d(receiver);
};
$.get$hash$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$hash(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$href$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$href(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$newValue$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$newValue(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$right$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$right(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$step$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$step(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.insert$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).insert$0(receiver);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.moveTo$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.scale$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).scale$1(receiver, a0);
};
$.set$color$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$color(receiver, value);
};
$.set$hash$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$hash(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$href$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$href(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$right$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$right(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toInt$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toList$1$growable$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, "__changes", "__changes", "get$__changes", function() {
  return $.Observable$();
});
Isolate.$lazy($, "activeCtrl", "activeCtrl", "get$activeCtrl", function() {
  return $.Future_Future$value($.Ctrl$(), null);
});
Isolate.$lazy($, "foregroundcolors", "foregroundcolors", "get$foregroundcolors", function() {
  var t1 = $.JSArray_methods.map$1($.hsl_tetrad($.irgba_hsl($.foregroundcolor)), new $.closure4());
  return t1.toList$0(t1);
});
Isolate.$lazy($, "foregroundcolorsM", "foregroundcolorsM", "get$foregroundcolorsM", function() {
  var t1 = $.JSArray_methods.map$1($.hsv_monochromatic($.irgba_hsv($.foregroundcolor), 4), new $.closure5());
  return t1.toList$0(t1);
});
Isolate.$lazy($, "initDemo", "initDemo", "get$initDemo", function() {
  return $.makeLiteralMap(["proto2d", new $.closure(), "proto2d + animatable", new $.closure0(), "proto2d + animatable + emitter (particles)", new $.closure1(), "verlet shapes", new $.closure2(), "quadtree", new $.closure3()]);
});
Isolate.$lazy($, "_componentTypes", "ComponentTypeManager__componentTypes", "get$ComponentTypeManager__componentTypes", function() {
  return $.Map_Map($.Type, $.ComponentType);
});
Isolate.$lazy($, "_objectPools", "ObjectPool__objectPools", "get$ObjectPool__objectPools", function() {
  return $.Map_Map($.Type, [$.Bag, $.Poolable]);
});
Isolate.$lazy($, "_randomRatio", "_randomRatio", "get$_randomRatio", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "_random", "_random", "get$_random", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "CT", "Particles_CT", "get$Particles_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_GZG);
});
Isolate.$lazy($, "CT", "ParticleInfo0s_CT", "get$ParticleInfo0s_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_yPV);
});
Isolate.$lazy($, "CT", "Transform_CT", "get$Transform_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_UU7);
});
Isolate.$lazy($, "CT", "Constraints_CT", "get$Constraints_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_rpo);
});
Isolate.$lazy($, "onCircularNotifyLimit", "onCircularNotifyLimit", "get$onCircularNotifyLimit", function() {
  return new $.closure6();
});
// Native classes
$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main0.call$0 = $.main0;
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main0); });
      } else {
        $.startRootIsolate($.main0);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main0); });
  } else {
    $.startRootIsolate($.main0);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=_demos.html_bootstrap.dart.js.map
