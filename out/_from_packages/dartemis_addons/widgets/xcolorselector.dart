// Auto-generated from xcolorselector.html.
// DO NOT EDIT.

library x_colorselector;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:math' as math;
import 'package:web_ui/web_ui.dart';
import 'package:dartemis_toolbox/colors.dart';



/// the main goal of the component is to show feature of colors .
class XColorselector extends WebComponent{
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {".cs_sampletxt":"cs_sampletxt",".cs_samplebox":"cs_samplebox"};

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-colorselector");
  static final __html1 = new autogenerated.BRElement(), __html10 = new autogenerated.BRElement(), __html11 = new autogenerated.Element.html('<span class="cs_sampletxt"></span>'), __html12 = new autogenerated.Element.html('<span class="cs_samplebox" style="background-color:{{irgba_hexHtml(c)}}"></span>'), __html13 = new autogenerated.BRElement(), __html14 = new autogenerated.Element.html('<span class="cs_sampletxt"></span>'), __html15 = new autogenerated.Element.html('<span class="cs_samplebox" style="background-color:{{irgba_hexHtml(c)}}"></span>'), __html2 = new autogenerated.Element.html('<span class="cs_sampletxt"></span>'), __html3 = new autogenerated.Element.html('<span class="cs_samplebox" style="background-color:{{irgba_hexHtml(c)}}"></span>'), __html4 = new autogenerated.BRElement(), __html5 = new autogenerated.Element.html('<span class="cs_sampletxt"></span>'), __html6 = new autogenerated.Element.html('<span class="cs_samplebox" style="background-color:{{irgba_hexHtml(c)}}"></span>'), __html7 = new autogenerated.BRElement(), __html8 = new autogenerated.Element.html('<span class="cs_sampletxt"></span>'), __html9 = new autogenerated.Element.html('<span class="cs_samplebox" style="background-color:{{irgba_hexHtml(c)}}"></span>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <style>
.cs_samplebox {
  width: 3em;
  height: 1em;
  border: 1px solid;
  display: inline-block;
  cursor: pointer;
}
.cs_sampletxt {
  height: 1em;
  width: 5em;
  display: inline-block;
}
</style><div class="container-fluid">
          <div class="span3">
            <canvas class="cs_sv" width="104" height="104"></canvas>
            <canvas class="cs_h" width="14" height="104"></canvas>
          </div>
          <fieldset class="span3">
            <legend>RGB</legend>
            <div><label></label><div class="controls"><input type="range" min="0" max="255" step="1"></div>
            <div><label></label><input type="range" min="0" max="255" step="1"></div>
            <div><label></label><input type="range" min="0" max="255" step="1"></div>
            <div><label>html : </label><input type="text"></div>
            <div><label>irgba : </label><input type="text"></div>
          </div></fieldset>
          <fieldset class="span3">
            <legend>HSV</legend>
            <div><label></label><input type="range" min="0" max="360" step="1"></div>
            <div><label></label><input type="range" min="0" max="100" step="1"></div>
            <div><label></label><input type="range" min="0" max="100" step="1"></div>
          </fieldset>
          <fieldset class="span3">
            <legend>split complement</legend>
            <div>
             <button class="btn">complement</button>
             <button class="btn">greyscale</button>
            </div>
            <div>
              <button class="btn">lighten 10%</button>
              <button class="btn">darken 10%</button>
            </div>
            <div>
              <button class="btn">saturate 10%</button>
              <button class="btn">desaturate 10%</button>
            </div>
            <div>
              <button class="btn">random</button>
            </div>
          </fieldset>
          <fieldset class="span3">
            <legend>triad</legend>
            <div></div>
          </fieldset>
          <fieldset class="span3">
            <legend>tetrad</legend>
            <div></div>
          </fieldset>
          <fieldset class="span3">
            <legend>split complement</legend>
            <div></div>
          </fieldset>
          <fieldset class="span3">
            <legend>analogous</legend>
            <div></div>
          </fieldset>
          <fieldset class="span3">
            <legend>monochromatic</legend>
            <div></div>
          </fieldset>
        </div>
      ''');
  autogenerated.ButtonElement __e21, __e22, __e23, __e24, __e25, __e26, __e27;
  autogenerated.DivElement __e31, __e35, __e39, __e43, __e47;
  autogenerated.InputElement __e10, __e11, __e14, __e17, __e20, __e3, __e6, __e9;
  autogenerated.LabelElement __e13, __e16, __e19, __e2, __e5, __e8;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-colorselector");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e2 = __root.nodes[2].nodes[3].nodes[3].nodes[0];
    var __binding1 = __t.contentBind(() => rStr, false);
    __e2.nodes.addAll([new autogenerated.Text('R : '),
        __binding1]);
    __e3 = __root.nodes[2].nodes[3].nodes[3].nodes[1].nodes[0];
    __t.listen(__e3.onInput, ($event) { rStr = __e3.value; });
    __t.oneWayBind(() => rStr, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
    __e5 = __root.nodes[2].nodes[3].nodes[3].nodes[3].nodes[0];
    var __binding4 = __t.contentBind(() => gStr, false);
    __e5.nodes.addAll([new autogenerated.Text('G : '),
        __binding4]);
    __e6 = __root.nodes[2].nodes[3].nodes[3].nodes[3].nodes[1];
    __t.listen(__e6.onInput, ($event) { gStr = __e6.value; });
    __t.oneWayBind(() => gStr, (e) { if (__e6.value != e) __e6.value = e; }, false, false);
    __e8 = __root.nodes[2].nodes[3].nodes[3].nodes[5].nodes[0];
    var __binding7 = __t.contentBind(() => bStr, false);
    __e8.nodes.addAll([new autogenerated.Text('B : '),
        __binding7]);
    __e9 = __root.nodes[2].nodes[3].nodes[3].nodes[5].nodes[1];
    __t.listen(__e9.onInput, ($event) { bStr = __e9.value; });
    __t.oneWayBind(() => bStr, (e) { if (__e9.value != e) __e9.value = e; }, false, false);
    __e10 = __root.nodes[2].nodes[3].nodes[3].nodes[7].nodes[1];
    __t.listen(__e10.onInput, ($event) { hex_html = __e10.value; });
    __t.oneWayBind(() => hex_html, (e) { if (__e10.value != e) __e10.value = e; }, false, false);
    __e11 = __root.nodes[2].nodes[3].nodes[3].nodes[9].nodes[1];
    __t.listen(__e11.onInput, ($event) { hex_irgba = __e11.value; });
    __t.oneWayBind(() => hex_irgba, (e) { if (__e11.value != e) __e11.value = e; }, false, false);
    __e13 = __root.nodes[2].nodes[5].nodes[3].nodes[0];
    var __binding12 = __t.contentBind(() => hStr, false);
    __e13.nodes.addAll([new autogenerated.Text('H : '),
        __binding12,
        new autogenerated.Text('Â°')]);
    __e14 = __root.nodes[2].nodes[5].nodes[3].nodes[1];
    __t.listen(__e14.onInput, ($event) { hStr = __e14.value; });
    __t.oneWayBind(() => hStr, (e) { if (__e14.value != e) __e14.value = e; }, false, false);
    __e16 = __root.nodes[2].nodes[5].nodes[5].nodes[0];
    var __binding15 = __t.contentBind(() => sStr, false);
    __e16.nodes.addAll([new autogenerated.Text('S : '),
        __binding15,
        new autogenerated.Text('%')]);
    __e17 = __root.nodes[2].nodes[5].nodes[5].nodes[1];
    __t.listen(__e17.onInput, ($event) { sStr = __e17.value; });
    __t.oneWayBind(() => sStr, (e) { if (__e17.value != e) __e17.value = e; }, false, false);
    __e19 = __root.nodes[2].nodes[5].nodes[7].nodes[0];
    var __binding18 = __t.contentBind(() => vStr, false);
    __e19.nodes.addAll([new autogenerated.Text('V : '),
        __binding18,
        new autogenerated.Text('%')]);
    __e20 = __root.nodes[2].nodes[5].nodes[7].nodes[1];
    __t.listen(__e20.onInput, ($event) { vStr = __e20.value; });
    __t.oneWayBind(() => vStr, (e) { if (__e20.value != e) __e20.value = e; }, false, false);
    __e21 = __root.nodes[2].nodes[7].nodes[3].nodes[1];
    __t.listen(__e21.onClick, ($event) { complement(); });
    __e22 = __root.nodes[2].nodes[7].nodes[3].nodes[3];
    __t.listen(__e22.onClick, ($event) { greyscale(); });
    __e23 = __root.nodes[2].nodes[7].nodes[5].nodes[1];
    __t.listen(__e23.onClick, ($event) { lighten(); });
    __e24 = __root.nodes[2].nodes[7].nodes[5].nodes[3];
    __t.listen(__e24.onClick, ($event) { darken(); });
    __e25 = __root.nodes[2].nodes[7].nodes[7].nodes[1];
    __t.listen(__e25.onClick, ($event) { saturate(); });
    __e26 = __root.nodes[2].nodes[7].nodes[7].nodes[3];
    __t.listen(__e26.onClick, ($event) { desaturate(); });
    __e27 = __root.nodes[2].nodes[7].nodes[9].nodes[1];
    __t.listen(__e27.onClick, ($event) { random(); });
    __e31 = __root.nodes[2].nodes[9].nodes[3];
    __t.loopIterateAttr(__e31, () => triad, ($list, $index, __t) {
      var c = $list[$index];
      var __e29, __e30;
      __e29 = __html2.clone(true);
      var __binding28 = __t.contentBind(() => irgba_hexString(c), false);
      __e29.nodes.add(__binding28);
      __e30 = __html3.clone(true);
      __t.listen(__e30.onClick, ($event) { color = c; });
      __t.bind(() => irgba_hexHtml(c),  (__e) { __e30.attributes['style'] = 'background-color:${__e.newValue}'; }, false);
    __t.addAll([new autogenerated.Text('\n              '),
        __e29,
        new autogenerated.Text('\n              '),
        __e30,
        new autogenerated.Text('\n              '),
        __html1.clone(true),
        new autogenerated.Text('\n            ')]);
    });
    __e35 = __root.nodes[2].nodes[11].nodes[3];
    __t.loopIterateAttr(__e35, () => tetrad, ($list, $index, __t) {
      var c = $list[$index];
      var __e33, __e34;
      __e33 = __html5.clone(true);
      var __binding32 = __t.contentBind(() => irgba_hexString(c), false);
      __e33.nodes.add(__binding32);
      __e34 = __html6.clone(true);
      __t.listen(__e34.onClick, ($event) { color = c; });
      __t.bind(() => irgba_hexHtml(c),  (__e) { __e34.attributes['style'] = 'background-color:${__e.newValue}'; }, false);
    __t.addAll([new autogenerated.Text('\n              '),
        __e33,
        new autogenerated.Text('\n              '),
        __e34,
        new autogenerated.Text('\n              '),
        __html4.clone(true),
        new autogenerated.Text('\n            ')]);
    });
    __e39 = __root.nodes[2].nodes[13].nodes[3];
    __t.loopIterateAttr(__e39, () => splitcomplement, ($list, $index, __t) {
      var c = $list[$index];
      var __e37, __e38;
      __e37 = __html8.clone(true);
      var __binding36 = __t.contentBind(() => irgba_hexString(c), false);
      __e37.nodes.add(__binding36);
      __e38 = __html9.clone(true);
      __t.listen(__e38.onClick, ($event) { color = c; });
      __t.bind(() => irgba_hexHtml(c),  (__e) { __e38.attributes['style'] = 'background-color:${__e.newValue}'; }, false);
    __t.addAll([new autogenerated.Text('\n              '),
        __e37,
        new autogenerated.Text('\n              '),
        __e38,
        new autogenerated.Text('\n              '),
        __html7.clone(true),
        new autogenerated.Text('\n            ')]);
    });
    __e43 = __root.nodes[2].nodes[15].nodes[3];
    __t.loopIterateAttr(__e43, () => analogous, ($list, $index, __t) {
      var c = $list[$index];
      var __e41, __e42;
      __e41 = __html11.clone(true);
      var __binding40 = __t.contentBind(() => irgba_hexString(c), false);
      __e41.nodes.add(__binding40);
      __e42 = __html12.clone(true);
      __t.listen(__e42.onClick, ($event) { color = c; });
      __t.bind(() => irgba_hexHtml(c),  (__e) { __e42.attributes['style'] = 'background-color:${__e.newValue}'; }, false);
    __t.addAll([new autogenerated.Text('\n              '),
        __e41,
        new autogenerated.Text('\n              '),
        __e42,
        new autogenerated.Text('\n              '),
        __html10.clone(true),
        new autogenerated.Text('\n            ')]);
    });
    __e47 = __root.nodes[2].nodes[17].nodes[3];
    __t.loopIterateAttr(__e47, () => monochromatic, ($list, $index, __t) {
      var c = $list[$index];
      var __e45, __e46;
      __e45 = __html14.clone(true);
      var __binding44 = __t.contentBind(() => irgba_hexString(c), false);
      __e45.nodes.add(__binding44);
      __e46 = __html15.clone(true);
      __t.listen(__e46.onClick, ($event) { color = c; });
      __t.bind(() => irgba_hexHtml(c),  (__e) { __e46.attributes['style'] = 'background-color:${__e.newValue}'; }, false);
    __t.addAll([new autogenerated.Text('\n              '),
        __e45,
        new autogenerated.Text('\n              '),
        __e46,
        new autogenerated.Text('\n              '),
        __html13.clone(true),
        new autogenerated.Text('\n            ')]);
    });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e2 = __e3 = __e5 = __e6 = __e8 = __e9 = __e10 = __e11 = __e13 = __e14 = __e16 = __e17 = __e19 = __e20 = __e21 = __e22 = __e23 = __e24 = __e25 = __e26 = __e27 = __e31 = __e35 = __e39 = __e43 = __e47 = null;
  }

  /** Original code from the component. */


  int _color = 0xaaaaaaff;

  @observable
  get color => _color;
  @observable
  set color(v){
    _color = v;
    refresh();
  }

  @observable
  get hex_html => irgba_hexHtml(color);
  @observable
  set hex_html(s){
    color = hexHtml_irgba(s);
  }

  @observable
  get hex_irgba => irgba_hexString(color);
  @observable
  set hex_irgba(s){
    color = hexString_irgba(s);
  }

  @observable
  get rStr => irgba_r255(color).toString();
  @observable
  set rStr(s) {
    if (s == null || s.length < 1) s = "0";
    color = irgba_r255_set(color, int.parse(s, radix : 10));
  }

  @observable
  get gStr => irgba_g255(color).toString();
  @observable
  set gStr(s) {
    if (s == null || s.length < 1) s = "0";
    color = irgba_g255_set(color, int.parse(s, radix : 10));
  }

  @observable
  get bStr => irgba_b255(color).toString();
  @observable
  set bStr(s) {
    if (s == null || s.length < 1) s = "0";
    color = irgba_b255_set(color, int.parse(s, radix : 10));
  }

  @observable
  get hStr => (irgba_hsv(color)[0] * 360).toInt().toString();
  @observable
  set hStr(s) {
    if (s == null || s.length < 1) s = "0";
    var hsv = irgba_hsv(color);
    hsv[0] = int.parse(s, radix : 10) / 360.0;
    color = hsv_irgba(hsv);
  }

  @observable
  get sStr => (irgba_hsv(color)[1] * 100).toInt().toString();
  @observable
  set sStr(s) {
    if (s == null || s.length < 1) s = "0";
    var hsv = irgba_hsv(color);
    hsv[1] = int.parse(s, radix : 10) / 100.0;
    color = hsv_irgba(hsv);
  }

  @observable
  get vStr => (irgba_hsv(color)[2] * 100).toInt().toString();
  @observable
  set vStr(s) {
    if (s == null || s.length < 1) s = "0";
    var hsv = irgba_hsv(color);
    hsv[2] = int.parse(s, radix : 10) / 100.0;
    color = hsv_irgba(hsv);
  }

  @observable
  get triad => hsl_triad(irgba_hsl(color)).map(hsl_irgba);

  @observable
  get tetrad => hsl_tetrad(irgba_hsl(color)).map(hsl_irgba);

  @observable
  get splitcomplement => hsl_splitcomplement(irgba_hsl(color)).map(hsl_irgba);

  @observable
  get analogous => hsl_analogous(irgba_hsl(color)).map(hsl_irgba);

  @observable
  get monochromatic => hsv_monochromatic(irgba_hsv(color)).map(hsv_irgba);

//  irgba_hex(List<double> hsl) => irgba_hexString(hsl_irgba(hsl));
//  irgba_html() => irgba_hexHtml(irgba(hsl));

  complement() {
    color = hsl_irgba(hsl_complement(irgba_hsl(color)));
  }

  saturate() {
    color = hsl_irgba(hsl_saturate(irgba_hsl(color)));
  }

  desaturate() {
    color = hsl_irgba(hsl_desaturate(irgba_hsl(color)));
  }

  greyscale() {
    color = hsl_irgba(hsl_greyscale(irgba_hsl(color)));
  }

  lighten() {
    color = hsl_irgba(hsl_lighten(irgba_hsl(color)));
  }

  darken() {
    color = hsl_irgba(hsl_darken(irgba_hsl(color)));
  }

  random() {
    color = random_irgba();
  }
  /// An common optimisation is to use a color + bacground image with alpha
  /// like done by yui-color-picker [sample](http://www.colorspire.com/s/j/yui282/asset/picker_mask.png)
  draw_sv() {
    var c = this.query('canvas.cs_sv') as CanvasElement;
    var g = c.context2d;
    var sel = 2;
    var w1 = (c.width - 2 * sel)/ 100.0;
    var h1 = (c.height - 2 * sel)/ 100.0;
    var hsv = irgba_hsv(color);
    g.clearRect(0,0, c.width, c.height);
    for(var s0 = 0; s0 < 101; ++s0) {
      for(var v0 = 0; v0 < 101; ++v0) {
        g.fillStyle = irgba_hexHtml(hsv_irgba([hsv[0], s0/100, v0/100]));
        g.fillRect((100 - s0) * w1 + sel, (100 - v0) * h1 + sel, w1, h1);
      }
    }
    g.beginPath();
    g.arc((100 - hsv[1] * 100) * w1 + sel, (100 - hsv[2] * 100) * h1 + sel, sel + math.max(h1, w1), 0, 2 * math.PI);
    g.closePath();
    g.strokeStyle = '#000000';
    g.stroke();
  }

  /// An common optimisation is to use a image for the hue bar
  draw_h() {
    var c = this.query('canvas.cs_h') as CanvasElement;
    var g = c.context2d;
    var sel = 2;
    var w1 = c.width - (2 * sel);
    var h1 = (c.height - (2 * sel))/ 100.0;
    var h0 = irgba_hsv(color)[0];
    g.clearRect(0,0, c.width, c.height);
    for(var y = 0; y < 101; ++y) {
      var s = irgba_hexHtml(hsv_irgba([y/100.0, 1.0, 1.0]));
      //var s = 'rgb(${(y*255/100).toInt()}, 0, 0)';
      g.fillStyle = s;
      g.fillRect(sel, (y * h1) + sel, w1, h1);
    }
    g.strokeStyle = '#000000';
    g.strokeRect(0, (h0 * 100 * h1) + sel, w1 + 2 * sel, h1 + 2 * sel);
  }

  void inserted() {
    color = random_irgba();
    refresh();
  }

  void refresh() {
    draw_sv();
    draw_h();
  }
}

//@ sourceMappingURL=xcolorselector.dart.map