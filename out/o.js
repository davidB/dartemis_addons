// Generated by dart2js, the Dart to JavaScript compiler version: 0.6.5.0_r25017.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "_HTMLElement;hash%,href%,name=,type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "_HTMLElement;hash=,href%"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "_HTMLElement;"};

$$.BaseElement = {"": "_HTMLElement;href%"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;size=,type="};

$$.BodyElement = {"": "_HTMLElement;"};

$$.ButtonElement = {"": "_HTMLElement;name=,type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "_HTMLElement;height=,width=",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  },
  get$context2d: function(receiver) {
    return this.get$context2D(receiver);
  },
  $isCanvasElement: true,
  $asCanvasElement: null
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;fillStyle},font},lineWidth},strokeStyle}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text, x, y, maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  getImageData$4: function(receiver, sx, sy, sw, sh) {
    return $.convertNativeToDart_ImageData(receiver.getImageData(sx, sy, sw, sh));
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  putImageData$7: function(receiver, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
    if (true) {
      receiver.putImageData($.convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    }
    throw $.wrapException($.ArgumentError$("Incorrect number or type of arguments"));
  },
  putImageData$3: function($receiver, imagedata, dx, dy) {
    return this.putImageData$7($receiver, imagedata, dx, dy, null, null, null, null);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  strokeRect$4: function(receiver, x, y, width, height) {
    return receiver.strokeRect(x, y, width, height);
  },
  strokeText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.strokeText(text, x, y, maxWidth);
  },
  strokeText$3: function($receiver, text, x, y) {
    return $receiver.strokeText(text, x, y);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  arc$5: function($receiver, x, y, radius, startAngle, endAngle) {
    return this.arc$6($receiver, x, y, radius, startAngle, endAngle, false);
  },
  set$lineDashOffset: function(receiver, value) {
    return typeof receiver.lineDashOffset != "undefined" ? receiver.lineDashOffset = value : receiver.webkitLineDashOffset = value;
  }
};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "_HTMLElement;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "_HTMLElement;"};

$$.DataListElement = {"": "_HTMLElement;"};

$$.DetailsElement = {"": "_HTMLElement;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DialogElement = {"": "_HTMLElement;"};

$$.DivElement = {"": "_HTMLElement;"};

$$.Document = {"": "Node;children=",
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver, null);
    return receiver._children;
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), false, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;id=,innerHtml:innerHTML},$$dom_children:children=,$$dom_className:className%,tagName=",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  get$classes: function(receiver) {
    return $._ElementCssClassSet$(receiver);
  },
  get$xtag: function(receiver) {
    var t1 = receiver._xtag;
    return t1 != null ? t1 : receiver;
  },
  set$xtag: function(receiver, value) {
    receiver._xtag = value;
  },
  get$localName: function(receiver) {
    return receiver.localName;
  },
  toString$0: function(receiver) {
    return this.get$localName(receiver);
  },
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    throw $.wrapException($.UnsupportedError$("Not supported on this platform"));
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  createShadowRoot$0: function(receiver) {
    return receiver.webkitCreateShadowRoot();
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "_HTMLElement;height=,name=,type=,width="};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;type=", $isEvent: true, $asEvent: null};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;"};

$$.FieldSetElement = {"": "_HTMLElement;name=,type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.File = {"": "Blob;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "_HTMLElement;length=,name=",
  reset$0: function(receiver) {
    return receiver.reset();
  }
};

$$.HRElement = {"": "_HTMLElement;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "_HTMLElement;"};

$$.HeadingElement = {"": "_HTMLElement;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "_HTMLElement;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "_HTMLElement;height=,name=,width="};

$$.ImageData = {"": "Interceptor;", $isImageData: true, $asImageData: null};

$$.ImageElement = {"": "_HTMLElement;height=,width=,x=,y="};

$$.InputElement = {"": "_HTMLElement;height=,max=,min=,name=,size=,type=,value%,width=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  },
  $isElement: true,
  $asElement: null,
  $isNode: true,
  $asNode: null
};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "_HTMLElement;name=,type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.LIElement = {"": "_HTMLElement;type=,value%"};

$$.LabelElement = {"": "_HTMLElement;"};

$$.LegendElement = {"": "_HTMLElement;"};

$$.LinkElement = {"": "_HTMLElement;href%,type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.Location = {"": "Interceptor;hash%,href%",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  $asLocation: null
};

$$.MapElement = {"": "_HTMLElement;name="};

$$.MediaElement = {"": "_HTMLElement;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaKeyMessageEvent = {"": "Event;"};

$$.MediaKeyNeededEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "_HTMLElement;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "_HTMLElement;name="};

$$.MeterElement = {"": "_HTMLElement;max=,min=,value%"};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiInput = {"": "MidiPort;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.MidiOutput = {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  }
};

$$.MidiPort = {"": "EventTarget;id=,type="};

$$.ModElement = {"": "_HTMLElement;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;newValue="};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;$$dom_namespaceUri:namespaceURI=,nextNode:nextSibling=,parent:parentElement=,parentNode=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  insertAllBefore$2: function(receiver, newNodes, refChild) {
    var t1, len, i;
    if (typeof newNodes === "object" && newNodes !== null && !!$.getInterceptor(newNodes).$is_ChildNodeListLazy) {
      t1 = newNodes._this;
      if (t1 === receiver)
        throw $.wrapException($.ArgumentError$(newNodes));
      len = newNodes.get$length(newNodes);
      if (typeof len !== "number")
        throw $.iae(len);
      i = 0;
      for (; i < len; ++i)
        receiver.insertBefore(t1.firstChild, refChild);
    } else
      for (t1 = $.get$iterator$ax(newNodes); t1.moveNext$0() === true;)
        receiver.insertBefore(t1.get$current(), refChild);
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "_HTMLElement;type=",
  start$0: function($receiver) {
    return this.start.call$0();
  }
};

$$.ObjectElement = {"": "_HTMLElement;height=,name=,type=,width="};

$$.OptGroupElement = {"": "_HTMLElement;",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OptionElement = {"": "_HTMLElement;value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.OutputElement = {"": "_HTMLElement;name=,type=,value%"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "_HTMLElement;"};

$$.ParamElement = {"": "_HTMLElement;name=,value%"};

$$.Performance = {"": "EventTarget;"};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "_HTMLElement;", $isPreElement: true, $asPreElement: null};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "_HTMLElement;max=,value%"};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "_HTMLElement;"};

$$.ResourceProgressEvent = {"": "ProgressEvent;"};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "_HTMLElement;type="};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "_HTMLElement;length=,name=,size=,type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.ShadowElement = {"": "_HTMLElement;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
};

$$.SourceElement = {"": "_HTMLElement;type="};

$$.SpanElement = {"": "_HTMLElement;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;key=,newValue=,oldValue="};

$$.StyleElement = {"": "_HTMLElement;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.TableCaptionElement = {"": "_HTMLElement;"};

$$.TableCellElement = {"": "_HTMLElement;", $isTableCellElement: true, $asTableCellElement: null};

$$.TableColElement = {"": "_HTMLElement;"};

$$.TableElement = {"": "_HTMLElement;caption=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$(receiver.tBodies, $.TableSectionElement);
  },
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "_HTMLElement;",
  get$cells: function(receiver) {
    return $._WrappedList$(receiver.cells, $.TableCellElement);
  },
  $isTableRowElement: true,
  $asTableRowElement: null
};

$$.TableSectionElement = {"": "_HTMLElement;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  },
  $isTableSectionElement: true,
  $asTableSectionElement: null
};

$$.TemplateElement = {"": "_HTMLElement;"};

$$.Text = {"": "CharacterData;", $isText: true, $asText: null};

$$.TextAreaElement = {"": "_HTMLElement;name=,rows=,type=,value%",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.TextEvent = {"": "UIEvent;"};

$$.TitleElement = {"": "_HTMLElement;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "_HTMLElement;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "_HTMLElement;"};

$$.UnknownElement = {"": "_HTMLElement;"};

$$.VideoElement = {"": "MediaElement;height=,width="};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;",
  get$location: function(receiver) {
    var result = this.get$_location(receiver);
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = $._LocationWrapper$(result);
    return receiver._location_wrapper;
  },
  get$_location: function(receiver) {
    return receiver.location;
  },
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  stop$0: function(receiver) {
    return receiver.stop();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._Attr = {"": "Node;name=,value%"};

$$._Entity = {"": "Node;"};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;href="};

$$.AltGlyphElement = {"": "TextPositioningElement;href="};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;type=,height=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.FEMergeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y=,z="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y=,z="};

$$.FETileElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;type=,height=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;type=,href="};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;type=",
  disabled$1: function($receiver, arg0) {
    return this.disabled.call$1(arg0);
  }
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = $._AttributeClassSet$(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver, $.Element);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;href="};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y=,href="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;href="};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.ByteBuffer = {"": "Interceptor;"};

$$.TypedData = {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw $.wrapException($.RangeError$range(index, 0, $length));
    else
      throw $.wrapException($.ArgumentError$("Invalid list index " + $.S(index)));
  }
};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  }
};

$$.Uint8List = {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.BoundClosure$2 = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  }
};

$$.BoundClosure$1 = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  }
};

$$.Bound__onPause__BufferingStreamSubscription = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound__onResume__BufferingStreamSubscription = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound__onPause__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound__onResume__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound__handleDone__ForwardingStreamSubscription = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound__run__ZoneTimer = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Bound_remove_LinkedListNode = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target](this._liblib2$_receiver);
  },
  $is_void_: true
};

$$.BoundClosure$i1 = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$1: function(p0) {
    return this._self[this._target](this._liblib2$_receiver, p0);
  }
};

$$.Bound__unobserve__ExpressionObserver = {"": "BoundClosure;_self,_target,_liblib2$_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$_throwFormatException = {"": "Closure;call$1,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$isAssignable = {"": "Closure;call$2,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$main = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$ctor = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$reset = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$demo_proto2d = {"": "Closure;call$1,$name"};

$$.Closure$start = {"": "Closure;call$1,$name"};

$$.Closure$linear = {"": "Closure;call$3,$name"};

$$.Closure$random = {"": "Closure;call$3,$name"};

$$.Closure$inElastic = {"": "Closure;call$3,$name"};

$$.Closure$_ctor = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$onNoop = {"": "Closure;call$3,$name"};

$$.Closure$_ctor0 = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$_doNothing = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$deliverChangesSync = {"": "Closure;call$0,$name", $is_void_: true};

$$.Closure$defaultObserveUnhandledError = {"": "Closure;call$4,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  init.getterPrefix = "get$";
  init.setterPrefix = "set$";
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar == "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
      } else if (firstChar == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[previousProperty = property] = element;
        functions.push(property);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["_interceptors", "dart:_interceptors", , {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  },
  get$runtimeType: function(receiver) {
    return $.getRuntimeType(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_a9w;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_woc;
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return;
  }
},

JSArray: {"": "List/Interceptor;",
  checkGrowable$1: function(receiver, reason) {
    if (!!receiver.fixed$length)
      throw $.wrapException($.UnsupportedError$(reason));
  },
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    this.checkGrowable$1(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  where$1: function(receiver, f) {
    return $.IterableMixinWorkaround_where(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.IterableMixinWorkaround_mapList(receiver, f);
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw $.wrapException($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], other))
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  toString$0: function(receiver) {
    return $.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var $arguments, t1, t2;
    $arguments = $.getRuntimeTypeArguments(receiver, "JSArray");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = new $.ListIterator(receiver, receiver.length, 0, null);
    $.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(newLength)));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true, $asJSArray: function () { return [null]; }, $asList: function () { return [null]; }, $asIterable: function () { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = this.truncateToDouble$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  floor$0: function(receiver) {
    return this.toInt$0(this.floorToDouble$0(receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  ceilToDouble$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floorToDouble$0: function(receiver) {
    return Math.floor(receiver);
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  truncateToDouble$0: function(receiver) {
    return receiver < 0 ? this.ceilToDouble$0(receiver) : this.floorToDouble$0(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_8aB;
  },
  $not: function(receiver) {
    return ~receiver >>> 0;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_cGl;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      if (t3 >= t2)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw $.wrapException($.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern == receiver.substring(index, endIndex);
    return this.matchAsPrefix$2(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.wrapException($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, i;
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + receiver.length));
    return receiver.indexOf(pattern, start);
    for (t1 = receiver.length, i = start; i <= t1; ++i)
      if (this.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    if (startIndex < 0 || startIndex > receiver.length)
      throw $.wrapException($.RangeError$range(startIndex, 0, receiver.length));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_IYi;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $isString: true
},

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

dispatchRecordInterceptor: function(record) {
  return record.i;
},

dispatchRecordProto: function(record) {
  return record.p;
},

dispatchRecordExtension: function(record) {
  return record.e;
},

dispatchRecordIndexability: function(record) {
  return record.x;
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = $.dispatchRecordProto(record);
    if (false === proto)
      return $.dispatchRecordInterceptor(record);
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return $.dispatchRecordInterceptor(record);
    if ($.dispatchRecordExtension(record) === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_liblib10$_port<",
  add$1: function(_, message) {
    var t1 = this._liblib10$_port;
    t1.send$1(t1, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._liblib10$_port, other.get$_liblib10$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._liblib10$_port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function () { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.JSInt, $._IsolateContext);
    this.managers = $.Map_Map($.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
},

_IsolateContext: {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $._globalState().currentContext;
    $._globalState().currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $._globalState().currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $._globalState().isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $._globalState().isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map($.JSInt, $.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true
},

_EventLoop: {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($._globalState().rootContext != null)
      if ($._globalState().isolates.containsKey$1($._globalState().rootContext.id))
        if ($._globalState().fromCommandLine === true) {
          var t1 = $._globalState().rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.wrapException($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2 = t2.get$isEmpty(t2) && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($._globalState().isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true,
  $is_void_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
},

_MainManagerStub: {"": "Object;",
  postMessage$1: function(_, msg) {
    self.postMessage(msg);
  }
},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true,
  $is_void_: true
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer(null);
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_closure(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_liblib10$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $._globalState().isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib10$_callback() == null)
      return;
    shouldSerialize = $._globalState().currentContext != null && !$.$eq($._globalState().currentContext.id, t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $._globalState().topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true,
  $is_void_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib10$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._liblib10$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true,
  $is_void_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($._globalState().isWorker === true) {
      t1 = $._globalState().mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $._globalState().managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true,
  $is_void_: true
},

ReceivePortImpl: {"": "Object;_liblib10$_id<,_liblib10$_callback<",
  _liblib10$_callback$2: function(arg0, arg1) {
    return this._liblib10$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib10$_callback = onMessage;
  },
  close$0: function(_) {
    this._liblib10$_callback = null;
    $._globalState().currentContext.unregister$1(this._liblib10$_id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $._globalState().currentContext.id);
  },
  ReceivePortImpl$0: function() {
    var t1 = $._globalState().currentContext;
    t1.register$2(t1, this._liblib10$_id, this);
  },
  $isReceivePort: true
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._liblib10$_port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $._globalState().currentManagerId, port._isolateId, port._receivePort.get$_liblib10$_id()];
  },
  visitWorkerSendPort$1: function(port) {
    return ["sendport", port._workerId, port._isolateId, port._receivePortId];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._liblib10$_port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._liblib10$_port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $._globalState().currentManagerId)) {
      t1 = $._globalState().isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.Map_Map(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if ($._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = $.Map_Map(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, new $.TimerImpl_internalCallback(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  },
  $isFunction: true,
  $is_void_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $._globalState().topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  $isFunction: true,
  $is_void_: true
},

JsIsolateSink$fromPort: function(_port) {
  return new $.JsIsolateSink(false, _port);
},

_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $._globalState().topEventLoop.run$0();
  return result;
},

_currentIsolate: function() {
  return $._globalState().currentContext;
},

startRootIsolate: function(entry) {
  var rootContext;
  $._globalState0($._Manager$(entry));
  if ($._globalState().isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().rootContext = rootContext;
  $._globalState().currentContext = rootContext;
  rootContext.eval$1(entry);
  $._globalState().topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_globalState0: function(val) {
  $globalState = val;
},

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
},

_EventLoop$: function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
},

_IsolateEvent$: function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
},

_MainManagerStub$: function() {
  return new $._MainManagerStub();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives_computeGlobalThis: function() {
  return function() { return this; }();
},

IsolateNatives__getEventData: function(e) {
  return e.data;
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage($.IsolateNatives__getEventData(e));
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $._globalState().currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $._globalState().entry : $.IsolateNatives__getJSFunctionFromName(functionName);
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $._globalState().topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $._globalState().currentContext = context;
      $._globalState().topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $._globalState().topEventLoop.run$0();
      break;
    case "close":
      t1 = $._globalState().managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $._globalState().topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($._globalState().isWorker === true) {
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, exception;
  if ($._globalState().isWorker === true) {
    t1 = $._globalState().mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.IsolateNatives__consoleLog(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($.Exception_Exception(trace));
    }

},

IsolateNatives__consoleLog: function(msg) {
  $.get$globalThis().console.log(msg);
},

IsolateNatives__getJSFunctionFromName: function(functionName) {
  return $[functionName];
},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  $.send$2$x(replyTo, "spawned", $.port().toSendPort$0());
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $._globalState();
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $._globalState().managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_NativeJsSendPort$: function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
},

_WorkerSendPort$: function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Future_wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_PendingSendPortFinder$: function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
},

_serializeMessage: function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
},

_deserializeMessage: function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
},

_JsSerializer$: function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
},

_JsCopier$: function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
},

_JsDeserializer$: function() {
  return new $._JsDeserializer(null);
},

_JsVisitedMap$: function() {
  return new $._JsVisitedMap(null);
},

_MessageTraverserVisitedMap$: function() {
  return new $._MessageTraverserVisitedMap();
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

hasTimer: function() {
  return $.get$globalThis().setTimeout != null;
}}],
["_js_helper", "dart:_js_helper", , {
ConstantMap: {"": "Object;length>,_jsObject,_liblib2$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__"))
      return false;
    return $.jsHasOwnProperty(this._jsObject, key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib2$_keys, new $.ConstantMap_forEach_closure(this, f));
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._liblib2$_keys, new $.ConstantMap_values_closure(this));
  },
  get$isEmpty: function(_) {
    var t1 = this.length;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.wrapException($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  clear$0: function(_) {
    return this._throwUnmodifiable$0();
  },
  addAll$1: function(_, other) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true,
  $asMap: function (V) { return [$.JSString, V]; }
},

ConstantMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
},

ConstantMap_values_closure: {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
},

ConstantProtoMap: {"": "ConstantMap;_protoValue,length,_jsObject,_liblib2$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__"))
      return true;
    return $.ConstantMap.prototype.containsKey$1.call(this, key);
  },
  $index: function(_, key) {
    if (typeof key !== "string")
      return this.$$index$bailout1(1, key);
    if (key === "__proto__")
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $$index$bailout1: function(state0, key) {
    if ($.$eq(key, "__proto__"))
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $asConstantMap: null,
  $asMap: function (V) { return [$.JSString, V]; }
},

_ConstantMapKeyIterable: {"": "IterableBase;_liblib2$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib2$_map._liblib2$_keys);
  },
  $asIterableBase: function () { return [$.JSString]; },
  $asIterable: function () { return [$.JSString]; }
},

DartError: {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true,
  $is_void_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
},

BoundClosure: {"": "Closure;_self,_target,_liblib2$_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._liblib2$_receiver === other._liblib2$_receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._liblib2$_receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name"},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

CastErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
},

FallThroughErrorImplementation: {"": "FallThroughError;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

TypeImpl: {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true,
  $isType: true
},

JSSyntaxRegExp: {"": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = $.JSSyntaxRegExp_makeNative(this.get$_pattern(), this.get$_isMultiLine(), this.get$_isCaseSensitive(), true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  get$_pattern: function() {
    return this._nativeRegExp.source;
  },
  get$_isMultiLine: function() {
    return this._nativeRegExp.multiline;
  },
  get$_isCaseSensitive: function() {
    return !this._nativeRegExp.ignoreCase;
  },
  firstMatch$1: function(str) {
    var m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    return $._MatchImplementation$(this, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return $._MatchImplementation$(this, match);
  },
  $isJSSyntaxRegExp: true
},

_MatchImplementation: {"": "Object;pattern,_match",
  get$start: function(_) {
    return this._match.index;
  },
  start$0: function($receiver) {
    return this.get$start($receiver).call$0();
  },
  group$1: function(index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  _MatchImplementation$2: function(pattern, _match) {
  },
  $isMatch: true
},

_AllMatchesIterable: {"": "IterableBase;_re,_string",
  get$iterator: function(_) {
    return new $._AllMatchesIterator(this._re, this._string, null);
  },
  $asIterableBase: function () { return [$.Match]; },
  $asIterable: function () { return [$.Match]; }
},

_AllMatchesIterator: {"": "Object;_regExp,_string,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this._liblib2$_current;
    if (t1 != null) {
      t1.get$end;
      t2 = t1.get$start(t1);
      t1 = t1._match;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = $.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      index = t2 + t1;
      t1 = this._liblib2$_current;
      t1.get$start;
      if (t1._match.index === index)
        ++index;
    } else
      index = 0;
    this._liblib2$_current = this._regExp._execGlobal$2(this._string, index);
    if (this._liblib2$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  }
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (typeof g !== "number")
      return this.$$index$bailout(1, g);
    if (g !== 0)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  },
  $$index$bailout: function(state0, g) {
    if (!$.$eq(g, 0))
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  },
  start$0: function($receiver) {
    return this.start.call$0();
  },
  $isMatch: true
},

_ConstantMapKeyIterable$: function(_map) {
  return new $._ConstantMapKeyIterable(_map);
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = $.dispatchRecordIndexability(record);
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives__throwFormatException: function(string) {
  throw $.wrapException($.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  handleError = $.Primitives__throwFormatException$closure;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw $.ioore(2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw $.ioore(3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  radix = 10;
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

Primitives_formatType: function(className, typeArguments) {
  return $.S(className) + $.joinArguments(typeArguments, 0);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  return $.Primitives_formatType($name, $.getRuntimeTypeInfo(object));
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newGrowableList: function($length) {
  return new Array($length);
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = $.ListIterator$(codePoints, $.getRuntimeTypeArgument(codePoints, "JSArray", 0)); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException(new $.ArgumentError(i));
  }
  return $.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i < 0)
      throw $.wrapException(new $.ArgumentError(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : $.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : $.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : $.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : $.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : $.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : $.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException($.RangeError$value(index));
},

checkNull: function(object) {
  if (object == null)
    throw $.wrapException($.ArgumentError$(null));
  return object;
},

checkNum: function(value) {
  if (typeof value !== "number")
    throw $.wrapException($.ArgumentError$(value));
  return value;
},

checkString: function(value) {
  if (typeof value !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return value;
},

wrapException: function(ex) {
  var wrapper = $.DartError$(ex == null ? $.NullThrownError$() : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError$: function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (!$.contains(message, "JSNull")) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (!$.contains(message, " has no method "))
          if (!$.contains(message, " is not a function"))
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", message, [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && $.contains(message, "call stack"))
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return $._StackTrace$(exception.stack);
  else
    return;
},

_StackTrace$: function(_stack) {
  return new $._StackTrace(_stack);
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

jsHasOwnProperty: function(jsObject, property) {
  return jsObject.hasOwnProperty(property);
},

propertyTypeCastError: function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.wrapException($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

propertyTypeCast: function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && $.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
},

listSuperNativeTypeCast: function(value, property) {
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList) || value == null)
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  $.propertyTypeCastError(value, property);
},

CastErrorImplementation$: function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + expectedType);
},

throwCyclicInit: function(staticName) {
  throw $.wrapException($.CyclicInitializationError$("Cyclic initialization for static " + $.S(staticName)));
},

createRuntimeType: function($name) {
  return $.TypeImpl$($name);
},

TypeImpl$: function(_typeName) {
  return new $.TypeImpl(_typeName);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return $.substitute($.getField(target, "$as" + $.S(substitutionName)), $.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = $.getRuntimeTypeArguments(target, substitutionName);
  return $.isNull($arguments) ? null : $.getIndex($arguments, index);
},

getClassName: function(object) {
  return $.getInterceptor(object).constructor.builtin$cls;
},

getConstructorName: function(type) {
  return type.builtin$cls;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return $.getConstructorName($.getIndex(type, 0)) + $.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if ($.isNull(types))
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = $.isJsArray(object) ? "List" : $.getClassName(object);
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
},

getRuntimeType: function(object) {
  return $.TypeImpl$($.getRuntimeTypeString(object));
},

substitute: function(substitution, $arguments) {
  if ($.isJsArray(substitution))
    $arguments = substitution;
  else if ($.isJsFunction(substitution)) {
    substitution = $.invoke(substitution, $arguments);
    if ($.isJsArray(substitution))
      $arguments = substitution;
    else if ($.isJsFunction(substitution))
      $arguments = $.invoke(substitution, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = $.getInterceptor(object);
  if ($.isNull($.getField(interceptor, isField)))
    return false;
  return $.checkArguments($.getField(interceptor, asField), $arguments, checks);
},

checkArguments: function(substitution, $arguments, checks) {
  return $.areSubtypes($.substitute(substitution, $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, i;
  if ($.isNull(s) || $.isNull(t))
    return true;
  len = $.getLength(s);
  for (i = 0; i < len; ++i)
    if (!$.isSubtype(s[i], t[i]))
      return false;
  return true;
},

computeSignature: function(signature, context, contextName) {
  return $.invokeOn(signature, context, $.getRuntimeTypeArguments(context, contextName));
},

isSupertypeOfNull: function(type) {
  return $.isNull(type) || $.getConstructorName(type) === "Object";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if ($.isNull(o))
    return $.isSupertypeOfNull(t);
  if ($.isNull(t))
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = $.getInterceptor(o);
  if ($.isNotNull(rti)) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
},

subtypeOfRuntimeTypeCast: function(object, type) {
  if (object != null && !$.checkSubtypeOfRuntimeType(object, type))
    throw $.wrapException($.CastErrorImplementation$($.Primitives_objectTypeName(object), $.runtimeTypeToString(type)));
  return object;
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if (t.func != null) {
    if (s.func == null) {
      if (s["$is_" + $.S(t.func)] != null)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return $.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && s.func != null)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = $.isJsArray(s) ? s.slice(1) : null;
  t2 = $.isJsArray(t) ? t.slice(1) : null;
  return $.areSubtypes($.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return $.isSubtype(s, t) || $.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if ($.isNull(t) && $.isNull(s))
    return true;
  if ($.isNull(t))
    return allowShorter;
  if ($.isNull(s))
    return false;
  sLength = $.getLength(s);
  tLength = $.getLength(t);
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!($.isSubtype(t1, t2) || $.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if ($.isNull(t))
    return true;
  if ($.isNull(s))
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, $.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if ($.hasNoField(s, "func"))
    return false;
  if ($.hasField(s, "void")) {
    if ($.hasNoField(t, "void") && $.hasField(t, "ret"))
      return false;
  } else if ($.hasNoField(t, "void"))
    if (!$.isAssignable($.getField(s, "ret"), $.getField(t, "ret")))
      return false;
  sParameterTypes = $.getField(s, "args");
  tParameterTypes = $.getField(t, "args");
  sOptionalParameterTypes = $.getField(s, "opt");
  tOptionalParameterTypes = $.getField(t, "opt");
  sParametersLen = $.isNotNull(sParameterTypes) ? $.getLength(sParameterTypes) : 0;
  tParametersLen = $.isNotNull(tParameterTypes) ? $.getLength(tParameterTypes) : 0;
  sOptionalParametersLen = $.isNotNull(sOptionalParameterTypes) ? $.getLength(sOptionalParameterTypes) : 0;
  tOptionalParametersLen = $.isNotNull(tOptionalParameterTypes) ? $.getLength(tOptionalParameterTypes) : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!$.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!$.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!($.isSubtype(t1, t2) || $.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!($.isSubtype(t1, t2) || $.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!($.isSubtype(t1, t2) || $.isSubtype(t2, t1)))
        return false;
    }
  }
  return $.areAssignableMaps($.getField(s, "named"), $.getField(t, "named"));
},

invoke: function($function, $arguments) {
  return $.invokeOn($function, null, $arguments);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

getField: function(object, $name) {
  return object[$name];
},

getIndex: function(array, index) {
  return array[index];
},

getLength: function(array) {
  return array.length;
},

isJsArray: function(value) {
  return typeof value === "object" && value !== null && value.constructor === Array;
},

hasField: function(object, $name) {
  return object[$name] != null;
},

hasNoField: function(object, $name) {
  return object[$name] == null;
},

isJsFunction: function(o) {
  return typeof o == "function";
},

isNull: function(o) {
  return o == null;
},

isNotNull: function(o) {
  return o != null;
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  return tag;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

contains: function(userAgent, $name) {
  return userAgent.indexOf($name) !== -1;
},

propertyGet: function(object, property) {
  return object[property];
},

callHasOwnProperty: function($function, object, property) {
  return $function.call(object, property);
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, "Chrome") || $.contains(userAgent, "DumpRenderTree"))
    return $.typeNameInChrome$closure;
  else if ($.contains(userAgent, "Firefox"))
    return $.typeNameInFirefox$closure;
  else if ($.contains(userAgent, "MSIE"))
    return $.typeNameInIE$closure;
  else if ($.contains(userAgent, "Opera"))
    return $.typeNameInOpera$closure;
  else if ($.contains(userAgent, "AppleWebKit"))
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

getTypeNameOf: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return $.callHasOwnProperty(hasOwnPropertyFunction, map, tag) ? $.propertyGet(map, tag) : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.getTypeNameOf(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

JSSyntaxRegExp$: function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp($.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false), null, null);
},

JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
},

_MatchImplementation$: function(pattern, _match) {
  var t1 = new $._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
},

_AllMatchesIterable$: function(_re, _string) {
  return new $._AllMatchesIterable(_re, _string);
},

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List(null, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if ($.$eq(position, -1))
      break;
    result.push(new $.StringMatch(position, haystack, needle));
    if (typeof position !== "number")
      throw position.$add();
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  if (typeof other === "string")
    return !$.$eq($.JSString_methods.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$isNotEmpty$asx($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex)));
},

stringReplaceJS: function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to);
}}],
["bootstrap", "demos.html_bootstrap.dart", , {
main0: function() {
  $.useObservers = true;
  $.main();
  $.init_autogenerated();
}}],
["collisions", "package:dartemis_toolbox/collisions.dart", , {
Checker_T1: {"": "Object;_intf",
  collideParticleParticle$5: function(psA, iA, psB, iB, acol) {
    var t1, t2, t3, t4, t5, b;
    t1 = this._intf;
    t2 = psA.get$position3d();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.collideParticleParticle$5$bailout(1, psA, iA, psB, iB, t1, t2);
    if (iA >>> 0 !== iA || iA >= t2.length)
      throw $.ioore(iA);
    t2 = t2[iA];
    t3 = psA.get$radius();
    t3 = t3.$index(t3, iA);
    t4 = psB.get$position3d();
    if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !$.isJsIndexable(t4, t4[$.dispatchPropertyName])))
      return this.collideParticleParticle$5$bailout(2, psA, iA, psB, iB, t1, t2, t3, t4);
    if (iB >>> 0 !== iB || iB >= t4.length)
      throw $.ioore(iB);
    t4 = t4[iB];
    t5 = psA.get$radius();
    b = t1.sphere_sphere$4(t2, t3, t4, t5.$index(t5, iB));
    if (b) {
      $.$indexSet$ax(psA.get$collide(), iA, -1);
      $.$indexSet$ax(psB.get$collide(), iB, -1);
    }
    return b;
  },
  collideParticleParticle$5$bailout: function(state0, psA, iA, psB, iB, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this._intf;
        t2 = psA.get$position3d();
      case 1:
        state0 = 0;
        t2 = $.$index$asx(t2, iA);
        t3 = psA.get$radius();
        t3 = t3.$index(t3, iA);
        t4 = psB.get$position3d();
      case 2:
        var t5, b;
        state0 = 0;
        t4 = $.$index$asx(t4, iB);
        t5 = psA.get$radius();
        b = t1.sphere_sphere$4(t2, t3, t4, t5.$index(t5, iB));
        if (b) {
          $.$indexSet$ax(psA.get$collide(), iA, -1);
          $.$indexSet$ax(psB.get$collide(), iB, -1);
        }
        return b;
    }
  },
  collideParticleSegment$4: function(psA, iA, s, scol) {
    var t1, t2, t3, t4, t5, b;
    t1 = this._intf;
    t2 = s.get$ps().get$position3d();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.collideParticleSegment$4$bailout(1, psA, iA, s, t1, t2);
    t3 = s.get$i1();
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    t2 = s.get$ps().get$position3d();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.collideParticleSegment$4$bailout(2, psA, iA, s, t1, t3, t2);
    t4 = s.get$i2();
    if (t4 >>> 0 !== t4 || t4 >= t2.length)
      throw $.ioore(t4);
    t4 = t2[t4];
    t2 = psA.get$position3d();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.collideParticleSegment$4$bailout(3, psA, iA, s, t1, t3, t4, t2);
    if (iA >>> 0 !== iA || iA >= t2.length)
      throw $.ioore(iA);
    t2 = t2[iA];
    t5 = psA.get$radius();
    b = t1.segment_sphere$4(t3, t4, t2, t5.$index(t5, iA));
    if (b) {
      $.$indexSet$ax(psA.get$collide(), iA, -1);
      s.set$collide(-1);
    }
    return b;
  },
  collideParticleSegment$4$bailout: function(state0, psA, iA, s, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this._intf;
        t2 = s.get$ps().get$position3d();
      case 1:
        state0 = 0;
        t2 = $.$index$asx(t2, s.get$i1());
        t3 = s.get$ps().get$position3d();
      case 2:
        state0 = 0;
        t3 = $.$index$asx(t3, s.get$i2());
        t4 = psA.get$position3d();
      case 3:
        var t5, b;
        state0 = 0;
        t4 = $.$index$asx(t4, iA);
        t5 = psA.get$radius();
        b = t1.segment_sphere$4(t2, t3, t4, t5.$index(t5, iA));
        if (b) {
          $.$indexSet$ax(psA.get$collide(), iA, -1);
          s.set$collide(-1);
        }
        return b;
    }
  }
},

QuadTreeXYAabb: {"": "Object;_dim,_splitPoint,maxDepth,maxChildren,_children,_nodes,_isLeaf",
  newDrawCanvas$2: function(lineStyle, textStyle) {
    return new $.QuadTreeXYAabb_newDrawCanvas_closure(this, lineStyle, textStyle);
  },
  _debug_drawAxis$1: function(g) {
    var t1, t2, t3, t4, t5, i;
    if (!this._isLeaf) {
      t1 = this._dim;
      t2 = t1.get$min(t1);
      t3 = this._splitPoint;
      t4 = $.getInterceptor$x(g);
      t4.moveTo$2(g, t2.get$x(t2), t3.get$y(t3));
      t2 = t1.get$max(t1);
      t4.lineTo$2(g, t2.get$x(t2), t3.get$y(t3));
      t2 = t3.get$x(t3);
      t5 = t1.get$min(t1);
      t4.moveTo$2(g, t2, t5.get$y(t5));
      t3 = t3.get$x(t3);
      t1 = t1.get$max(t1);
      t4.lineTo$2(g, t3, t1.get$y(t1));
      for (t1 = this._nodes, t2 = t1.length, i = 0; i < 4; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i]._debug_drawAxis$1(g);
      }
    }
  },
  _debug_drawCount$1: function(g) {
    var t1, t2, i;
    t1 = this._splitPoint;
    $.fillText$3$x(g, "" + $.JSInt_methods.$shr(this._children.length, 1) + "/" + $.JSInt_methods.$shr(this.maxChildren, 1) + "[" + $.S(this.maxDepth) + "]", t1.get$x(t1), t1.get$y(t1));
    if (!this._isLeaf)
      for (t1 = this._nodes, t2 = t1.length, i = 0; i < 4; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i]._debug_drawCount$1(g);
      }
  },
  reset$0: function(_) {
    $.JSArray_methods.clear$0(this._children);
    $.JSArray_methods.forEach$1(this._nodes, new $.QuadTreeXYAabb_reset_closure());
    this._isLeaf = true;
  },
  insert$2: function(_, v, obj) {
    var r, t1;
    r = this.findRegion$1(v);
    t1 = r != null;
    if (t1)
      r._insert$2(v, obj);
    return t1;
  },
  findRegion$1: function(v) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$x(v);
    t2 = $.get$x$x(t1.get$min(v));
    t3 = this._dim;
    t4 = t3.get$min(t3);
    if (!$.$lt$n(t2, t4.get$x(t4))) {
      t2 = $.get$x$x(t1.get$max(v));
      t4 = t3.get$max(t3);
      if (!$.$gt$n(t2, t4.get$x(t4))) {
        t2 = $.get$y$x(t1.get$min(v));
        t4 = t3.get$min(t3);
        if (!$.$lt$n(t2, t4.get$y(t4))) {
          t1 = $.get$y$x(t1.get$max(v));
          t3 = t3.get$max(t3);
          t3 = $.$gt$n(t1, t3.get$y(t3));
          t1 = t3;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      return;
    return this._findRegion$1(v);
  },
  _findRegion$1: function(v) {
    var t1, t2, n, r;
    if (!this._isLeaf) {
      t1 = $.getInterceptor$x(v);
      t2 = this._splitPoint;
      n = $.$le$n($.get$y$x(t1.get$min(v)), t2.get$y(t2)) ? 0 : 2;
      n = $.$le$n($.get$x$x(t1.get$min(v)), t2.get$x(t2)) ? n : n + 1;
      t1 = this._nodes;
      if (n >= t1.length)
        throw $.ioore(n);
      r = t1[n].findRegion$1(v);
    } else
      r = null;
    return r == null ? this : r;
  },
  _insert$2: function(v, obj) {
    var t1, t2, data, i, t3, r;
    t1 = this._isLeaf && $.$gt$n(this.maxDepth, 0) && this._children.length >= this.maxChildren;
    t2 = this._children;
    if (t1) {
      this._split$0();
      data = $.List_List$from(t2, false, null);
      $.JSArray_methods.clear$0(t2);
      for (i = 0; t1 = data.length, i < t1; i += 2) {
        t2 = data[i];
        t3 = i + 1;
        if (t3 >= t1)
          throw $.ioore(t3);
        t3 = data[t3];
        r = this.findRegion$1(t2);
        if (r != null)
          r._insert$2(t2, t3);
      }
      this.insert$2(this, v, obj);
    } else {
      t2.push(v);
      t2.push(obj);
    }
  },
  _split$0: function() {
    var t1, t2, t3, t4, x, y, t5, t6, w2, h2, m, d;
    t1 = this._nodes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    if (t1[0] == null) {
      t3 = this._dim;
      t4 = t3.get$min(t3);
      x = t4.get$x(t4);
      t4 = t3.get$min(t3);
      y = t4.get$y(t4);
      t4 = this._splitPoint;
      t5 = t4.get$x(t4);
      t6 = t3.get$min(t3);
      w2 = t5 - t6.get$x(t6);
      t4 = t4.get$y(t4);
      t3 = t3.get$min(t3);
      h2 = t4 - t3.get$y(t3);
      m = $.JSInt_methods.$shr(this.maxChildren, 1);
      d = $.$sub$n(this.maxDepth, 1);
      t1[0] = $.QuadTreeXYAabb$(x, y, w2, h2, d, m);
      t3 = x + w2;
      t4 = $.QuadTreeXYAabb$(t3, y, w2, h2, d, m);
      if (1 >= t2)
        throw $.ioore(1);
      t1[1] = t4;
      t4 = y + h2;
      t6 = $.QuadTreeXYAabb$(x, t4, w2, h2, d, m);
      if (2 >= t2)
        throw $.ioore(2);
      t1[2] = t6;
      t4 = $.QuadTreeXYAabb$(t3, t4, w2, h2, d, m);
      if (3 >= t2)
        throw $.ioore(3);
      t1[3] = t4;
    }
    this._isLeaf = false;
  },
  scan$1: function(f) {
    var t1, i, a1, j, j0, t2;
    for (t1 = this._children, i = 1; i < t1.length; i = j) {
      a1 = t1[i];
      for (j = i + 2, j0 = j; j0 < t1.length; j0 += 2)
        f.call$2(a1, t1[j0]);
      this._scanVsNodes$2(f, a1);
    }
    if (!this._isLeaf)
      for (t1 = this._nodes, t2 = t1.length, i = 0; i < 4; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i].scan$1(f);
      }
  },
  _scanVsNodes$2: function(f, a1) {
    var t1, t2, i, n;
    if (this._isLeaf)
      return;
    for (t1 = this._nodes, t2 = t1.length, i = 0; i < 4; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      n = t1[i];
      n._scanVsChildren$2(f, a1);
      n._scanVsNodes$2(f, a1);
    }
  },
  _scanVsChildren$2: function(f, a1) {
    var t1, i;
    for (t1 = this._children, i = 1; i < t1.length; i += 2)
      f.call$2(a1, t1[i]);
  },
  QuadTreeXYAabb$6: function(x, y, w, h, maxDepth, maxChildren) {
    var t1, t2;
    t1 = this._dim;
    t1.get$min(t1).setValues$3(x, y, 0);
    t2 = t1.get$max(t1);
    if (typeof w !== "number")
      throw $.iae(w);
    if (typeof h !== "number")
      throw $.iae(h);
    t2.setValues$3(x + w, y + h, 0);
    t2 = this._splitPoint.setFrom$1(t1.get$min(t1));
    t1 = t2.add$1(t2, t1.get$max(t1));
    t1.scale$1(t1, 0.5);
  },
  $isQuadTreeXYAabb: true
},

QuadTreeXYAabb_newDrawCanvas_closure: {"": "Closure;this_0,lineStyle_1,textStyle_2",
  call$3: function(g, e, area) {
    var t1, t2;
    t1 = $.getInterceptor$x(g);
    t1.beginPath$0(g);
    t2 = this.this_0;
    t2._debug_drawAxis$1(g);
    t1.set$strokeStyle(g, this.lineStyle_1);
    t1.stroke$0(g);
    t1.set$fillStyle(g, this.textStyle_2);
    t2._debug_drawCount$1(g);
  },
  $isFunction: true
},

QuadTreeXYAabb_reset_closure: {"": "Closure;",
  call$1: function(i) {
    if (i != null)
      $.reset$0$x(i);
  },
  $isFunction: true
},

Resolver_Noop: {"": "Object;",
  notifyCollisionParticleSegment$4: function(psA, iA, s, tcoll) {
  },
  notifyCollisionParticleParticle$5: function(psA, iA, psB, iB, tcoll) {
  }
},

Resolver_Backward: {"": "Object;",
  notifyCollisionParticleSegment$4: function(psA, iA, s, tcoll) {
    var t, t1, t2, t3;
    t = 0.5 * tcoll;
    t1 = psA.get$position3d();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(1, psA, iA, s, t, t1);
    if (iA < 0 || iA >= t1.length)
      throw $.ioore(iA);
    t1 = t1[iA];
    t2 = psA.get$position3dPrevious();
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(2, 0, iA, s, t, t1, t2);
    if (iA >= t2.length)
      throw $.ioore(iA);
    t2 = t2[iA];
    t3 = t1.sub$1(t2);
    t3 = t3.scale$1(t3, t);
    t3.add$1(t3, t2);
    t3 = $.getInterceptor$x(t1);
    t2.setValues$3(t3.get$x(t1), t3.get$y(t1), t3.get$z(t1));
    t1 = s.get$ps().get$position3d();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(3, 0, 0, s, t, t1);
    t3 = s.get$i1();
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t3 = t1[t3];
    t1 = s.get$ps().get$position3dPrevious();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(4, 0, 0, s, t, t3, 0, t1);
    t2 = s.get$i1();
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t2 = t1[t2];
    t1 = t3.sub$1(t2);
    t1 = t1.scale$1(t1, t);
    t1.add$1(t1, t2);
    t1 = $.getInterceptor$x(t3);
    t2.setValues$3(t1.get$x(t3), t1.get$y(t3), t1.get$z(t3));
    t3 = s.get$ps().get$position3d();
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(5, 0, 0, s, t, t3);
    t1 = s.get$i2();
    if (t1 >>> 0 !== t1 || t1 >= t3.length)
      throw $.ioore(t1);
    t1 = t3[t1];
    t3 = s.get$ps().get$position3dPrevious();
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
      return this.notifyCollisionParticleSegment$4$bailout(6, 0, 0, s, t, t1, t3);
    t2 = s.get$i2();
    if (t2 >>> 0 !== t2 || t2 >= t3.length)
      throw $.ioore(t2);
    t2 = t3[t2];
    t3 = t1.sub$1(t2);
    t3 = t3.scale$1(t3, t);
    t3.add$1(t3, t2);
    t3 = $.getInterceptor$x(t1);
    t2.setValues$3(t3.get$x(t1), t3.get$y(t1), t3.get$z(t1));
  },
  notifyCollisionParticleSegment$4$bailout: function(state0, psA, iA, s, t, t1, t2, t3) {
    switch (state0) {
      case 0:
        t = 0.5 * tcoll;
        t1 = psA.get$position3d();
      case 1:
        state0 = 0;
        t1 = $.$index$asx(t1, iA);
        t2 = psA.get$position3dPrevious();
      case 2:
        state0 = 0;
        t2 = $.$index$asx(t2, iA);
        t3 = t1.sub$1(t2);
        t3 = t3.scale$1(t3, t);
        t3.add$1(t3, t2);
        t3 = $.getInterceptor$x(t1);
        t2.setValues$3(t3.get$x(t1), t3.get$y(t1), t3.get$z(t1));
        t1 = s.get$ps().get$position3d();
      case 3:
        state0 = 0;
        t1 = $.$index$asx(t1, s.get$i1());
        t3 = s.get$ps().get$position3dPrevious();
      case 4:
        state0 = 0;
        t3 = $.$index$asx(t3, s.get$i1());
        t2 = t1.sub$1(t3);
        t2 = t2.scale$1(t2, t);
        t2.add$1(t2, t3);
        t2 = $.getInterceptor$x(t1);
        t3.setValues$3(t2.get$x(t1), t2.get$y(t1), t2.get$z(t1));
        t1 = s.get$ps().get$position3d();
      case 5:
        state0 = 0;
        t1 = $.$index$asx(t1, s.get$i2());
        t2 = s.get$ps().get$position3dPrevious();
      case 6:
        state0 = 0;
        t2 = $.$index$asx(t2, s.get$i2());
        t3 = t1.sub$1(t2);
        t3 = t3.scale$1(t3, t);
        t3.add$1(t3, t2);
        t3 = $.getInterceptor$x(t1);
        t2.setValues$3(t3.get$x(t1), t3.get$y(t1), t3.get$z(t1));
    }
  },
  notifyCollisionParticleParticle$5: function(psA, iA, psB, iB, tcoll) {
    var t1, body1, body2, t2, t3, t4, x, y, $length, target, factor, t5;
    t1 = psA.get$position3d();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.notifyCollisionParticleParticle$5$bailout(1, psA, iA, psB, iB, t1);
    if (iA < 0 || iA >= t1.length)
      throw $.ioore(iA);
    body1 = t1[iA];
    t1 = psB.get$position3d();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.notifyCollisionParticleParticle$5$bailout(2, psA, iA, psB, iB, t1, body1);
    if (iB < 0 || iB >= t1.length)
      throw $.ioore(iB);
    body2 = t1[iB];
    t1 = $.getInterceptor$x(body1);
    t2 = t1.get$x(body1);
    if (typeof t2 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(3, psA, iA, psB, iB, t1, body1, body2, t2);
    t3 = $.getInterceptor$x(body2);
    t4 = t3.get$x(body2);
    if (typeof t4 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(4, psA, iA, psB, iB, t1, body1, body2, t2, t4, t3);
    x = t2 - t4;
    t4 = t1.get$y(body1);
    if (typeof t4 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(5, psA, iA, psB, iB, t1, body1, body2, 0, t4, t3, x);
    t2 = t3.get$y(body2);
    if (typeof t2 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(6, psA, iA, psB, iB, t1, body1, body2, t2, t4, t3, x);
    y = t4 - t2;
    $length = Math.sqrt($.checkNum(x * x + y * y));
    t2 = psA.get$radius();
    t2 = t2.$index(t2, iA);
    if (typeof t2 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(7, 0, 0, psB, iB, t1, body1, body2, $.JSNumber_methods, $.JSNumber_methods, t3, x, $length, y, t2);
    t4 = psB.get$radius();
    t4 = t4.$index(t4, iB);
    if (typeof t4 !== "number")
      return this.notifyCollisionParticleParticle$5$bailout(8, 0, 0, 0, 0, t1, body1, body2, $.JSNumber_methods, $.JSNumber_methods, t3, x, $length, y, t2, t4);
    target = t2 + t4;
    if ($length < target) {
      factor = ($length - target) / $length;
      t2 = t1.get$x(body1);
      if (typeof t2 !== "number")
        return this.notifyCollisionParticleParticle$5$bailout(9, 0, 0, 0, 0, t1, body1, body2, $.JSNumber_methods, $.JSNumber_methods, t3, x, 0, y, t2, 0, factor);
      t4 = x * factor * 0.5;
      t1.set$x(body1, t2 - t4);
      t2 = t1.get$y(body1);
      if (typeof t2 !== "number")
        return this.notifyCollisionParticleParticle$5$bailout(10, 0, 0, 0, 0, t1, body1, body2, $.JSNumber_methods, $.JSNumber_methods, t3, x, 0, y, t2, 0, factor);
      t5 = y * factor * 0.5;
      t1.set$y(body1, t2 - t5);
      t2 = t3.get$x(body2);
      if (typeof t2 !== "number")
        return this.notifyCollisionParticleParticle$5$bailout(11, 0, 0, 0, 0, 0, 0, body2, $.JSNumber_methods, $.JSNumber_methods, t3, x, 0, y, t2, 0, factor);
      t3.set$x(body2, t2 + t4);
      t4 = t3.get$y(body2);
      if (typeof t4 !== "number")
        return this.notifyCollisionParticleParticle$5$bailout(12, 0, 0, 0, 0, 0, 0, body2, t4, $.JSNumber_methods, t3, 0, 0, y, 0, 0, factor);
      t3.set$y(body2, t4 + t5);
    }
  },
  notifyCollisionParticleParticle$5$bailout: function(state0, psA, iA, psB, iB, t1, body1, body2, t2, t4, t3, x, $length, y, t5, t6, factor) {
    switch (state0) {
      case 0:
        t1 = psA.get$position3d();
      case 1:
        state0 = 0;
        body1 = $.$index$asx(t1, iA);
        t1 = psB.get$position3d();
      case 2:
        state0 = 0;
        body2 = $.$index$asx(t1, iB);
        t1 = $.getInterceptor$x(body1);
        t2 = t1.get$x(body1);
      case 3:
        state0 = 0;
        t3 = $.getInterceptor$x(body2);
        t4 = t3.get$x(body2);
      case 4:
        state0 = 0;
        x = $.$sub$n(t2, t4);
        t4 = t1.get$y(body1);
      case 5:
        state0 = 0;
        t2 = t3.get$y(body2);
      case 6:
        state0 = 0;
        y = $.$sub$n(t4, t2);
        t2 = $.getInterceptor$n(x);
        t4 = $.getInterceptor$n(y);
        $length = Math.sqrt($.checkNum($.$add$ns(t2.$mul(x, x), t4.$mul(y, y))));
        t5 = psA.get$radius();
        t5 = t5.$index(t5, iA);
      case 7:
        state0 = 0;
        t6 = psB.get$radius();
        t6 = t6.$index(t6, iB);
      case 8:
        state0 = 0;
        target = $.$add$ns(t5, t6);
        if (typeof target !== "number")
          throw $.iae(target);
      default:
        var target;
        if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && $length < target)
          switch (state0) {
            case 0:
              factor = ($length - target) / $length;
              t5 = t1.get$x(body1);
            case 9:
              state0 = 0;
              t1.set$x(body1, $.$sub$n(t5, $.$mul$n(t2.$mul(x, factor), 0.5)));
              t5 = t1.get$y(body1);
            case 10:
              state0 = 0;
              t1.set$y(body1, $.$sub$n(t5, $.$mul$n(t4.$mul(y, factor), 0.5)));
              t5 = t3.get$x(body2);
            case 11:
              state0 = 0;
              t3.set$x(body2, $.$add$ns(t5, $.$mul$n(t2.$mul(x, factor), 0.5)));
              t2 = t3.get$y(body2);
            case 12:
              state0 = 0;
              t3.set$y(body2, $.$add$ns(t2, $.$mul$n(t4.$mul(y, factor), 0.5)));
          }
    }
  }
},

Space_Noop: {"": "Object;",
  reset$0: function(_) {
  },
  addParticles$1: function(ps) {
    return true;
  },
  addSegment$1: function(seg) {
    return true;
  },
  handleCollision$0: function() {
  }
},

Space_XY0: {"": "Object;_particlesS,_segments,checker,resolver,_scol",
  reset$0: function(_) {
    $.JSArray_methods.clear$0(this._particlesS);
    $.JSArray_methods.clear$0(this._segments);
  },
  addParticles$1: function(ps) {
    var t1, b, i, t2, v;
    t1 = $.getInterceptor$asx(ps);
    b = false;
    i = 0;
    while (true) {
      t2 = t1.get$length(ps);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      v = $.$index$asx(ps.get$collide(), i);
      $.$indexSet$ax(ps.get$collide(), i, $.$mul$n(v, v));
      b = b || !$.$eq($.$index$asx(ps.get$collide(), i), 0);
      ++i;
    }
    b = b && $.$gt$n(t1.get$length(ps), 0);
    if (b)
      this._particlesS.push(ps);
    return b;
  },
  addSegment$1: function(seg) {
    if (seg.collide !== 0) {
      seg.collide = 1;
      this._segments.push(seg);
      return true;
    }
    return false;
  },
  handleCollision$0: function() {
    var t1, i;
    for (t1 = this._particlesS, i = 0; i < t1.length; ++i) {
      this._detectCollisionInterParticles$1(i);
      this._detectCollisionParticlesSegments$1(i);
      this._detectCollisionIntraParticles$1(i);
    }
  },
  _detectCollisionInterParticles$1: function(i) {
    var t1, psA, j, t2, t3, t4, t5, t6, psB, t7, iA, t8, iB;
    t1 = this._particlesS;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    psA = t1[i];
    for (j = i + 1, t2 = $.getInterceptor$asx(psA), t3 = this.resolver, t4 = this._scol, t5 = t4.storage, t6 = this.checker; j < t1.length; ++j) {
      psB = t1[j];
      t7 = $.getInterceptor$asx(psB);
      iA = 0;
      while (true) {
        t8 = t2.get$length(psA);
        if (typeof t8 !== "number")
          throw $.iae(t8);
        if (!(iA < t8))
          break;
        t8 = $.$index$asx(psA.get$collide(), iA);
        if (typeof t8 !== "number")
          return this._detectCollisionInterParticles$1$bailout(1, psA, t2, iA, psB, t6, t3, t4, t5, t7, j, t1, t8);
        if (t8 !== 0) {
          iB = 0;
          while (true) {
            t8 = t7.get$length(psB);
            if (typeof t8 !== "number")
              throw $.iae(t8);
            if (!(iB < t8))
              break;
            t8 = $.$index$asx(psB.get$collide(), iB);
            if (typeof t8 !== "number")
              return this._detectCollisionInterParticles$1$bailout(2, psA, t2, iA, psB, t6, t3, t4, t5, t7, j, t1, t8, iB);
            if (t8 !== 0)
              if (t6.collideParticleParticle$5(psA, iA, psB, iB, t4)) {
                if (3 >= t5.length)
                  throw $.ioore(3);
                t3.notifyCollisionParticleParticle$5(psA, iA, psB, iB, t5[3]);
              }
            ++iB;
          }
        }
        ++iA;
      }
    }
  },
  _detectCollisionInterParticles$1$bailout: function(state0, psA, t2, iA, psB, t6, t3, t4, t5, t7, j, t1, t8, iB) {
    switch (state0) {
      case 0:
        t1 = this._particlesS;
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        psA = t1[i];
        j = i + 1;
        t2 = $.getInterceptor$asx(psA);
        t3 = this.resolver;
        t4 = this._scol;
        t5 = t4.storage;
        t6 = this.checker;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(j < t1.length))
                  break L0;
                psB = t1[j];
                t7 = $.getInterceptor$asx(psB);
                iA = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t8 = t2.get$length(psA);
                        if (typeof t8 !== "number")
                          throw $.iae(t8);
                        if (!(iA < t8))
                          break L1;
                        t8 = $.$index$asx(psA.get$collide(), iA);
                      case 1:
                        state0 = 0;
                      case 2:
                        if (state0 === 2 || state0 === 0 && !$.$eq(t8, 0))
                          switch (state0) {
                            case 0:
                              iB = 0;
                            case 2:
                              L2:
                                while (true)
                                  switch (state0) {
                                    case 0:
                                      t8 = t7.get$length(psB);
                                      if (typeof t8 !== "number")
                                        throw $.iae(t8);
                                      if (!(iB < t8))
                                        break L2;
                                      t8 = $.$index$asx(psB.get$collide(), iB);
                                    case 2:
                                      state0 = 0;
                                      if (!$.$eq(t8, 0))
                                        if (t6.collideParticleParticle$5(psA, iA, psB, iB, t4)) {
                                          if (3 >= t5.length)
                                            throw $.ioore(3);
                                          t3.notifyCollisionParticleParticle$5(psA, iA, psB, iB, t5[3]);
                                        }
                                      ++iB;
                                  }
                          }
                        ++iA;
                    }
                ++j;
            }
    }
  },
  _detectCollisionIntraParticles$1: function(i) {
    var t1, psA, t2, t3, t4, t5, iA, t6, iB;
    t1 = this._particlesS;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    psA = t1[i];
    if (!psA.get$intraCollide())
      return;
    t1 = $.getInterceptor$asx(psA);
    t2 = this.resolver;
    t3 = this._scol;
    t4 = t3.storage;
    t5 = this.checker;
    iA = 0;
    while (true) {
      t6 = t1.get$length(psA);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (!(iA < t6))
        break;
      t6 = $.$index$asx(psA.get$collide(), iA);
      if (typeof t6 !== "number")
        return this._detectCollisionIntraParticles$1$bailout(1, t5, t2, t6, t3, iA, t1, t4, psA);
      if (t6 !== 0) {
        iB = iA + 1;
        while (true) {
          t6 = t1.get$length(psA);
          if (typeof t6 !== "number")
            throw $.iae(t6);
          if (!(iB < t6))
            break;
          t6 = $.$index$asx(psA.get$collide(), iB);
          if (typeof t6 !== "number")
            return this._detectCollisionIntraParticles$1$bailout(2, t5, t2, t6, t3, iA, t1, t4, psA, iB);
          if (t6 !== 0)
            if (t5.collideParticleParticle$5(psA, iA, psA, iB, t3)) {
              if (3 >= t4.length)
                throw $.ioore(3);
              t2.notifyCollisionParticleParticle$5(psA, iA, psA, iB, t4[3]);
            }
          ++iB;
        }
      }
      ++iA;
    }
  },
  _detectCollisionIntraParticles$1$bailout: function(state0, t5, t2, t6, t3, iA, t1, t4, psA, iB) {
    switch (state0) {
      case 0:
        t1 = this._particlesS;
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        psA = t1[i];
        if (!psA.get$intraCollide())
          return;
        t1 = $.getInterceptor$asx(psA);
        t2 = this.resolver;
        t3 = this._scol;
        t4 = t3.storage;
        t5 = this.checker;
        iA = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t6 = t1.get$length(psA);
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (!(iA < t6))
                  break L0;
                t6 = $.$index$asx(psA.get$collide(), iA);
              case 1:
                state0 = 0;
              case 2:
                if (state0 === 2 || state0 === 0 && !$.$eq(t6, 0))
                  switch (state0) {
                    case 0:
                      iB = iA + 1;
                    case 2:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t6 = t1.get$length(psA);
                              if (typeof t6 !== "number")
                                throw $.iae(t6);
                              if (!(iB < t6))
                                break L1;
                              t6 = $.$index$asx(psA.get$collide(), iB);
                            case 2:
                              state0 = 0;
                              if (!$.$eq(t6, 0))
                                if (t5.collideParticleParticle$5(psA, iA, psA, iB, t3)) {
                                  if (3 >= t4.length)
                                    throw $.ioore(3);
                                  t2.notifyCollisionParticleParticle$5(psA, iA, psA, iB, t4[3]);
                                }
                              ++iB;
                          }
                  }
                ++iA;
            }
    }
  },
  _detectCollisionParticlesSegments$1: function(i) {
    var t1, psA, t2, t3, t4, t5, t6, iS, s, iA, t7;
    t1 = this._particlesS;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    psA = t1[i];
    for (t1 = this._segments, t2 = $.getInterceptor(psA), t3 = this.resolver, t4 = this._scol, t5 = t4.storage, t6 = this.checker, iS = 0; iS < t1.length; ++iS) {
      s = t1[iS];
      if (t2.$eq(psA, s.ps))
        continue;
      iA = 0;
      while (true) {
        t7 = t2.get$length(psA);
        if (typeof t7 !== "number")
          throw $.iae(t7);
        if (!(iA < t7))
          break;
        t7 = $.$index$asx(psA.get$collide(), iA);
        if (typeof t7 !== "number")
          return this._detectCollisionParticlesSegments$1$bailout(1, t4, t5, t7, iA, psA, t2, t1, s, iS, t6, t3);
        if (t7 !== 0)
          if (t6.collideParticleSegment$4(psA, iA, s, t4)) {
            if (3 >= t5.length)
              throw $.ioore(3);
            t3.notifyCollisionParticleSegment$4(psA, iA, s, t5[3]);
          }
        ++iA;
      }
    }
  },
  _detectCollisionParticlesSegments$1$bailout: function(state0, t4, t5, t7, iA, psA, t2, t1, s, iS, t6, t3) {
    switch (state0) {
      case 0:
        t1 = this._particlesS;
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        psA = t1[i];
        t1 = this._segments;
        t2 = $.getInterceptor(psA);
        t3 = this.resolver;
        t4 = this._scol;
        t5 = t4.storage;
        t6 = this.checker;
        iS = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(iS < t1.length))
                  break L0;
              case 1:
                c$0: {
                  switch (state0) {
                    case 0:
                      s = t1[iS];
                      if (t2.$eq(psA, s.ps))
                        break c$0;
                      iA = 0;
                    case 1:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t7 = t2.get$length(psA);
                              if (typeof t7 !== "number")
                                throw $.iae(t7);
                              if (!(iA < t7))
                                break L1;
                              t7 = $.$index$asx(psA.get$collide(), iA);
                            case 1:
                              state0 = 0;
                              if (!$.$eq(t7, 0))
                                if (t6.collideParticleSegment$4(psA, iA, s, t4)) {
                                  if (3 >= t5.length)
                                    throw $.ioore(3);
                                  t3.notifyCollisionParticleSegment$4(psA, iA, s, t5[3]);
                                }
                              ++iA;
                          }
                  }
                }
                ++iS;
            }
    }
  }
},

Space_QuadtreeXY: {"": "Object;_grid,checker,resolver,_scol,_pool",
  reset$0: function(_) {
    var t1 = this._grid;
    t1.reset$0(t1);
    $.reset$0$x(this._pool);
  },
  addParticles$1: function(ps) {
    var t1, i, b, t2, e, t3, t4, r;
    t1 = $.getInterceptor$asx(ps);
    if ($.$lt$n(t1.get$length(ps), 1))
      return false;
    i = $.$sub$n(t1.get$length(ps), 1);
    if (typeof i !== "number")
      return this.addParticles$1$bailout(1, ps, i, t1);
    b = false;
    for (; i >= 0; --i)
      b = b || !$.$eq($.$index$asx(ps.get$collide(), i), 0);
    if (b) {
      i = $.$sub$n(t1.get$length(ps), 1);
      if (typeof i !== "number")
        return this.addParticles$1$bailout(2, ps, i, 0, b);
      t1 = this._pool;
      t2 = this._grid;
      for (; i >= 0; --i) {
        $.$indexSet$ax(ps.get$collide(), i, 1);
        e = t1.provide$0();
        e.set$ps(ps);
        e.set$i(i);
        t3 = $.$index$asx(ps.get$position3d(), i);
        t4 = ps.get$radius();
        $.extractAabbDisc(t3, t4.$index(t4, i), e.get$aabb());
        t4 = e.get$aabb();
        r = t2.findRegion$1(t4);
        if (r != null)
          r._insert$2(t4, e);
      }
    }
    return b;
  },
  addParticles$1$bailout: function(state0, ps, i, t1, b) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$asx(ps);
        if ($.$lt$n(t1.get$length(ps), 1))
          return false;
        i = $.$sub$n(t1.get$length(ps), 1);
      case 1:
        state0 = 0;
        b = false;
        for (; t2 = $.getInterceptor$n(i), t2.$ge(i, 0); i = t2.$sub(i, 1))
          b = b || !$.$eq($.$index$asx(ps.get$collide(), i), 0);
      case 2:
        var t2, t3, e, t4, t5, r;
        if (state0 === 2 || state0 === 0 && b)
          switch (state0) {
            case 0:
              i = $.$sub$n(t1.get$length(ps), 1);
            case 2:
              state0 = 0;
              t1 = this._pool;
              t2 = this._grid;
              for (; t3 = $.getInterceptor$n(i), t3.$ge(i, 0); i = t3.$sub(i, 1)) {
                $.$indexSet$ax(ps.get$collide(), i, 1);
                e = t1.provide$0();
                e.set$ps(ps);
                e.set$i(i);
                t4 = $.$index$asx(ps.get$position3d(), i);
                t5 = ps.get$radius();
                $.extractAabbDisc(t4, t5.$index(t5, i), e.get$aabb());
                t5 = e.get$aabb();
                r = t2.findRegion$1(t5);
                if (r != null)
                  r._insert$2(t5, e);
              }
          }
        return b;
    }
  },
  addSegment$1: function(seg) {
    var e, t1, t2, t3, t4, r;
    if (seg.collide !== 0) {
      seg.collide = 1;
      e = this._pool.provide$0();
      e.set$segment(seg);
      t1 = seg.ps;
      t2 = t1.get$position3d();
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
        return this.addSegment$1$bailout(1, seg, t1, t2, e);
      t1 = seg.i1;
      t3 = t2.length;
      if (t1 < 0 || t1 >= t3)
        throw $.ioore(t1);
      t1 = t2[t1];
      t4 = seg.i2;
      if (t4 >>> 0 !== t4 || t4 >= t3)
        throw $.ioore(t4);
      $.extractAabbDisc2(t1, t2[t4], 0, e.get$aabb());
      t4 = e.get$aabb();
      r = this._grid.findRegion$1(t4);
      if (r != null)
        r._insert$2(t4, e);
      return true;
    }
    return false;
  },
  addSegment$1$bailout: function(state0, seg, t1, t2, e) {
    switch (state0) {
      case 0:
      default:
        var r;
        if (state0 === 2 || state0 === 1 || state0 === 0 && seg.collide !== 0)
          switch (state0) {
            case 0:
              seg.collide = 1;
              e = this._pool.provide$0();
              e.set$segment(seg);
              t1 = seg.ps;
              t2 = t1.get$position3d();
            case 1:
              state0 = 0;
              t2 = $.$index$asx(t2, seg.i1);
              t1 = t1.get$position3d();
            case 2:
              state0 = 0;
              $.extractAabbDisc2(t2, $.$index$asx(t1, seg.i2), 0, e.get$aabb());
              t1 = e.get$aabb();
              r = this._grid.findRegion$1(t1);
              if (r != null)
                r._insert$2(t1, e);
              return true;
          }
        return false;
    }
  },
  handleCollision$0: function() {
    this._grid.scan$1(this.get$_handle0());
  },
  _handle0$2: function(e1, e2) {
    if (e1.get$ps() != null && e2.get$ps() != null)
      this._handlePP$2(e1, e2);
    else if (e1.get$ps() != null)
      this._handlePS$2(e1, e2);
    else if (e2.get$ps() != null)
      this._handlePS$2(e2, e1);
  },
  get$_handle0: function() {
    return new $.BoundClosure$2(this, "_handle0$2", null);
  },
  _handlePP$2: function(e1, e2) {
    var t1;
    if (!$.$eq(e1.get$ps(), e2.get$ps()) || e1.get$ps().get$intraCollide()) {
      t1 = this._scol;
      if (this.checker.collideParticleParticle$5(e1.get$ps(), e1.get$i(), e2.get$ps(), e2.get$i(), t1))
        this.resolver.notifyCollisionParticleParticle$5(e1.get$ps(), e1.get$i(), e2.get$ps(), e2.get$i(), t1.get$w());
    }
  },
  _handlePS$2: function(e1, e2) {
    var t1 = this._scol;
    if (this.checker.collideParticleSegment$4(e1.get$ps(), e1.get$i(), e2.get$segment(), t1))
      this.resolver.notifyCollisionParticleSegment$4(e1.get$ps(), e1.get$i(), e2.get$segment(), t1.get$w());
  }
},

_SQE: {"": "Object;aabb<,ps@,i@,segment@", $is_SQE: true},

_ProviderStack: {"": "Object;createE,resetE,_liblib11$_stack,_nextI",
  createE$0: function() {
    return this.createE.call$0();
  },
  resetE$1: function(arg0) {
    return this.resetE.call$1(arg0);
  },
  _liblib11$_stack$1: function(arg0) {
    return this._liblib11$_stack.call$1(arg0);
  },
  provide$0: function() {
    var t1, e;
    t1 = this._nextI;
    if (t1 >= this._liblib11$_stack.length)
      e = this.createE$0();
    else {
      e = this._liblib11$_stack$1(t1);
      this.resetE$1(e);
    }
    this._nextI = this._nextI + 1;
    return e;
  },
  reset$0: function(_) {
    this._nextI = 0;
  }
},

Checker_T1$: function() {
  return new $.Checker_T1($.IntersectionFinderXY$());
},

QuadTreeXYAabb$: function(x, y, w, h, maxDepth, maxChildren) {
  var t1, t2, t3, t4;
  t1 = $.Aabb3$();
  t2 = $.Vector3$zero();
  t3 = $.List_List(null, null);
  t4 = $.List_List(4, $.QuadTreeXYAabb);
  $.setRuntimeTypeInfo(t4, [$.QuadTreeXYAabb]);
  t4 = new $.QuadTreeXYAabb(t1, t2, maxDepth, maxChildren << 1 >>> 0, t3, t4, true);
  t4.QuadTreeXYAabb$6(x, y, w, h, maxDepth, maxChildren);
  return t4;
},

Resolver_Noop$: function() {
  return new $.Resolver_Noop();
},

Resolver_Backward$: function() {
  return new $.Resolver_Backward();
},

Space_Noop$: function() {
  return new $.Space_Noop();
},

Space_XY0$: function(checker, resolver) {
  return new $.Space_XY0($.List_List(null, null), $.List_List(null, null), checker, resolver, $.Vector4$zero());
},

Space_QuadtreeXY$: function(checker, resolver, grid) {
  var t1, t2, t3;
  t1 = $.Vector4$zero();
  t2 = $._ProviderStack$($._SQE);
  t2.createE = $._SQE_ctor$closure;
  t2.resetE = $._SQE_reset$closure;
  t3 = grid;
  return new $.Space_QuadtreeXY(t3, checker, resolver, t1, t2);
},

_SQE$: function() {
  return new $._SQE($.Aabb3$(), null, null, null);
},

_SQE_ctor: function() {
  return $._SQE$();
},

_SQE_reset: function(e) {
  e.set$ps(null);
  e.set$i(-1);
  e.set$segment(null);
},

_ProviderStack$: function(E) {
  var t1 = $.List_List(null, E);
  $.setRuntimeTypeInfo(t1, [E]);
  t1 = new $._ProviderStack(null, null, t1, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
}}],
["colors", "package:dartemis_toolbox/colors.dart", , {
hsl_irgba_hue2rgb: {"": "Closure;",
  call$3: function(p, q, t) {
    var t1 = $.getInterceptor$n(t);
    if (t1.$lt(t, 0))
      t = t1.$add(t, 1);
    t1 = $.getInterceptor$n(t);
    if (t1.$gt(t, 1))
      t = t1.$sub(t, 1);
    t1 = $.getInterceptor$n(t);
    if (t1.$lt(t, 0.16666666666666666))
      return $.$add$ns(p, $.$mul$n($.$mul$n($.$sub$n(q, p), 6), t));
    if (t1.$lt(t, 0.5))
      return q;
    if (t1.$lt(t, 0.6666666666666666)) {
      t1 = $.$sub$n(q, p);
      if (typeof t !== "number")
        throw $.iae(t);
      return $.$add$ns(p, $.$mul$n($.$mul$n(t1, 0.6666666666666666 - t), 6));
    }
    return p;
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

irgba_r1: function(c) {
  if (typeof c !== "number")
    throw c.$and();
  return $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24) / 255;
},

irgba_g1: function(c) {
  if (typeof c !== "number")
    throw c.$and();
  return $.JSInt_methods.$shr(c & 16711680, 16) / 255;
},

irgba_b1: function(c) {
  if (typeof c !== "number")
    throw c.$and();
  return $.JSInt_methods.$shr(c & 65280, 8) / 255;
},

rgb1_irgba: function(r, g, b) {
  var t1, t2, t3;
  t1 = $.toInt$0$n($.$mul$n(r, 255));
  if (typeof t1 !== "number")
    throw t1.$shl();
  t2 = $.toInt$0$n($.$mul$n(g, 255));
  if (typeof t2 !== "number")
    throw t2.$shl();
  t3 = $.toInt$0$n($.$mul$n(b, 255));
  if (typeof t3 !== "number")
    throw t3.$shl();
  return (255 | t1 << 24 | t2 << 16 | t3 << 8) >>> 0;
},

irgba_hsl: function(c) {
  var r, g, b, max, min, t1, l, h, s, d;
  if (typeof c !== "number")
    throw c.$and();
  r = $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24) / 255;
  g = $.JSInt_methods.$shr(c & 16711680, 16) / 255;
  b = $.JSInt_methods.$shr(c & 65280, 8) / 255;
  max = $.max($.max(r, g), b);
  min = $.min($.min(r, g), b);
  t1 = max + min;
  l = t1 / 2;
  if (max === min) {
    h = 0;
    s = 0;
  } else {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / t1;
    if (max === r) {
      t1 = g < b ? 6 : 0;
      h = (g - b) / d + t1;
    } else
      h = max === g ? (b - r) / d + 2 : (r - g) / d + 4;
    h /= 6;
  }
  return [h, s, l];
},

hsl_irgba: function(hsl) {
  var t1, t2, h, s, l, b, g, r, q, p;
  if (typeof hsl !== "string" && (typeof hsl !== "object" || hsl === null || hsl.constructor !== Array && !$.isJsIndexable(hsl, hsl[$.dispatchPropertyName])))
    return $.hsl_irgba$bailout(1, hsl);
  t1 = $.getInterceptor(hsl);
  t2 = hsl.length;
  if (0 >= t2)
    throw $.ioore(0);
  h = hsl[0];
  if (typeof h !== "number")
    return $.hsl_irgba$bailout(2, hsl, t1, h);
  if (1 >= t2)
    throw $.ioore(1);
  s = hsl[1];
  if (typeof s !== "number")
    return $.hsl_irgba$bailout(3, hsl, t1, h, s);
  if (2 >= t2)
    throw $.ioore(2);
  l = hsl[2];
  if (typeof l !== "number")
    return $.hsl_irgba$bailout(4, 0, 0, h, s, l);
  t2 = new $.hsl_irgba_hue2rgb();
  if (s === 0) {
    b = l;
    g = b;
    r = g;
  } else {
    q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    p = 2 * l - q;
    r = t2.call$3(p, q, h + 0.3333333333333333);
    if (typeof r !== "number")
      return $.hsl_irgba$bailout(5, 0, t2, h, 0, 0, $.JSNumber_methods, p, q, r);
    g = t2.call$3(p, q, h);
    if (typeof g !== "number")
      return $.hsl_irgba$bailout(6, 0, t2, h, 0, 0, $.JSNumber_methods, p, q, r, g);
    b = t2.call$3(p, q, h - 0.3333333333333333);
    if (typeof b !== "number")
      return $.hsl_irgba$bailout(7, 0, 0, 0, 0, 0, 0, 0, 0, r, g, b);
  }
  return $.rgb1_irgba(r, g, b);
},

hsl_irgba$bailout: function(state0, hsl, t1, h, s, l, t2, p, q, r, g, b) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$asx(hsl);
      h = t1.$index(hsl, 0);
    case 2:
      state0 = 0;
      s = t1.$index(hsl, 1);
    case 3:
      state0 = 0;
      l = t1.$index(hsl, 2);
    case 4:
      state0 = 0;
      t1 = new $.hsl_irgba_hue2rgb();
    default:
      if (state0 === 0 && $.$eq(s, 0)) {
        b = l;
        g = b;
        r = g;
      } else
        switch (state0) {
          case 0:
            t2 = $.getInterceptor$n(l);
            if (t2.$lt(l, 0.5)) {
              if (typeof s !== "number")
                throw $.iae(s);
              q = t2.$mul(l, 1 + s);
            } else
              q = $.$sub$n(t2.$add(l, s), t2.$mul(l, s));
            if (typeof l !== "number")
              throw $.iae(l);
            if (typeof q !== "number")
              throw $.iae(q);
            p = 2 * l - q;
            t2 = $.getInterceptor$ns(h);
            r = t1.call$3(p, q, t2.$add(h, 0.3333333333333333));
          case 5:
            state0 = 0;
            g = t1.call$3(p, q, h);
          case 6:
            state0 = 0;
            b = t1.call$3(p, q, t2.$sub(h, 0.3333333333333333));
          case 7:
            state0 = 0;
        }
      return $.rgb1_irgba(r, g, b);
  }
},

irgba_hsv: function(c) {
  var r, g, b, max, min, d, s, h, t1;
  r = $.irgba_r1(c);
  g = $.irgba_g1(c);
  b = $.irgba_b1(c);
  max = $.max($.max(r, g), b);
  min = $.min($.min(r, g), b);
  d = max - min;
  s = max === 0 ? 0 : d / max;
  if (max === min)
    h = 0;
  else {
    if (max === r) {
      t1 = g < b ? 6 : 0;
      h = (g - b) / d + t1;
    } else
      h = max === g ? (b - r) / d + 2 : (r - g) / d + 4;
    h /= 6;
  }
  return [h, s, max];
},

hsv_irgba: function(hsv) {
  var t1, h2, s, v, c, t2, x, r, g, b, m;
  t1 = $.getInterceptor$asx(hsv);
  h2 = $.$mul$n(t1.$index(hsv, 0), 6);
  s = t1.$index(hsv, 1);
  v = t1.$index(hsv, 2);
  t1 = $.getInterceptor$n(v);
  c = t1.$mul(v, s);
  t2 = $.getInterceptor$n(h2);
  if (typeof h2 !== "number")
    throw h2.$mod();
  x = $.$mul$n(c, 1 - $.JSNumber_methods.abs$0(t2.$mod(h2, 2) - 1));
  r = 0;
  g = 0;
  b = 0;
  switch ($.JSNumber_methods.$mod(t2.floor$0(h2), 6)) {
    case 0:
      g = x;
      r = c;
      b = 0;
      break;
    case 1:
      g = c;
      r = x;
      b = 0;
      break;
    case 2:
      b = x;
      g = c;
      r = 0;
      break;
    case 3:
      b = c;
      g = x;
      r = 0;
      break;
    case 4:
      b = c;
      r = x;
      g = 0;
      break;
    case 5:
      b = x;
      r = c;
      g = 0;
      break;
  }
  m = t1.$sub(v, c);
  return $.rgb1_irgba($.$add$ns(r, m), $.$add$ns(g, m), $.$add$ns(b, m));
},

hsl_tetrad: function(hsl) {
  var t1, h, t2, t3;
  t1 = hsl.length;
  if (0 >= t1)
    throw $.ioore(0);
  h = hsl[0];
  t2 = $.JSNumber_methods.$mod(h + 0.25, 1);
  if (1 >= t1)
    throw $.ioore(1);
  t3 = hsl[1];
  if (2 >= t1)
    throw $.ioore(2);
  t1 = hsl[2];
  return [hsl, [t2, t3, t1], [$.JSNumber_methods.$mod(h + 0.5, 1), t3, t1], [$.JSNumber_methods.$mod(h + 0.75, 1), t3, t1]];
},

hsv_monochromatic: function(hsv, results) {
  var t1, h, s, v, ret, modification, i;
  t1 = hsv.length;
  if (0 >= t1)
    throw $.ioore(0);
  h = hsv[0];
  if (1 >= t1)
    throw $.ioore(1);
  s = hsv[1];
  if (2 >= t1)
    throw $.ioore(2);
  v = hsv[2];
  if (typeof v !== "number")
    return $.hsv_monochromatic$bailout(1, h, s, results, v, hsv);
  ret = $.List_List(results, [$.JSArray, $.JSDouble]);
  $.setRuntimeTypeInfo(ret, [[$.JSArray, $.JSDouble]]);
  modification = 1 / results;
  t1 = ret.length;
  if (0 >= t1)
    throw $.ioore(0);
  ret[0] = hsv;
  for (i = 1; i < results; ++i) {
    v = $.JSNumber_methods.$mod(v + modification, 1);
    if (i >= t1)
      throw $.ioore(i);
    ret[i] = [h, s, v];
  }
  return ret;
},

hsv_monochromatic$bailout: function(state0, h, s, results, v, hsv) {
  var ret, modification, t1, i, t2;
  ret = $.List_List(results, [$.JSArray, $.JSDouble]);
  $.setRuntimeTypeInfo(ret, [[$.JSArray, $.JSDouble]]);
  modification = 1 / results;
  t1 = ret.length;
  if (0 >= t1)
    throw $.ioore(0);
  ret[0] = hsv;
  for (i = 1; i < results; ++i) {
    t2 = $.$add$ns(v, modification);
    if (typeof t2 !== "number")
      throw t2.$mod();
    v = $.JSNumber_methods.$mod(t2, 1);
    if (i >= t1)
      throw $.ioore(i);
    ret[i] = [h, s, v];
  }
  return ret;
},

irgba_rgbaString: function(c) {
  var r, g, b;
  if (typeof c !== "number")
    throw c.$and();
  r = $.JSInt_methods.$shr((c & 4278190080) >>> 0, 24);
  g = $.JSInt_methods.$shr(c & 16711680, 16);
  b = $.JSInt_methods.$shr(c & 65280, 8);
  return "rgba(" + r + ", " + g + ", " + b + ", " + (c & 255) / 255 + ")";
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var $arguments, t1, t2;
    $arguments = $.getRuntimeTypeArguments(this, "ListIterable");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = new $.ListIterator(this, this.get$length(this), 0, null);
    $.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  get$isEmpty: function(_) {
    var t1 = this.get$length(this);
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout1(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout1: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element))
        return true;
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    return false;
  },
  join$1: function(_, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(this);
    if (!$.JSString_methods.get$isEmpty(separator)) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException(new $.ConcurrentModificationError(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException(new $.ConcurrentModificationError(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  where$1: function(_, test) {
    return $.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    return value;
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(this, "ListIterable", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, "ListIterable", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, E) {
    var t1, t2, t3;
    t1 = this._start;
    t2 = $.getInterceptor$n(t1);
    if (t2.$lt(t1, 0))
      throw $.wrapException($.RangeError$value(t1));
    t3 = this._endOrLength;
    if (t3 != null) {
      if ($.$lt$n(t3, 0))
        throw $.wrapException($.RangeError$value(t3));
      if (t2.$gt(t1, t3))
        throw $.wrapException($.RangeError$range(t1, 0, t3));
    }
  },
  $asListIterable: null,
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1, $arguments, t2, t3;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    $arguments = $.getRuntimeTypeArguments(this, "MappedIterable");
    t2 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    $arguments = $.getRuntimeTypeArguments(this, "MappedIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 1);
    t1 = new $.MappedIterator(null, t1, this._f);
    $.setRuntimeTypeInfo(t1, [t2, t3]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $asIterator: function (S, T) { return [T]; }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1, $arguments, t2;
    t1 = $.get$iterator$ax(this._iterable);
    $arguments = $.getRuntimeTypeArguments(this, "WhereIterable");
    t2 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t1 = new $.WhereIterator(t1, this._f);
    $.setRuntimeTypeInfo(t1, [t2]);
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

TakeIterable: {"": "IterableBase;_iterable,_takeCount",
  get$iterator: function(_) {
    var t1, t2, $arguments, t3, t4;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = this._takeCount;
    $arguments = $.getRuntimeTypeArguments(this, "TakeIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t3 = t3;
    t4 = new $.TakeIterator(t1, t2);
    $.setRuntimeTypeInfo(t4, [t3]);
    t4.TakeIterator$2(t1, t2, t3);
    return t4;
  },
  $asIterableBase: null,
  $asIterable: null
},

TakeIterator: {"": "Iterator;_iterator,_remaining",
  moveNext$0: function() {
    var t1 = this._remaining;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    this._remaining = t1 - 1;
    t1 = this._remaining;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(2, t1);
    if (t1 >= 0)
      return this._iterator.moveNext$0();
    this._remaining = -1;
    return false;
  },
  moveNext$0$bailout1: function(state0, t1) {
    switch (state0) {
      case 0:
        t1 = this._remaining;
      case 1:
        state0 = 0;
        this._remaining = $.$sub$n(t1, 1);
        t1 = this._remaining;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, 0))
          return this._iterator.moveNext$0();
        this._remaining = -1;
        return false;
    }
  },
  get$current: function() {
    var t1 = this._remaining;
    if (typeof t1 !== "number")
      return this.get$current$bailout1(1, t1);
    if (t1 < 0)
      return;
    return this._iterator.get$current();
  },
  get$current$bailout1: function(state0, t1) {
    if ($.$lt$n(t1, 0))
      return;
    return this._iterator.get$current();
  },
  TakeIterator$2: function(_iterator, _remaining, E) {
  },
  $asIterator: null
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    var t1, t2, $arguments, t3, t4;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = this._skipCount;
    $arguments = $.getRuntimeTypeArguments(this, "SkipIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t3 = t3;
    t4 = new $.SkipIterator(t1, t2);
    $.setRuntimeTypeInfo(t4, [t3]);
    t4.SkipIterator$2(t1, t2, t3);
    return t4;
  },
  $asIterableBase: null,
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from a fixed-length list"));
  },
  removeAll$1: function(receiver, elements) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear a fixed-length list"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from a fixed-length list"));
  }
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i >>> 0 !== i || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart))
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
},

SubListIterable$: function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, E);
  return t1;
},

ListIterator$: function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

MappedIterable$: function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
},

MappedListIterable$: function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
},

WhereIterable$: function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i] === iterable)
      return $.S(leftDelimiter) + "..." + $.S(rightDelimiter);
  }
  result = $.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return $.toString$0(result);
},

IterableMixinWorkaround_where: function(iterable, f) {
  return $.WhereIterable$(iterable, f, null);
},

IterableMixinWorkaround_mapList: function(list, f) {
  return $.MappedListIterable$(list, f, null, null);
},

IterableMixinWorkaround_takeList: function(list, n) {
  return $.SubListIterable$(list, 0, n, null);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if (typeof $length !== "number")
    throw $.iae($length);
  t1 = $.get$length$asx(otherList);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (otherStart + $length > t1)
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
}}],
["dart.async", "dart:async", , {
Future: {"": "Object;", $isFuture: true},

_Completer: {"": "Object;",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this._setFutureValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this._setFutureError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function(T) {
    this.future._zone.expectCallback$0();
  }
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var future = this.future;
    future._asyncSetValue$1(value);
    future._zone.cancelCallbackExpectation$0();
  },
  _setFutureError$1: function(error) {
    var future = this.future;
    future._asyncSetError$1(error);
    future._zone.cancelCallbackExpectation$0();
  },
  $as_Completer: null
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValueUnchecked$1(value);
  },
  _sendError$1: function(error) {
    this.future._setErrorUnchecked$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this.future._inSameErrorZone$1(otherZone);
  }
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener@,_listener",
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException($.UnsupportedError$("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $._Zone_current().handleUncaughtError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_zone<,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 2) !== 0;
  },
  get$_isComplete: function() {
    return this._state >= 8;
  },
  get$_mayComplete: function() {
    return this._state === 0;
  },
  get$_hasValue: function() {
    return this._state === 8;
  },
  get$_hasUnhandledError: function() {
    return this._state >= 16;
  },
  _clearUnhandledError$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = $._ThenFuture$(f, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = $._SubscribeFuture$(f, onError, null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = new $._CatchErrorFuture(test, f, null, 0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(t1, [null]);
    t1._TransformFuture$0(null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this._zone.inSameErrorZone$1(otherZone);
  },
  _setValue$1: function(value) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setValueUnchecked$1: function(value) {
    var listeners, listeners0;
    listeners = this.get$_isChained() ? null : this._removeListeners$0();
    this._state = 8;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  _setError$1: function(error) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _setErrorUnchecked$1: function(error) {
    var hasListeners, listeners, listeners0;
    if (this.get$_isChained()) {
      hasListeners = this._state === 2;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 12;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  _asyncSetValue$1: function(value) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetValue_closure(this, value));
  },
  _asyncSetError$1: function(error) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetError_closure(this, error));
  },
  _scheduleUnhandledError$0: function() {
    this._state = 28;
    $.runAsync(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1 = {};
    t1.listener_0 = listener;
    if (!t1.listener_0._inSameErrorZone$1(this._zone))
      t1.listener_0 = $._ErrorZoneBoundaryListener$(t1.listener_0);
    if (this.get$_isChained()) {
      this._state = 2;
      this.get$_chainSource()._addListener$1(t1.listener_0);
      return;
    }
    if (this.get$_isComplete()) {
      this._clearUnhandledError$0();
      $.runAsync(new $._FutureImpl__addListener_closure(t1, this));
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      future._chainFromFuture$1(this);
    else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1;
    if (resultSource.get$_isChained())
      resultSource = resultSource.get$_chainSource();
    if (this === resultSource) {
      this._setError$1($.StateError$("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    resultSource._addListener$1(this._asListener$0());
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 2 : 6;
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 8;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  $isFunction: true
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true
},

_FutureImpl__asyncSetValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._setValueUnchecked$1(this.value_1);
  },
  $isFunction: true,
  $is_void_: true
},

_FutureImpl__asyncSetError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    this.this_0._setErrorUnchecked$1(this.error_1);
  },
  $isFunction: true,
  $is_void_: true
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  },
  $isFunction: true,
  $is_void_: true
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = t1.get$_hasValue();
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  },
  $isFunction: true,
  $is_void_: true
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _sendValue$1: function(value) {
    this._zone.executeCallback$1(new $._TransformFuture__sendValue_closure(this, value));
  },
  _sendError$1: function(error) {
    this._zone.executeCallback$1(new $._TransformFuture__sendError_closure(this, error));
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _TransformFuture$0: function(S, T) {
    this._zone.expectCallback$0();
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  },
  $isFunction: true,
  $is_void_: true
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  },
  $isFunction: true,
  $is_void_: true
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_zone,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
},

_WhenFuture__zonedSendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  },
  $isFunction: true
},

_WhenFuture__zonedSendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $isFunction: true
},

Stream: {"": "Object;",
  where$1: function(_, test) {
    return $._WhereStream$(this, test, $.getRuntimeTypeArgument(this, "Stream", 0));
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, "Stream", 0), null);
  },
  join$1: function(_, separator) {
    var t1, result, buffer;
    t1 = {};
    result = $._FutureImpl$($.JSString);
    buffer = $.StringBuffer$("");
    t1.subscription_0 = null;
    t1.first_1 = true;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_join_closure(t1, this, separator, result, buffer), true, new $.Stream_join_closure0(result, buffer), new $.Stream_join_closure1(result));
    return result;
  },
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_contains_closure(t1, this, needle, future), true, new $.Stream_contains_closure0(future), future.get$_setError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(future, [null]);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, this, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(future, [$.JSInt]);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(future, [$.JSBool]);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    future = $._FutureImpl$([$.JSArray, $.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_toList_closure(this, result), true, new $.Stream_toList_closure0(result, future), future.get$_setError());
    return future;
  }
},

Stream_join_closure: {"": "Closure;box_0,this_1,separator_2,result_3,buffer_4",
  call$1: function(element) {
    var e, s, t1, exception, t2;
    t1 = this.box_0;
    if (!t1.first_1)
      this.buffer_4.write$1(this.separator_2);
    t1.first_1 = false;
    try {
      this.buffer_4.write$1(element);
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.subscription_0.cancel$0();
      this.result_3._setError$1($._asyncError(e, s));
    }

  },
  $isFunction: true
},

Stream_join_closure1: {"": "Closure;result_5",
  call$1: function(e) {
    this.result_5._setError$1(e);
  },
  $isFunction: true
},

Stream_join_closure0: {"": "Closure;result_6,buffer_7",
  call$0: function() {
    var t1 = this.buffer_7;
    this.result_6._setValue$1(t1.toString$0(t1));
  },
  $isFunction: true,
  $is_void_: true
},

Stream_contains_closure: {"": "Closure;box_0,this_1,needle_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    $._runUserCode(new $.Stream_contains__closure(this.needle_2, element), new $.Stream_contains__closure0(t1, t2), $._cancelAndError(t1.subscription_0, t2));
  },
  $isFunction: true
},

Stream_contains__closure: {"": "Closure;needle_4,element_5",
  call$0: function() {
    return $.$eq(this.element_5, this.needle_4);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_contains__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_6._setValue$1(true);
    }
  },
  $isFunction: true
},

Stream_contains_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._setValue$1(false);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_2, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_3));
  },
  $isFunction: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $isFunction: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._setValue$1(null);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_isEmpty_closure: {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  $isFunction: true
},

Stream_isEmpty_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true,
  $is_void_: true
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  $isFunction: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._setValue$1(this.result_2);
  },
  $isFunction: true,
  $is_void_: true
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_onData,_onError,_onDone,_zone<,_state@,_pending",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var wasPaused, wasInputPaused;
    if (this.get$_isCanceled())
      return;
    wasPaused = this.get$_isPaused();
    wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state + 64 | 4) >>> 0;
    if (!wasPaused && this._pending != null)
      this._pending.cancelSchedule$0();
    if (!wasInputPaused && !this.get$_inCallback())
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this.get$_isCanceled())
      return;
    if (this.get$_isPaused()) {
      this._decrementPauseCount$0();
      if (!this.get$_isPaused()) {
        if (this.get$_hasPending()) {
          var t1 = this._pending;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = (this._state & 4294967291) >>> 0;
          if (!this.get$_inCallback())
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    if (this.get$_isCanceled())
      return;
    this._cancel$0();
    if (!this.get$_inCallback()) {
      this._state = (this._state | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  get$_isInputPaused: function() {
    return (this._state & 4) !== 0;
  },
  get$_liblib12$_isClosed: function() {
    return (this._state & 2) !== 0;
  },
  get$_isCanceled: function() {
    return (this._state & 8) !== 0;
  },
  get$_inCallback: function() {
    return (this._state & 16) !== 0;
  },
  get$_hasPending: function() {
    return (this._state & 32) !== 0;
  },
  get$_isPaused: function() {
    return this._state >= 64;
  },
  get$_canFire: function() {
    return this._state < 16;
  },
  get$_mayResumeInput: function() {
    if (!this.get$_isPaused()) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  get$_cancelOnError: function() {
    return (this._state & 1) !== 0;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    this._zone.cancelCallbackExpectation$0();
    if (this.get$_hasPending())
      this._pending.cancelSchedule$0();
  },
  _decrementPauseCount$0: function() {
    this._state = this._state - 64;
  },
  _liblib12$_add$1: function(data) {
    if (this.get$_isCanceled())
      return;
    if (this.get$_canFire())
      this._sendData$1(data);
    else
      this._addPending$1($._DelayedData$(data, null));
  },
  _addError$1: function(error) {
    if (this.get$_isCanceled())
      return;
    if (this.get$_canFire())
      this._sendError$1(error);
    else
      this._addPending$1($._DelayedError$(error));
  },
  _close$0: function() {
    if (this.get$_isCanceled())
      return;
    this._state = (this._state | 2) >>> 0;
    if (this.get$_canFire())
      this._sendDone$0();
    else
      this._addPending$1($.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.Bound__onPause__BufferingStreamSubscription(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.Bound__onResume__BufferingStreamSubscription(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending = this._pending;
    if (pending == null) {
      pending = $._StreamImplEvents$();
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    if (!this.get$_hasPending()) {
      this._state = (this._state | 32) >>> 0;
      if (!this.get$_isPaused())
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    this._zone.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendData_closure(this, data));
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1(wasInputPaused);
  },
  _sendError$1: function(error) {
    var wasInputPaused, t1;
    wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    t1 = this._zone;
    if (!t1.inSameErrorZone$1($._Zone_current()))
      $._Zone_current().handleUncaughtError$1(error);
    else
      t1.executePeriodicCallbackGuarded$1(new $._BufferingStreamSubscription__sendError_closure(this, error));
    this._state = (this._state & 4294967279) >>> 0;
    if (this.get$_cancelOnError())
      this._cancel$0();
    this._checkState$1(wasInputPaused);
  },
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    this._zone.executeCallbackGuarded$1(this._onDone);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var wasInputPaused = this.get$_isInputPaused();
    this._state = (this._state | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1(wasInputPaused);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if (this.get$_hasPending()) {
      t1 = this._pending;
      t1 = t1.get$isEmpty(t1);
    } else
      t1 = false;
    if (t1) {
      this._state = (this._state & 4294967263) >>> 0;
      if (this.get$_isInputPaused() && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    if (this.get$_hasPending() && !this.get$_isPaused())
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError, T) {
    this._zone.expectCallback$0();
  }
},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._onData$1(this.data_1);
  },
  $isFunction: true,
  $is_void_: true
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  },
  $isFunction: true,
  $is_void_: true
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  },
  $as_DelayedEvent: null
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException($.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;_state@",
  get$isScheduled: function() {
    return this._state === 1;
  },
  get$_eventScheduled: function() {
    return this._state >= 1;
  },
  schedule$1: function(dispatch) {
    if (this.get$isScheduled())
      return;
    if (this.get$_eventScheduled()) {
      this._state = 1;
      return;
    }
    $.runAsync(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this.get$isScheduled())
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  $isFunction: true,
  $is_void_: true
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this.get$isScheduled())
      this.cancelSchedule$0();
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, "_ForwardingStream", 0), $.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
  },
  _handleData$2: function(data, sink) {
    sink._liblib12$_add$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._addError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._close$0();
  },
  $asStream: function (S, T) { return [T]; }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_pending",
  _liblib12$_add$1: function(data) {
    if (this.get$_liblib12$_isClosed())
      return;
    $._BufferingStreamSubscription.prototype._liblib12$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if (this.get$_liblib12$_isClosed())
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.Bound__onPause__ForwardingStreamSubscription(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.Bound__onResume__ForwardingStreamSubscription(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.Bound__handleDone__ForwardingStreamSubscription(this, "_handleDone$0", null);
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._liblib12$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function (S, T) { return [T]; }
},

_WhereStream: {"": "_ForwardingStream;_test,_liblib12$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      sink._liblib12$_add$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

_MapStream: {"": "_ForwardingStream;_transform,_liblib12$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    sink._liblib12$_add$1(outputEvent);
  },
  $as_ForwardingStream: null
},

_TakeStream: {"": "_ForwardingStream;_liblib12$_remaining,_liblib12$_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$gt$n(this._liblib12$_remaining, 0)) {
      sink._liblib12$_add$1(inputEvent);
      this._liblib12$_remaining = $.$sub$n(this._liblib12$_remaining, 1);
      if ($.$eq(this._liblib12$_remaining, 0))
        sink._close$0();
    }
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

_SkipStream: {"": "_ForwardingStream;_liblib12$_remaining,_liblib12$_source",
  _handleData$2: function(inputEvent, sink) {
    var t1, t2;
    t1 = this._liblib12$_remaining;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      this._liblib12$_remaining = t2.$sub(t1, 1);
      return;
    }
    return sink._liblib12$_add$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

_ZoneBase: {"": "Object;_parentZone,_liblib12$_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.get$_errorZone(), otherZone.get$_errorZone());
  },
  fork$0: function() {
    return this;
  },
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  cancelCallbackExpectation$0: function() {
    this._openCallbacks = this._openCallbacks - 1;
    this._checkIfDone$0();
  },
  _dispose$0: function() {
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && $.JSArray_methods.get$isEmpty(this._liblib12$_children))
      this._dispose$0();
  },
  executeCallback$1: function(f) {
    this._openCallbacks = this._openCallbacks - 1;
    this._runUnguarded$1(f);
  },
  executeCallbackGuarded$1: function(f) {
    this._openCallbacks = this._openCallbacks - 1;
    this._runGuarded$1(f);
  },
  executePeriodicCallbackGuarded$1: function(f) {
    this._runGuarded$1(f);
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  _runGuarded$1: function(f) {
    return this._runInZone$2(f, true);
  },
  _runUnguarded$1: function(f) {
    return this._runInZone$2(f, false);
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  },
  createTimer$2: function(duration, callback) {
    return $._ZoneTimer$(this, duration, callback);
  },
  _ZoneBase$_defaultZone$0: function() {
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_liblib12$_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone.expectCallback$0();
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.print("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.print("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  },
  $isFunction: true,
  $is_void_: true
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    this.zone_1.executeCallbackGuarded$1(this.f_0);
  },
  $isFunction: true,
  $is_void_: true
},

_ZoneTimer: {"": "Object;_zone<,_liblib12$_callback,_timer",
  _run$0: function() {
    this._zone.executeCallbackGuarded$1(this._liblib12$_callback);
  },
  get$_run: function() {
    return new $.Bound__run__ZoneTimer(this, "_run$0", null);
  },
  _ZoneTimer$3: function(_zone, duration, _callback) {
    this._zone.expectCallback$0();
    this._timer = $._createTimer(duration, this.get$_run());
  }
},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._liblib0$_head !== t1._liblib0$_tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  t1.add$1(t1, callback);
  if (!$._callbacksAreEnqueued) {
    $._AsyncRun__enqueueImmediate($._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_AsyncRun__enqueueImmediate: function(callback) {
  var milliseconds = $.Duration_0.get$inMilliseconds();
  $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future_Future$value: function(value, T) {
  return $._FutureImpl$immediate(value, T);
},

Future_wait: function(futures) {
  return $._FutureImpl__FutureImpl$wait(futures, $.JSArray);
},

Completer_Completer: function(T) {
  return $._AsyncCompleter$(T);
},

_AsyncCompleter$: function(T) {
  var t1, t2;
  t1 = T;
  t2 = new $._AsyncCompleter($._FutureImpl$(t1), false);
  $.setRuntimeTypeInfo(t2, [T]);
  t2._Completer$0(t1);
  return t2;
},

_FutureListener__FutureListener$wrap: function(future, T) {
  return $._FutureListenerWrapper$(future, null);
},

_FutureListenerWrapper$: function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_ErrorZoneBoundaryListener$: function(_listener) {
  return new $._ErrorZoneBoundaryListener(null, _listener);
},

_FutureImpl$: function(T) {
  var t1 = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_FutureImpl$immediate: function(value, T) {
  var t1 = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
},

_FutureImpl__FutureImpl$wait: function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0))
    return $.Future_Future$value($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $.Completer_Completer($.JSArray);
  return t1.completer_0.future;
},

_ThenFuture$: function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._TransformFuture$0(S, T);
  return t1;
},

_SubscribeFuture$: function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._TransformFuture$0(S, T);
  return t1;
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $._Zone_current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_DelayedData$: function(value, T) {
  var t1 = new $._DelayedData(value, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_DelayedError$: function(error) {
  return new $._DelayedError(error, null);
},

_StreamImplEvents$: function() {
  return new $._StreamImplEvents(null, null, 0);
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
  var t1, t2;
  t1 = $._Zone_current();
  t2 = cancelOnError ? 1 : 0;
  t2 = new $._ForwardingStreamSubscription(_stream, null, onData, onError, onDone, t1, t2, null);
  $.setRuntimeTypeInfo(t2, [S, T]);
  t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, T);
  t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, S, T);
  return t2;
},

_WhereStream$: function(source, test, T) {
  var t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_MapStream$: function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
},

Timer_Timer: function(duration, callback) {
  return $._Zone_current().createTimer$2(duration, callback);
},

Timer_run: function(callback) {
  $.Timer_Timer($.Duration_0, callback);
},

_createTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_Zone_current: function() {
  return $.get$_Zone__current();
},

_DefaultZone$: function() {
  var t1 = new $._DefaultZone(null, [], 0, false);
  t1._ZoneBase$_defaultZone$0();
  return t1;
},

_ZoneTimer$: function(_zone, duration, _callback) {
  var t1 = new $._ZoneTimer(_zone, _callback, null);
  t1._ZoneTimer$3(_zone, duration, _callback);
  return t1;
}}],
["dart.collection", "dart:collection", , {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
},

HashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2, $arguments, t3;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    $arguments = $.getRuntimeTypeArguments(this, "HashMapKeyIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = new $.HashMapKeyIterator(t1, t2, 0, null);
    $.setRuntimeTypeInfo(t2, [t3]);
    return t2;
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_liblib0$_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._liblib0$_offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._liblib0$_offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
},

LinkedHashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2, $arguments, t3, t4;
    t1 = this._map;
    t2 = t1._modifications;
    $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMapKeyIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t3 = t3;
    t4 = new $.LinkedHashMapKeyIterator(t1, t2, null, null);
    $.setRuntimeTypeInfo(t4, [t3]);
    t4.LinkedHashMapKeyIterator$2(t1, t2, t3);
    return t4;
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  }
},

LinkedHashSetCell: {"": "Object;_liblib0$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_liblib0$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashSetIterator$2: function(_set, _modifications, E) {
    this._cell = this._set._first;
  }
},

HashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, "HashMap", 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if ($.HashMap__isStringKey(key)) {
      strings = this._strings;
      return strings == null ? false : $.HashMap__hasTableEntry(strings, key);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      return nums == null ? false : $.HashMap__hasTableEntry(nums, key);
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex($.HashMap__getBucket(rest, key), key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.HashMap__computeHashCode(key)];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      if (!$.HashMap__hasTableEntry(strings, key)) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      if (!$.HashMap__hasTableEntry(nums, key)) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if ($.HashMap__isStringKey(key))
      return this._removeHashTableEntry$2(this._strings, key);
    else if ($.HashMap__isNumericKey(key))
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = $.HashMap__getBucket(rest, key);
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._liblib0$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib0$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && $.HashMap__hasTableEntry(table, key)) {
      value = $.HashMap__getTableEntry(table, key);
      $.HashMap__deleteTableEntry(table, key);
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      buffer.write$1($.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer.toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      buffer.write$1($.S(iterator.get$current()));
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer.toString$0(buffer);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  get$isNotEmpty: function(_) {
    return this.get$isEmpty(this) !== true;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException($.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

LinkedHashMap: {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(key) {
    var strings, nums, rest;
    if ($.LinkedHashMap__isStringKey(key)) {
      strings = this._strings;
      if (strings == null)
        return false;
      return $.LinkedHashMap__getTableEntry(strings, key) != null;
    } else if ($.LinkedHashMap__isNumericKey(key)) {
      nums = this._nums;
      if (nums == null)
        return false;
      return $.LinkedHashMap__getTableEntry(nums, key) != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex($.LinkedHashMap__getBucket(rest, key), key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.LinkedHashMap__computeHashCode(key)];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if ($.LinkedHashMap__isStringKey(key))
      return this._removeHashTableEntry$2(this._strings, key);
    else if ($.LinkedHashMap__isNumericKey(key))
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = $.LinkedHashMap__getBucket(rest, key);
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if (this._liblib0$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib0$_length = 0;
      this._modified$0();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, "LinkedHashMap", 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = $.LinkedHashMap__getTableEntry(table, key);
    if (cell == null)
      $.LinkedHashMap__setTableEntry(table, key, this._newLinkedCell$2(key, value));
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = $.LinkedHashMap__getTableEntry(table, key);
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    $.LinkedHashMap__deleteTableEntry(table, key);
    return cell.get$_value();
  },
  _modified$0: function() {
    this._modifications = this._modifications + 1 & 67108863;
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modified$0();
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modified$0();
  },
  $isLinkedHashMap: true,
  $isMap: true
},

LinkedHashSet: {"": "_HashSetBase;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._modifications;
    t2 = new $.LinkedHashSetIterator(this, t1, null, null);
    $.setRuntimeTypeInfo(t2, [null]);
    t2.LinkedHashSetIterator$2(this, t1, null);
    return t2;
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if ($.LinkedHashSet__isStringElement(object)) {
      strings = this._strings;
      if (strings == null)
        return false;
      return $.LinkedHashSet__getTableEntry(strings, object) != null;
    } else if ($.LinkedHashSet__isNumericElement(object)) {
      nums = this._nums;
      if (nums == null)
        return false;
      return $.LinkedHashSet__getTableEntry(nums, object) != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashSet__findBucketIndex($.LinkedHashSet__getBucket(rest, object), object) >= 0;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_liblib0$_element());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.LinkedHashSet__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashSet__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.LinkedHashSet__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashSet__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.LinkedHashSet__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashSet__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.LinkedHashSet__computeHashCode(object)];
      index = $.LinkedHashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1;
    for (t1 = $.get$iterator$ax(objectsToRemove); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  clear$0: function(_) {
    if (this._liblib0$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib0$_length = 0;
      this._modified$0();
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if ($.LinkedHashSet__getTableEntry(table, element) != null)
      return;
    $.LinkedHashSet__setTableEntry(table, element, this._newLinkedCell$1(element));
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = $.LinkedHashSet__getTableEntry(table, element);
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    $.LinkedHashSet__deleteTableEntry(table, element);
    return true;
  },
  _modified$0: function() {
    this._modifications = this._modifications + 1 & 67108863;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = $.LinkedHashSetCell$(element);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modified$0();
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modified$0();
  },
  $as_HashSetBase: null,
  $asIterable: null
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var $arguments, t1, t2;
    $arguments = $.getRuntimeTypeArguments(receiver, "ListMixin");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = new $.ListIterator(receiver, this.get$length(receiver), 0, null);
    $.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  contains$1: function(receiver, element) {
    var $length, t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.contains$1$bailout(1, element, receiver);
    $length = receiver.length;
    for (t1 = $length !== $length, i = 0; i < $length; ++i) {
      if (receiver[i] === element)
        return true;
      if (t1)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return false;
  },
  contains$1$bailout: function(state0, element, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if ($.$eq(this.$index(receiver, i), element))
        return true;
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return false;
  },
  where$1: function(receiver, test) {
    return $.WhereIterable$(receiver, test, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.JSArray_methods.set$length(result, receiver.length);
    } else {
      result = $.List_List(receiver.length, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, $.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.remove$1$bailout(1, element, receiver);
    for (t1 = receiver.length, i = 0; i < t1; ++i)
      if (receiver[i] === element) {
        this.setRange$4(receiver, i, t1 - 1, receiver, i + 1);
        this.set$length(receiver, receiver.length - 1);
        return true;
      }
    return false;
  },
  remove$1$bailout: function(state0, element, receiver) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      if ($.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, $.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
        return true;
      }
      ++i;
    }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var t1, t2, result;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.removeLast$0$bailout(1, receiver);
    t1 = receiver.length;
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    t2 = t1 - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    result = receiver[t2];
    this.set$length(receiver, t2);
    return result;
  },
  removeLast$0$bailout: function(state0, receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !$.isJsIndexable(iterable, iterable[$.dispatchPropertyName])))
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException(new $.ArgumentError(skipCount));
    otherStart = skipCount;
    otherList = iterable;
    if (otherStart + $length > otherList.length)
      throw $.wrapException(new $.StateError("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList) {
    switch (state0) {
      case 0:
      case 1:
        var otherStart, t2, t3, i, t4;
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException(new $.ArgumentError(skipCount));
        otherStart = skipCount;
        otherList = iterable;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)))
          throw $.wrapException(new $.StateError("Not enough elements"));
        if (t2.$lt(otherStart, start))
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t4 = $.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else {
          if (typeof $length !== "number")
            throw $.iae($length);
          t1 = $.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        }
    }
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = $.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    }
    return $.toString$0(result);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $isFunction: true
},

ListQueue: {"": "IterableBase;_table,_liblib0$_head,_liblib0$_tail,_modificationCount",
  get$iterator: function(_) {
    var t1 = new $._ListQueueIterator(this, this._liblib0$_tail, this._modificationCount, this._liblib0$_head, null);
    $.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._liblib0$_head; i !== this._liblib0$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression(new $.ConcurrentModificationError(this));
    }
  },
  get$isEmpty: function(_) {
    return this._liblib0$_head === this._liblib0$_tail;
  },
  get$length: function(_) {
    var t1 = this._liblib0$_tail;
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    return (t1 - this._liblib0$_head & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1) {
    var t2;
    t1 = $.$sub$n(t1, this._liblib0$_head);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & t2.length - 1) >>> 0;
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List(null, $.getRuntimeTypeArgument(this, "ListQueue", 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, "ListQueue", 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!$.getInterceptor(elements).$isList)) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, t1, elements, 0);
        this._liblib0$_tail = $.$add$ns(this._liblib0$_tail, addCount);
      } else {
        t1 = this._liblib0$_tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, t1 + addCount, elements, 0);
          this._liblib0$_tail = $.$add$ns(this._liblib0$_tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, t1 + endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._liblib0$_tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._liblib0$_head; i !== this._liblib0$_tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._liblib0$_head;
    t1 = this._liblib0$_tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._liblib0$_tail = 0;
      this._liblib0$_head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  addLast$1: function(element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._liblib0$_head === this._liblib0$_tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._liblib0$_head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._liblib0$_head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._liblib0$_head === this._liblib0$_tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._liblib0$_tail;
    if (typeof t1 !== "number")
      return this.removeLast$0$bailout(1, t1);
    this._liblib0$_tail = (t1 - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._liblib0$_tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  removeLast$0$bailout: function(state0, t1) {
    var t2;
    t1 = $.$sub$n(t1, 1);
    t2 = this._table;
    if (typeof t1 !== "number")
      throw t1.$and();
    this._liblib0$_tail = (t1 & t2.length - 1) >>> 0;
    t2 = this._table;
    t1 = this._liblib0$_tail;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._liblib0$_tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    ++t2;
    t1 = this._table;
    if (t2 !== (t2 | 0))
      throw t2.$and();
    this._liblib0$_tail = (t2 & t1.length - 1) >>> 0;
    if (this._liblib0$_head === this._liblib0$_tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._liblib0$_head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._liblib0$_tail;
    if (typeof t4 !== "number")
      return this._remove$1$bailout(1, offset, mask, startDistance, t4);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._liblib0$_head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._liblib0$_tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._liblib0$_tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw $.ioore(nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = t4;
      }
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, mask, startDistance, t1) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._liblib0$_head & mask) >>> 0;
        t1 = this._liblib0$_tail;
      case 1:
        state0 = 0;
        t1 = $.$sub$n(t1, offset);
        if (typeof t1 !== "number")
          throw t1.$and();
      case 2:
        var t2, t3, i, prevOffset, t4, nextOffset;
        if (state0 === 0 && startDistance < (t1 & mask) >>> 0) {
          for (t1 = this._liblib0$_head, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t3)
              throw $.ioore(prevOffset);
            t4 = t2[prevOffset];
            if (i < 0 || i >= t3)
              throw $.ioore(i);
            t2[i] = t4;
          }
          if (t1 < 0 || t1 >= t3)
            throw $.ioore(t1);
          t2[t1] = null;
          this._liblib0$_head = (t1 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._liblib0$_tail;
            case 2:
              state0 = 0;
              t1 = $.$sub$n(t1, 1);
              if (typeof t1 !== "number")
                throw t1.$and();
              this._liblib0$_tail = (t1 & mask) >>> 0;
              for (t1 = this._liblib0$_tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t3)
                  throw $.ioore(nextOffset);
                t4 = t2[nextOffset];
                if (i < 0 || i >= t3)
                  throw $.ioore(i);
                t2[i] = t4;
              }
              if (t1 >>> 0 !== t1 || t1 >= t3)
                throw $.ioore(t1);
              t2[t1] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, "ListQueue", 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._liblib0$_head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._liblib0$_head, this._table, 0);
    this._liblib0$_head = 0;
    this._liblib0$_tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = this._liblib0$_head;
    t2 = this._liblib0$_tail;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = $.getInterceptor$ax(target);
    if (t1 <= t2) {
      $length = t2 - t1;
      t3.setRange$4(target, 0, $length, this._table, this._liblib0$_head);
      return $length;
    } else {
      t2 = this._table;
      firstPartSize = t2.length - t1;
      t3.setRange$4(target, 0, firstPartSize, t2, t1);
      t1 = this._liblib0$_tail;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t3.setRange$4(target, firstPartSize, firstPartSize + t1, this._table, 0);
      return $.$add$ns(this._liblib0$_tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, "ListQueue", 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    this._liblib0$_tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._liblib0$_head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (true)
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_liblib0$_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._liblib0$_end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
},

_SplayTreeNode: {"": "Object;key>,left@,right@", $is_SplayTreeNode: true},

_SplayTreeMapNode: {"": "_SplayTreeNode;value*,key,left,right", $as_SplayTreeNode: function (K, V) { return [K]; }},

_SplayTree: {"": "Object;",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, tmp, current0;
    current = this._root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      comp = this._compare$2($.get$key$x(current), key);
      t1 = $.getInterceptor$n(comp);
      if (t1.$gt(comp, 0)) {
        t1 = current.get$left();
        if (t1 == null)
          break;
        comp = this._compare$2($.get$key$x(t1), key);
        if ($.$gt$n(comp, 0)) {
          tmp = current.get$left();
          current.set$left(tmp.get$right());
          tmp.set$right(current);
          if (tmp.get$left() == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        right.set$left(current);
        current0 = current.get$left();
        right = current;
        current = current0;
      } else {
        if (t1.$lt(comp, 0)) {
          if (current.get$right() == null)
            break;
          comp = this._compare$2($.get$key$x(current.get$right()), key);
          if ($.$lt$n(comp, 0)) {
            tmp = current.get$right();
            current.set$right(tmp.get$left());
            tmp.set$left(current);
            if (tmp.get$right() == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          left0.set$right(current);
          current0 = current.get$right();
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    left0.set$right(current.get$left());
    right.set$left(current.get$right());
    current.set$left(left.right);
    current.set$right(left.left);
    this._root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _remove$1: function(key) {
    var result, t1, right;
    if (this._root == null)
      return;
    if (!$.$eq(this._splay$1(key), 0))
      return;
    result = this._root;
    this._count = this._count - 1;
    t1 = this._root;
    if (t1.get$left() == null)
      this._root = t1.get$right();
    else {
      right = t1.get$right();
      this._root = this._root.get$left();
      this._splay$1(key);
      this._root.set$right(right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _addNewRoot$2: function(node, comp) {
    var t1;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    t1 = this._root;
    if (t1 == null) {
      this._root = node;
      return;
    }
    if ($.$lt$n(comp, 0)) {
      node.left = t1;
      node.right = this._root.get$right();
      this._root.set$right(null);
    } else {
      node.right = t1;
      node.left = this._root.get$left();
      this._root.set$left(null);
    }
    this._root = node;
  },
  _clear$0: function() {
    this._root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  }
},

SplayTreeMap: {"": "_SplayTree;_comparator,_root,_dummy,_count,_modificationCount,_splayCount",
  _comparator$2: function(arg0, arg1) {
    return this._comparator.call$2(arg0, arg1);
  },
  _compare$2: function(key1, key2) {
    return this._comparator$2(key1, key2);
  },
  $index: function(_, key) {
    var $arguments, t1, comp;
    if (key == null)
      throw $.wrapException(new $.ArgumentError(key));
    $arguments = $.getRuntimeTypeArguments(this, "SplayTreeMap");
    t1 = $.checkSubtypeOfRuntimeType(key, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    if (!t1)
      return;
    if (this._root != null) {
      comp = this._splay$1(key);
      if (typeof comp !== "number")
        return this.$$index$bailout(1, comp);
      if (comp === 0)
        return $.get$value$x(this._root);
    }
    return;
  },
  $$index$bailout: function(state0, comp) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.wrapException(new $.ArgumentError(key));
        $arguments = $.getRuntimeTypeArguments(this, "SplayTreeMap");
        t1 = $.checkSubtypeOfRuntimeType(key, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
        if (!t1)
          return;
      case 1:
        var $arguments, t1;
        if (state0 === 1 || state0 === 0 && this._root != null)
          switch (state0) {
            case 0:
              comp = this._splay$1(key);
            case 1:
              state0 = 0;
              if ($.$eq(comp, 0))
                return $.get$value$x(this._root);
          }
        return;
    }
  },
  remove$1: function(_, key) {
    var t1, mapRoot;
    t1 = $.checkSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "SplayTreeMap", 0));
    if (!t1)
      return;
    mapRoot = this._remove$1(key);
    if (mapRoot != null)
      return $.get$value$x(mapRoot);
    return;
  },
  $indexSet: function(_, key, value) {
    var comp, t1;
    if (key == null)
      throw $.wrapException(new $.ArgumentError(key));
    comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this.$$indexSet$bailout(1, key, value, comp);
    if (comp === 0) {
      $.set$value$x(this._root, value);
      return;
    }
    t1 = new $._SplayTreeMapNode(value, key, null, null);
    $.setRuntimeTypeInfo(t1, [null, null]);
    this._addNewRoot$2(t1, comp);
  },
  $$indexSet$bailout: function(state0, key, value, comp) {
    var t1;
    if ($.$eq(comp, 0)) {
      $.set$value$x(this._root, value);
      return;
    }
    t1 = new $._SplayTreeMapNode(value, key, null, null);
    $.setRuntimeTypeInfo(t1, [null, null]);
    this._addNewRoot$2(t1, comp);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.SplayTreeMap_addAll_closure(this));
  },
  get$isEmpty: function(_) {
    return this._root == null;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  forEach$1: function(_, f) {
    var $arguments, t1, nodes, node;
    $arguments = $.getRuntimeTypeArguments(this, "SplayTreeMap");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t1 = t1;
    nodes = new $._SplayTreeNodeIterator(this, [], this._modificationCount, this._splayCount, null);
    $.setRuntimeTypeInfo(nodes, [t1]);
    nodes._SplayTreeIterator$1(this, [$._SplayTreeNode, t1]);
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = $.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  get$length: function(_) {
    return this._count;
  },
  clear$0: function(_) {
    this._clear$0();
  },
  get$keys: function() {
    return $._SplayTreeKeyIterable$(this, $.getRuntimeTypeArgument(this, "SplayTreeMap", 0));
  },
  get$values: function(_) {
    return $._SplayTreeValueIterable$(this, $.getRuntimeTypeArgument(this, "SplayTreeMap", 0), $.getRuntimeTypeArgument(this, "SplayTreeMap", 1));
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  $isSplayTreeMap: true,
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: null,
  $isMap: true
},

SplayTreeMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
},

_SplayTreeIterator: {"": "Object;",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = node.get$left();
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.JSArray_methods.clear$0(this._workList);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1._root);
    else {
      t1._splay$1($.get$key$x(currentNode));
      this._findLeftMostDescendent$1(t1._root.get$right());
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if (this._modificationCount !== t1._modificationCount)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t2 = this._workList;
    if (t2.length === 0) {
      this._currentNode = null;
      return false;
    }
    if (t1._splayCount !== this._splayCount)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw $.ioore(0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1(this._currentNode.get$right());
    return true;
  },
  _SplayTreeIterator$1: function(tree, T) {
    this._findLeftMostDescendent$1(tree._root);
  }
},

_SplayTreeKeyIterable: {"": "IterableBase;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    var t1, $arguments, t2, t3;
    t1 = this._tree;
    $arguments = $.getRuntimeTypeArguments(this, "_SplayTreeKeyIterable");
    t2 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = t2;
    t3 = new $._SplayTreeKeyIterator(t1, [], t1._modificationCount, t1._splayCount, null);
    $.setRuntimeTypeInfo(t3, [t2]);
    t3._SplayTreeIterator$1(t1, t2);
    return t3;
  },
  $asIterableBase: null,
  $asIterable: null
},

_SplayTreeValueIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    var t1, $arguments, t2, t3, t4;
    t1 = this._map;
    $arguments = $.getRuntimeTypeArguments(this, "_SplayTreeValueIterable");
    t2 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    $arguments = $.getRuntimeTypeArguments(this, "_SplayTreeValueIterable");
    t3 = $.isNull($arguments) ? null : $.getIndex($arguments, 1);
    t3 = t3;
    t4 = new $._SplayTreeValueIterator(t1, [], t1._modificationCount, t1._splayCount, null);
    $.setRuntimeTypeInfo(t4, [t2, t3]);
    t4._SplayTreeIterator$1(t1, t3);
    return t4;
  },
  $asIterableBase: function (K, V) { return [V]; },
  $asIterable: function (K, V) { return [V]; }
},

_SplayTreeKeyIterator: {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$key$x(node);
  },
  $as_SplayTreeIterator: null
},

_SplayTreeValueIterator: {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$value$x(node);
  },
  $as_SplayTreeIterator: function (K, V) { return [V]; }
},

_SplayTreeNodeIterator: {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  },
  $as_SplayTreeIterator: function (K) { return [[$._SplayTreeNode, K]]; }
},

HashMap__isStringKey: function(key) {
  return typeof key === "string" && key !== "__proto__";
},

HashMap__isNumericKey: function(key) {
  return typeof key === "number" && (key & 0x3ffffff) === key;
},

HashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

HashMap__hasTableEntry: function(table, key) {
  return table[key] != null;
},

HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

HashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

HashMap__getBucket: function(table, key) {
  return table[$.HashMap__computeHashCode(key)];
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

HashMapKeyIterable$: function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedHashMap__isStringKey: function(key) {
  return typeof key === "string" && key !== "__proto__";
},

LinkedHashMap__isNumericKey: function(key) {
  return typeof key === "number" && (key & 0x3ffffff) === key;
},

LinkedHashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

LinkedHashMap__getTableEntry: function(table, key) {
  return table[key];
},

LinkedHashMap__setTableEntry: function(table, key, value) {
  table[key] = value;
},

LinkedHashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

LinkedHashMap__getBucket: function(table, key) {
  return table[$.LinkedHashMap__computeHashCode(key)];
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

LinkedHashMapCell$: function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
},

LinkedHashMapKeyIterable$: function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedHashSet__isStringElement: function(element) {
  return typeof element === "string" && element !== "__proto__";
},

LinkedHashSet__isNumericElement: function(element) {
  return typeof element === "number" && (element & 0x3ffffff) === element;
},

LinkedHashSet__computeHashCode: function(element) {
  return $.get$hashCode$(element) & 0x3ffffff;
},

LinkedHashSet__getTableEntry: function(table, key) {
  return table[key];
},

LinkedHashSet__setTableEntry: function(table, key, value) {
  table[key] = value;
},

LinkedHashSet__deleteTableEntry: function(table, key) {
  delete table[key];
},

LinkedHashSet__getBucket: function(table, element) {
  return table[$.LinkedHashSet__computeHashCode(element)];
},

LinkedHashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_liblib0$_element(), element))
      return i;
  return -1;
},

LinkedHashSetCell$: function(_element) {
  return new $.LinkedHashSetCell(_element, null, null);
},

LinkedHashSetIterator$: function(_set, _modifications, E) {
  var t1 = new $.LinkedHashSetIterator(_set, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashSetIterator$2(_set, _modifications, E);
  return t1;
},

HashMap$: function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

HashMap_HashMap$from: function(other, K, V) {
  var t1 = $.HashMap$(K, V);
  t1.addAll$1(t1, other);
  return t1;
},

LinkedHashMap$: function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

LinkedHashMap_LinkedHashMap$from: function(other, K, V) {
  var t1 = $.LinkedHashMap$(K, V);
  t1.addAll$1(t1, other);
  return t1;
},

LinkedHashSet$: function(E) {
  var t1 = new $.LinkedHashSet(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw $.ioore(i);
    if (t2[i] === m)
      return "{...}";
  }
  result = $.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    $.forEach$1$ax(m, new $.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return $.toString$0(result);
},

Queue_Queue: function(E) {
  return $.ListQueue$(null, E);
},

ListQueue$: function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
},

ListQueue__isPowerOf2: function(number) {
  if (number == null)
    throw number.$sub();
  return (number & number - 1) >>> 0 === 0;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (number == null)
    throw number.$shl();
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
},

_SplayTreeKeyIterable$: function(_tree, K) {
  var t1 = new $._SplayTreeKeyIterable(_tree);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
},

_SplayTreeValueIterable$: function(_map, K, V) {
  var t1 = new $._SplayTreeValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

_SplayTreeValueIterator$: function(map, K, V) {
  var t1 = new $._SplayTreeValueIterator(map, [], map._modificationCount, map._splayCount, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._SplayTreeIterator$1(map, V);
  return t1;
}}],
["dart.core", "dart:core", , {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0))
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    y = new $.DateTime_toString_fourDigits().call$1(this.get$year());
    m = t1.call$1(this.get$month());
    d = t1.call$1(this.get$day());
    h = t1.call$1(this.get$hour());
    min = t1.call$1(this.get$minute());
    sec = t1.call$1(this.get$second());
    ms = new $.DateTime_toString_threeDigits().call$1(this.get$millisecond());
    if (this.isUtc)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException($.ArgumentError$(millisecondsSinceEpoch));
  },
  $isDateTime: true
},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, $.JSNumber_methods.round$0(this._duration * factor), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t1.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
},

Error: {"": "Object;"},

StackTraceOnThrow: {"": "Object;"},

AssertionError: {"": "Error_StackTraceOnThrow;"},

Error_StackTraceOnThrow: {"": "Error+StackTraceOnThrow;"},

TypeError: {"": "AssertionError;"},

CastError: {"": "Error_StackTraceOnThrow0;"},

Error_StackTraceOnThrow0: {"": "Error+StackTraceOnThrow;"},

Error_StackTraceOnThrow1: {"": "Error+StackTraceOnThrow;"},

NullThrownError: {"": "Error_StackTraceOnThrow1;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error_StackTraceOnThrow2;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

Error_StackTraceOnThrow2: {"": "Error+StackTraceOnThrow;"},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

Error_StackTraceOnThrow3: {"": "Error+StackTraceOnThrow;"},

FallThroughError: {"": "Error_StackTraceOnThrow3;"},

AbstractClassInstantiationError: {"": "Error_StackTraceOnThrow4;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

Error_StackTraceOnThrow4: {"": "Error+StackTraceOnThrow;"},

Error_StackTraceOnThrow5: {"": "Error+StackTraceOnThrow;"},

NoSuchMethodError: {"": "Error_StackTraceOnThrow5;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    for (t2 = this._arguments; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

Error_StackTraceOnThrow6: {"": "Error+StackTraceOnThrow;"},

UnsupportedError: {"": "Error_StackTraceOnThrow6;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

Error_StackTraceOnThrow7: {"": "Error+StackTraceOnThrow;"},

UnimplementedError: {"": "Error_StackTraceOnThrow7;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  }
},

Error_StackTraceOnThrow8: {"": "Error+StackTraceOnThrow;"},

StateError: {"": "Error_StackTraceOnThrow8;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error_StackTraceOnThrow9;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

Error_StackTraceOnThrow9: {"": "Error+StackTraceOnThrow;"},

StackOverflowError: {"": "Error;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

CyclicInitializationError: {"": "Error_StackTraceOnThrow10;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

Error_StackTraceOnThrow10: {"": "Error+StackTraceOnThrow;"},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
},

Function: {"": "Object;", $isFunction: true},

Iterable: {"": "Object;", $isIterable: true, $asIterable: null},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  },
  get$runtimeType: function(_) {
    return $.getRuntimeType(this);
  }
},

Match: {"": "Object;", $isMatch: true},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      this.write$1(iterator.get$current());
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

Type: {"": "Object;", $isType: true},

Uri: {"": "Object;_port,_path,scheme,userInfo,host,query,fragment,_pathSegments,_queryParameters",
  get$port: function(_) {
    return this._port;
  },
  get$path: function(_) {
    return this._path;
  },
  query$1: function($receiver, arg0) {
    return this.query.call$1(arg0);
  },
  _makePath$2: function(path, pathSegments) {
    var t1, result;
    t1 = path == null;
    if (t1 && pathSegments == null)
      return "";
    t1 = !t1;
    if (t1 && pathSegments != null)
      throw $.wrapException($.ArgumentError$("Both path and pathSegments specified"));
    if (t1)
      result = $.Uri__normalize(path);
    else {
      t1 = $.map$1$ax(pathSegments, new $.Uri__makePath_closure());
      result = t1.join$1(t1, "/");
    }
    if (this.get$hasAuthority() || $.$eq(this.scheme, "file")) {
      t1 = $.getInterceptor$asx(result);
      t1 = t1.get$isNotEmpty(result) && !t1.startsWith$1(result, "/");
    } else
      t1 = false;
    if (t1)
      return "/" + $.S(result);
    return result;
  },
  get$hasAuthority: function() {
    return !$.$eq(this.host, "");
  },
  _writeAuthority$1: function(ss) {
    var t1 = this.userInfo;
    $.Uri__addIfNonEmpty(ss, t1, t1, "@");
    t1 = this.host;
    if (t1 == null)
      t1 = "null";
    else if ($.contains$1$asx(t1, ":") === true)
      t1 = "[" + $.S(t1) + "]";
    ss.write$1(t1);
    if (!$.$eq(this.get$port(this), 0)) {
      ss.write$1(":");
      ss.write$1($.toString$0(this.get$port(this)));
    }
  },
  toString$0: function(_) {
    var sb, t1;
    sb = $.StringBuffer$("");
    t1 = this.scheme;
    $.Uri__addIfNonEmpty(sb, t1, t1, ":");
    if (this.get$hasAuthority() || $.$eq(t1, "file")) {
      sb.write$1("//");
      this._writeAuthority$1(sb);
    }
    sb.write$1(this.get$path(this));
    t1 = this.query;
    $.Uri__addIfNonEmpty(sb, t1, "?", t1);
    t1 = this.fragment;
    $.Uri__addIfNonEmpty(sb, t1, "#", t1);
    return sb.toString$0(sb);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isUri)
      return false;
    return $.$eq(this.scheme, other.scheme) && $.$eq(this.userInfo, other.userInfo) && $.$eq(this.host, other.host) && $.$eq(this._port, other._port) && $.$eq(this._path, other._path) && $.$eq(this.query, other.query) && $.$eq(this.fragment, other.fragment);
  },
  get$hashCode: function(_) {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.host, t1.call$2(this.get$port(this), t1.call$2(this.get$path(this), t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
    var t1 = $.getInterceptor(scheme);
    if (t1.$eq(scheme, "http") && $.$eq(port, 80))
      this._port = 0;
    else if (t1.$eq(scheme, "https") && $.$eq(port, 443))
      this._port = 0;
    else
      this._port = port;
    this._path = this._makePath$2(path, pathSegments);
  },
  $isUri: true
},

Uri__makeScheme_isSchemeLowerCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1 = $.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = t1.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw $.ioore(t1);
      t1 = ($.List_6Pr[t1] & $.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $isFunction: true
},

Uri__makeScheme_isSchemeCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1 = $.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = t1.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw $.ioore(t1);
      t1 = ($.List_JYB[t1] & $.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $isFunction: true
},

Uri__makePath_closure: {"": "Closure;",
  call$1: function(s) {
    return $.Uri__uriEncode($.List_qg4, s, false);
  },
  $isFunction: true
},

Uri__makeQuery_closure: {"": "Closure;box_0,result_1",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1("&");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1($.Uri_encodeQueryComponent(key));
    if (value != null && $.get$isEmpty$asx(value) !== true) {
      t1.write$1("=");
      t1.write$1($.Uri_encodeQueryComponent(value));
    }
  },
  $isFunction: true
},

Uri__normalize_isNormalizedHexDigit: {"": "Closure;",
  call$1: function(digit) {
    var t1;
    if (typeof digit !== "number")
      throw $.iae(digit);
    if (!(48 <= digit && digit <= 57))
      t1 = 65 <= digit && digit <= 70;
    else
      t1 = true;
    return t1;
  },
  $isFunction: true
},

Uri__normalize_isLowerCaseHexDigit: {"": "Closure;",
  call$1: function(digit) {
    if (typeof digit !== "number")
      throw $.iae(digit);
    return 97 <= digit && digit <= 102;
  },
  $isFunction: true
},

Uri__normalize_isUnreserved: {"": "Closure;",
  call$1: function(ch) {
    var t1 = $.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = t1.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw $.ioore(t1);
      t1 = ($.List_nxB[t1] & $.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $isFunction: true
},

Uri__normalize_normalizeHexDigit: {"": "Closure;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
  call$1: function(index) {
    var t1, codeUnit;
    t1 = this.component_1;
    codeUnit = $.codeUnitAt$1$s(t1, index);
    if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
      return codeUnit - 32;
    else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
      throw $.wrapException($.ArgumentError$("Invalid URI component: " + $.S(t1)));
    else
      return codeUnit;
  },
  $isFunction: true
},

Uri__normalize_decodeHexDigitPair: {"": "Closure;component_4",
  call$1: function(index) {
    var t1, t2, $byte, i, codeUnit;
    if (typeof index !== "number")
      return this.call$1$bailout(1, index);
    for (t1 = this.component_4, t2 = $.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t2.codeUnitAt$1(t1, index + i);
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw $.wrapException(new $.ArgumentError("Invalid percent-encoding in URI component: " + $.S(t1)));
      }
    }
    return $byte;
  },
  call$1$bailout: function(state0, index) {
    var t1, t2, t3, $byte, i, codeUnit;
    for (t1 = this.component_4, t2 = $.getInterceptor$ns(index), t3 = $.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw $.wrapException(new $.ArgumentError("Invalid percent-encoding in URI component: " + $.S(t1)));
      }
    }
    return $byte;
  },
  $isFunction: true
},

Uri__normalize_fillResult: {"": "Closure;box_0,component_5",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.box_0;
    t2 = t1.result_0;
    t3 = t1.prevIndex_2;
    t4 = this.component_5;
    t5 = t1.index_1;
    if (t2 == null)
      t1.result_0 = $.StringBuffer$($.substring$2$s(t4, t3, t5));
    else
      t2.write$1($.substring$2$s(t4, t3, t5));
  },
  $isFunction: true,
  $is_void_: true
},

Uri_hashCode_combine: {"": "Closure;",
  call$2: function(part, current) {
    var t1 = $.$add$ns($.$mul$n(current, 31), $.get$hashCode$(part));
    if (typeof t1 !== "number")
      throw t1.$and();
    return t1 & 1073741823;
  },
  $isFunction: true
},

Uri__uriEncode_byteToHex: {"": "Closure;",
  call$1: function(v) {
    var t1;
    if (typeof v !== "number")
      throw v.$shr();
    t1 = $.JSNumber_methods.$shr(v, 4);
    if (t1 < 0 || t1 >= 16)
      throw $.ioore(t1);
    return "%" + "0123456789ABCDEF"[t1] + "0123456789ABCDEF"[v & 15];
  },
  $isFunction: true
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    $.checkString("\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    $.checkString("\\r");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    $.checkString("\\\"");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return $.Primitives_objectToString(object);
},

NullThrownError$: function() {
  return new $.NullThrownError();
},

ArgumentError$: function(message) {
  return new $.ArgumentError(message);
},

RangeError$value: function(value) {
  return new $.RangeError("value " + $.S(value));
},

RangeError$range: function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
},

NoSuchMethodError$: function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
},

UnsupportedError$: function(message) {
  return new $.UnsupportedError(message);
},

StateError$: function(message) {
  return new $.StateError(message);
},

ConcurrentModificationError$: function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
},

StackOverflowError$: function() {
  return new $.StackOverflowError();
},

CyclicInitializationError$: function(variableName) {
  return new $.CyclicInitializationError(variableName);
},

Exception_Exception: function(message) {
  return $._ExceptionImplementation$(message);
},

_ExceptionImplementation$: function(message) {
  return new $._ExceptionImplementation(message);
},

FormatException$: function(message) {
  return new $.FormatException(message);
},

Expando$: function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

int_parse: function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
},

List_List: function($length, E) {
  if ($length == null)
    return $.Primitives_newGrowableList(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, E) {
  var result, t1, i;
  if ($length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = $.Primitives_newFixedList($length);
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
},

List_List$generate: function($length, generator, growable, E) {
  var result, i, t1;
  if (growable) {
    result = [];
    $.JSArray_methods.set$length(result, $length);
  } else {
    result = $.List_List($length, E);
    $.setRuntimeTypeInfo(result, [E]);
  }
  if (typeof $length !== "number")
    throw $.iae($length);
  i = 0;
  for (; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},

Map_Map: function(K, V) {
  return $.HashMap$(K, V);
},

Map_Map$from: function(other, K, V) {
  return $.HashMap_HashMap$from(other, K, V);
},

print: function(object) {
  $.Primitives_printString($.toString$0(object));
},

RegExp_RegExp: function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
},

StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
},

Uri_parse: function(uri) {
  return $.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(uri));
},

Uri$_fromMatch: function(m) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.Uri__emptyIfNull(m.$index(m, 1));
  t2 = $.Uri__emptyIfNull(m.$index(m, 2));
  t3 = $.Uri__eitherOf(m.$index(m, 3), m.$index(m, 4));
  t4 = $.Uri__parseIntOrZero(m.$index(m, 5));
  t5 = $.Uri__emptyIfNull(m.$index(m, 6));
  t6 = $.Uri__emptyIfNull(m.$index(m, 7));
  t7 = $.Uri__emptyIfNull(m.$index(m, 8));
  t8 = new $.Uri(null, null, $.Uri__makeScheme(t1), t2, t3, $.Uri__makeQuery(t6, null), $.Uri__makeFragment(t7), null, null);
  t8.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t7, t3, t5, null, t4, t6, null, t1, t2);
  return t8;
},

Uri__makeScheme: function(scheme) {
  var t1, t2, $length, allLowercase, i, codeUnit;
  if (typeof scheme !== "string")
    return $.Uri__makeScheme$bailout(1, scheme);
  t1 = new $.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new $.Uri__makeScheme_isSchemeCharacter();
  $length = scheme.length;
  for (allLowercase = true, i = 0; i < $length; ++i) {
    codeUnit = $.JSString_methods.codeUnitAt$1(scheme, i);
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw $.wrapException(new $.ArgumentError("Illegal scheme: " + scheme));
      allLowercase = false;
    }
  }
  if (allLowercase)
    t1 = scheme;
  else
    t1 = $.JSString_methods.toLowerCase$0(scheme);
  return t1;
},

Uri__makeScheme$bailout: function(state0, scheme) {
  var t1, t2, t3, $length, allLowercase, i, codeUnit;
  t1 = new $.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new $.Uri__makeScheme_isSchemeCharacter();
  if (scheme == null)
    return "";
  t3 = $.getInterceptor$asx(scheme);
  $length = t3.get$length(scheme);
  if (typeof $length !== "number")
    throw $.iae($length);
  allLowercase = true;
  i = 0;
  for (; i < $length; ++i) {
    codeUnit = t3.codeUnitAt$1(scheme, i);
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw $.wrapException(new $.ArgumentError("Illegal scheme: " + $.S(scheme)));
      allLowercase = false;
    }
  }
  return allLowercase ? scheme : t3.toLowerCase$0(scheme);
},

Uri__makeQuery: function(query, queryParameters) {
  var t1, t2, result;
  t1 = {};
  t2 = query == null;
  if (t2 && queryParameters == null)
    return "";
  t2 = !t2;
  if (t2 && queryParameters != null)
    throw $.wrapException($.ArgumentError$("Both query and queryParameters specified"));
  if (t2)
    return $.Uri__normalize(query);
  result = $.StringBuffer$("");
  t1.first_0 = true;
  $.forEach$1$ax(queryParameters, new $.Uri__makeQuery_closure(t1, result));
  return result.toString$0(result);
},

Uri__makeFragment: function(fragment) {
  if (fragment == null)
    return "";
  return $.Uri__normalize(fragment);
},

Uri__normalize: function(component) {
  var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes;
  t1 = {};
  t2 = new $.Uri__normalize_isNormalizedHexDigit();
  t3 = new $.Uri__normalize_isUnreserved();
  t4 = new $.Uri__normalize_normalizeHexDigit(component, t2, new $.Uri__normalize_isLowerCaseHexDigit());
  t5 = new $.Uri__normalize_decodeHexDigitPair(component);
  t1.result_0 = null;
  t6 = $.getInterceptor$asx(component);
  $length = t6.get$length(component);
  if (typeof $length !== "number")
    return $.Uri__normalize$bailout(1, component, t1, t2, t3, t4, t5, t6, $length);
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new $.Uri__normalize_fillResult(t1, component);
  for (; t8 = t1.index_1, $.$lt$n(t8, $length);)
    if (t6.codeUnitAt$1(component, t8) === 37) {
      t8 = $.$add$ns(t1.index_1, 2);
      if (typeof t8 !== "number")
        throw $.iae(t8);
      if ($length < t8)
        throw $.wrapException(new $.ArgumentError("Invalid percent-encoding in URI component: " + $.S(component)));
      codeUnit1 = t6.codeUnitAt$1(component, $.$add$ns(t1.index_1, 1));
      codeUnit2 = t6.codeUnitAt$1(component, $.$add$ns(t1.index_1, 2));
      decodedCodeUnit = t5.call$1($.$add$ns(t1.index_1, 1));
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = $.$add$ns(t1.index_1, 3);
      else {
        t7.call$0();
        t8 = t3.call$1(decodedCodeUnit);
        t9 = t1.result_0;
        if (t8 === true) {
          t9.writeCharCode$1;
          charCodes = $.List_List$filled(1, decodedCodeUnit, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t8 = $.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t8;
        } else {
          t9.write$1;
          t9._contents = t9._contents + "%";
          t8 = t1.result_0;
          t9 = t4.call$1($.$add$ns(t1.index_1, 1));
          t8.writeCharCode$1;
          charCodes = $.List_List$filled(1, t9, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t9 = $.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
          t8 = t1.result_0;
          t9 = t4.call$1($.$add$ns(t1.index_1, 2));
          t8.writeCharCode$1;
          charCodes = $.List_List$filled(1, t9, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t9 = $.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
        }
        t1.index_1 = $.$add$ns(t1.index_1, 3);
        t1.prevIndex_2 = t1.index_1;
      }
    } else
      t1.index_1 = $.$add$ns(t1.index_1, 1);
  if (t1.result_0 != null && !$.$eq(t1.prevIndex_2, t8))
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return $.toString$0(t1);
},

Uri__normalize$bailout: function(state0, component, t1, t2, t3, t4, t5, t6, $length) {
  var t7, t8, t9, codeUnit1, codeUnit2, decodedCodeUnit, t10, charCodes;
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new $.Uri__normalize_fillResult(t1, component);
  for (t8 = $.getInterceptor$n($length); t9 = t1.index_1, $.$lt$n(t9, $length);)
    if (t6.codeUnitAt$1(component, t9) === 37) {
      if (t8.$lt($length, $.$add$ns(t1.index_1, 2)))
        throw $.wrapException(new $.ArgumentError("Invalid percent-encoding in URI component: " + $.S(component)));
      codeUnit1 = t6.codeUnitAt$1(component, $.$add$ns(t1.index_1, 1));
      codeUnit2 = t6.codeUnitAt$1(component, $.$add$ns(t1.index_1, 2));
      decodedCodeUnit = t5.call$1($.$add$ns(t1.index_1, 1));
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = $.$add$ns(t1.index_1, 3);
      else {
        t7.call$0();
        t9 = t3.call$1(decodedCodeUnit);
        t10 = t1.result_0;
        if (t9 === true) {
          t10.writeCharCode$1;
          charCodes = $.List_List$filled(1, decodedCodeUnit, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t9 = $.Primitives_stringFromCharCodes(charCodes);
          t10._contents = t10._contents + t9;
        } else {
          t10.write$1;
          t10._contents = t10._contents + "%";
          t9 = t1.result_0;
          t10 = t4.call$1($.$add$ns(t1.index_1, 1));
          t9.writeCharCode$1;
          charCodes = $.List_List$filled(1, t10, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t10 = $.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t10;
          t9 = t1.result_0;
          t10 = t4.call$1($.$add$ns(t1.index_1, 2));
          t9.writeCharCode$1;
          charCodes = $.List_List$filled(1, t10, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t10 = $.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t10;
        }
        t1.index_1 = $.$add$ns(t1.index_1, 3);
        t1.prevIndex_2 = t1.index_1;
      }
    } else
      t1.index_1 = $.$add$ns(t1.index_1, 1);
  if (t1.result_0 != null && !$.$eq(t1.prevIndex_2, t9))
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return $.toString$0(t1);
},

Uri__emptyIfNull: function(val) {
  return val != null ? val : "";
},

Uri__parseIntOrZero: function(val) {
  if (val != null && !$.$eq(val, ""))
    return $.int_parse(val, null, null);
  else
    return 0;
},

Uri__eitherOf: function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
},

Uri__addIfNonEmpty: function(sb, test, first, second) {
  if ("" !== test) {
    sb.write$1(first);
    sb.write$1(second);
  }
},

Uri_encodeQueryComponent: function(component) {
  return $.Uri__uriEncode($.List_nxB, component, true);
},

Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
  var t1, result, t2, i, t3, ch, t4, str, nextCh, $arguments;
  t1 = new $.Uri__uriEncode_byteToHex();
  result = $.StringBuffer$("");
  t2 = $.getInterceptor$asx(text);
  i = 0;
  while (true) {
    t3 = t2.get$length(text);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (!(i < t3))
      break;
    ch = t2.codeUnitAt$1(text, i);
    if (ch < 128) {
      t3 = $.JSInt_methods.$shr(ch, 4);
      if (t3 < 0 || t3 >= canonicalTable.length)
        throw $.ioore(t3);
      t3 = canonicalTable[t3];
      t4 = $.JSInt_methods.$shl(1, ch & 15);
      if (typeof t3 !== "number")
        throw t3.$and();
      t4 = (t3 & t4) >>> 0 !== 0;
      t3 = t4;
    } else
      t3 = false;
    if (t3) {
      str = t2.$index(text, i);
      str = typeof str === "string" ? str : $.S(str);
      result._contents = result._contents + str;
    } else if (spaceToPlus && $.$eq(t2.$index(text, i), " "))
      result._contents = result._contents + "+";
    else {
      if (ch >= 55296 && ch < 56320) {
        ++i;
        nextCh = $.$eq(t2.get$length(text), i) ? 0 : t2.codeUnitAt$1(text, i);
        if (nextCh >= 56320 && nextCh < 57344)
          ch = 65536 + (ch - 55296 << 10 >>> 0) + (nextCh - 56320);
        else
          throw $.wrapException(new $.ArgumentError("Malformed URI"));
      }
      t3 = $.codepointsToUtf8([ch], 0, null);
      $arguments = $.substitute($.getField(t3, "$asJSArray"), $.getRuntimeTypeInfo(t3));
      t4 = $arguments == null ? null : $arguments[0];
      t3 = new $.ListIterator(t3, t3.length, 0, null);
      t3.$builtinTypeInfo = [t4];
      for (; t3.moveNext$0();) {
        str = t1.call$1(t3._liblib$_current);
        str = typeof str === "string" ? str : $.S(str);
        result._contents = result._contents + str;
      }
    }
    ++i;
  }
  return result.toString$0(result);
}}],
["dart.dom.html", "dart:html", , {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy ? $.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isElement) {
      t1 = this._element;
      if ($.get$parentNode$x(object) === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asListBase: function () { return [$.Element]; },
  $asList: function () { return [$.Element]; },
  $asIterable: function () { return [$.Element]; }
},

_FrozenElementList: {"": "ListBase;_nodeList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  get$classes: function(_) {
    return $._MultiElementCssClassSet$($.NodeList_methods.where$1(this._nodeList, new $._FrozenElementList_classes_closure()));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

_FrozenElementList_classes_closure: {"": "Closure;",
  call$1: function(e) {
    return typeof e === "object" && e !== null && !!$.getInterceptor(e).$isElement;
  },
  $isFunction: true
},

_ElementFactoryProvider__getColgroup_closure: {"": "Closure;",
  call$1: function(n) {
    return $.$eq($.get$tagName$x(n), "COLGROUP");
  },
  $isFunction: true
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

_ChildNodeListLazy: {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          throw $.iae(len);
        i = 0;
        for (; i < len; ++i)
          t2.appendChild(t1.firstChild);
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object !== "object" || object === null || !$.getInterceptor(object).$isNode)
      return false;
    t1 = this._this;
    if (t1 !== $.get$parentNode$x(object))
      return false;
    t1.removeChild(object);
    return true;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asListBase: function () { return [$.Node]; },
  $asList: function () { return [$.Node]; },
  $asIterable: function () { return [$.Node]; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function (E) { return [$.Node]; }, $isIterable: true, $asIterable: function (E) { return [$.Node]; }},

_AttributeMap: {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();)
      this.remove$1(this, t1._liblib$_current);
  },
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = $.ListIterator$(t1, $.getRuntimeTypeArgument(t1, "JSArray", 0)); t1.moveNext$0();) {
      key = t1._liblib$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    keys = $.List_List(null, $.JSString);
    $.setRuntimeTypeInfo(keys, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push($.get$name$x(attributes[i]));
      }
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    values = $.List_List(null, $.JSString);
    $.setRuntimeTypeInfo(values, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push($.get$value$x(attributes[i]));
      }
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  $isMap: true,
  $asMap: function () { return [$.JSString, $.JSString]; }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return $.get$$$dom_namespaceUri$x(node) == null;
  }
},

_MultiElementCssClassSet: {"": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
  readClasses$0: function() {
    var s, t1;
    s = $.LinkedHashSet$($.JSString);
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1, t2;
    classes = $.JSArray_methods.join$1($.List_List$from(s, true, null), " ");
    for (t1 = this._elementIterable, t1 = t1.get$iterator(t1), t2 = t1._iterator; t1.moveNext$0();)
      $.set$$$dom_className$x(t2.get$current(), classes);
  },
  modify$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_modify_closure(f));
  },
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new $._MultiElementCssClassSet_remove_closure(value));
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new $._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  _MultiElementCssClassSet$1: function(_elementIterable) {
    this._elementCssClassSetIterable = $.JSArray_methods.map$1($.List_List$from(this._elementIterable, true, null), new $._MultiElementCssClassSet_closure());
  }
},

_MultiElementCssClassSet_closure: {"": "Closure;",
  call$1: function(e) {
    return $._ElementCssClassSet$(e);
  },
  $isFunction: true
},

_MultiElementCssClassSet_readClasses_closure: {"": "Closure;s_0",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  $isFunction: true
},

_MultiElementCssClassSet_modify_closure: {"": "Closure;f_0",
  call$1: function(e) {
    return e.modify$1(this.f_0);
  },
  $isFunction: true
},

_MultiElementCssClassSet_remove_closure: {"": "Closure;value_0",
  call$1: function(e) {
    return $.remove$1$ax(e, this.value_0);
  },
  $isFunction: true
},

_MultiElementCssClassSet__modifyWithReturnValue_closure: {"": "Closure;f_0",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  $isFunction: true
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$($.JSString);
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s($.get$$$dom_className$x(this._element), " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1._liblib$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true, null);
    $.set$$$dom_className$x(this._element, s.join$1(s, " "));
  }
},

_EventStream: {"": "Stream;_liblib4$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._liblib4$_target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, "_EventStream", 0));
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib4$_target,_eventType,_liblib4$_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled())
      return;
    this._unlisten$0();
    this._liblib4$_target = null;
    this._liblib4$_onData = null;
  },
  get$_canceled: function() {
    return this._liblib4$_target == null;
  },
  pause$1: function(_, resumeSignal) {
    if (this.get$_canceled())
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this.get$_canceled() || !this.get$isPaused())
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    if (this._liblib4$_onData != null && !this.get$isPaused())
      $.$$dom_addEventListener$3$x(this._liblib4$_target, this._eventType, this._liblib4$_onData, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._liblib4$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib4$_target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var $arguments, t1, t2;
    $arguments = $.getRuntimeTypeArguments(receiver, "ImmutableListMixin");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    t2 = new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    $.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    return $.$eq(this.x, other.x) && $.$eq(this.y, other.y);
  },
  get$hashCode: function(_) {
    return $.JenkinsSmiHash_hash2($.get$hashCode$(this.x), $.get$hashCode$(this.y));
  },
  $add: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$add$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 + t2);
  },
  $$add$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$add$ns(t1, t2));
    }
  },
  $sub: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, other, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$sub$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 - t2);
  },
  $$sub$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$sub$n(t1, t2));
    }
  },
  $mul: function(_, factor) {
    return $.Point$($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  toInt$0: function(_) {
    return $.Point$($.toInt$0$n(this.x), $.toInt$0$n(this.y));
  },
  $isPoint: true
},

Rect: {"": "Object;left<,top,width,height",
  get$right: function() {
    var t1, t2;
    t1 = this.left;
    if (typeof t1 !== "number")
      return this.get$right$bailout(1, t1);
    t2 = this.width;
    if (typeof t2 !== "number")
      return this.get$right$bailout(2, t1, t2);
    return t1 + t2;
  },
  get$right$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this.left;
      case 1:
        state0 = 0;
        t2 = this.width;
      case 2:
        state0 = 0;
        return $.$add$ns(t1, t2);
    }
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    return $.$eq(this.left, other.left) && $.$eq(this.top, other.top) && $.$eq(this.width, other.width) && $.$eq(this.height, other.height);
  },
  get$hashCode: function(_) {
    return $.JenkinsSmiHash_hash4($.get$hashCode$(this.left), $.get$hashCode$(this.top), $.get$hashCode$(this.width), $.get$hashCode$(this.height));
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$n(this.left), $.toInt$0$n(this.top), $.toInt$0$n(this.width), $.toInt$0$n(this.height));
  },
  $isRect: true
},

_WrappedList: {"": "ListBase;_liblib4$_list",
  get$iterator: function(_) {
    var t1 = new $._WrappedIterator($.get$iterator$ax(this._liblib4$_list));
    $.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$length: function(_) {
    return this._liblib4$_list.length;
  },
  add$1: function(_, element) {
    $.add$1$ax(this._liblib4$_list, element);
  },
  remove$1: function(_, element) {
    return $.remove$1$ax(this._liblib4$_list, element);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._liblib4$_list);
  },
  $index: function(_, index) {
    var t1 = this._liblib4$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._liblib4$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._liblib4$_list, newLength);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.setRange$4$ax(this._liblib4$_list, start, end, iterable, skipCount);
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

_WrappedIterator: {"": "Object;_liblib4$_iterator",
  moveNext$0: function() {
    return this._liblib4$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib4$_iterator.get$current();
  }
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
},

_LocationCrossFrame: {"": "Object;_location",
  set$href: function(_, val) {
    return $._LocationCrossFrame__setHref(this._location, val);
  }
},

_LocationWrapper: {"": "Object;_ptr",
  get$hash: function(_) {
    return $._LocationWrapper__get(this._ptr, "hash");
  },
  set$hash: function(_, value) {
    $._LocationWrapper__set(this._ptr, "hash", value);
  },
  get$href: function(_) {
    return $._LocationWrapper__get(this._ptr, "href");
  },
  set$href: function(_, value) {
    $._LocationWrapper__set(this._ptr, "href", value);
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true,
  $asLocation: null
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
},

window: function() {
  return window;
},

document: function() {
  return document;
},

query: function(selector) {
  return $.document().querySelector(selector);
},

CanvasElement_CanvasElement: function(height, width) {
  var e = $.document().createElement("canvas");
  return e;
},

DivElement_DivElement: function() {
  return $.document().createElement("div");
},

DocumentFragment_DocumentFragment: function() {
  return $.document().createDocumentFragment();
},

DocumentFragment_DocumentFragment$html: function(html) {
  var fragment = $.DocumentFragment_DocumentFragment();
  $.set$innerHtml$x(fragment, html);
  return fragment;
},

_ChildrenElementList$_wrap: function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
},

_FrozenElementList$_wrap: function(_nodeList, T) {
  var t1 = new $._FrozenElementList(_nodeList);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

Element_Element$html: function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
},

Element_Element$tag: function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
},

_ElementFactoryProvider_createElement_html: function(html) {
  var match, tag, parentTag, temp, t1, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    tag = $.toLowerCase$0$s(match.group$1(1));
    if ($.Device_isIE() === true && $.Map_Ai46y.containsKey$1(tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.Map_8h6qb.$index($.Map_8h6qb, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $.Element_Element$tag(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1))
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") && $.$eq($.get$length$asx(t1.get$children(temp)), 2)) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
},

_ElementFactoryProvider__createTableForIE: function(html, tag) {
  var div, t1, table, element;
  div = $.Element_Element$tag("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + $.S(html) + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
},

_ElementFactoryProvider__getColgroup: function(table) {
  var t1 = $.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_closure());
  return $._ElementFactoryProvider__singleNode(t1.toList$0(t1));
},

_ElementFactoryProvider__singleNode: function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1))
    return t1.$index(list, 0);
  throw $.wrapException($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " top level elements but 1 expected"));
},

_ElementFactoryProvider_createElement_tag: function(tag) {
  return document.createElement(tag);
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

ShadowRoot_supported: function() {
  return !!Element.prototype.webkitCreateShadowRoot;
},

Text_Text: function(data) {
  return $.document().createTextNode(data);
},

Window__isDartLocation: function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    return typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isLocation;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

},

_ElementAttributeMap$: function(element) {
  return new $._ElementAttributeMap(element);
},

_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new $._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
},

_ElementCssClassSet$: function(_element) {
  return new $._ElementCssClassSet(_element);
},

_EventStream$: function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_EventStreamSubscription$: function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
},

Point$: function(x, y) {
  return new $.Point(x, y);
},

Rect$: function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
},

_WrappedList$: function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return $._DOMWindowCrossFrame__createSafe(win);
},

_DOMWindowCrossFrame$: function(_window) {
  return new $._DOMWindowCrossFrame(_window);
},

_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === $.window())
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
},

_LocationCrossFrame__setHref: function($location, val) {
  $location.href = val;
},

_LocationWrapper$: function(_ptr) {
  return new $._LocationWrapper(_ptr);
},

_LocationWrapper__get: function(p, m) {
  return p[m];
},

_LocationWrapper__set: function(p, m, v) {
  return p[m] = v;
}}],
["dart.dom.svg", "dart:svg", , {
_AttributeClassSet: {"": "CssClassSetImpl;_liblib6$_element",
  readClasses$0: function() {
    var t1, classname, s, trimmed;
    t1 = $.get$attributes$x(this._liblib6$_element);
    classname = t1.$index(t1, "class");
    s = $.LinkedHashSet$($.JSString);
    if (classname == null)
      return s;
    for (t1 = $.JSArray_methods.get$iterator(classname.split(" ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1._liblib$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1 = $.get$attributes$x(this._liblib6$_element);
    t1.$indexSet(t1, "class", s.join$1(s, " "));
  }
},

_AttributeClassSet$: function(_element) {
  return new $._AttributeClassSet(_element);
}}],
["dart.isolate", "dart:isolate", , {
ReceivePort: {"": "Object;", $isReceivePort: true},

port: function() {
  return $._Isolate_port();
},

ReceivePort_ReceivePort: function() {
  return $.ReceivePortImpl$();
},

_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
}}],
["dart.math", "dart:math", , {
_Random: {"": "Object;",
  nextDouble$0: function() {
    return Math.random();
  }
},

min: function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
},

max: function(a, b) {
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if ($.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && $.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
  throw $.wrapException($.ArgumentError$(b));
  throw $.wrapException($.ArgumentError$(a));
},

pow: function(x, exponent) {
  $.checkNum(x);
  $.checkNum(exponent);
  return Math.pow(x, exponent);
},

sin: function(x) {
  if (typeof x !== "number")
    $.throwExpression($.ArgumentError$(x));
  return Math.sin(x);
},

cos: function(x) {
  return Math.cos(x);
},

Random_Random: function(seed) {
  return $.C__Random;
}}],
["dart.typed_data", "dart:typed_data", , {
Endianness: {"": "Object;_littleEndian"},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSDouble]; }, $isIterable: true, $asIterable: function (E) { return [$.JSDouble]; }},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;"},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSDouble]; }, $isIterable: true, $asIterable: function (E) { return [$.JSDouble]; }},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;"},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;"},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;"},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;"},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;"},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;"},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: function (E) { return [$.JSInt]; }, $isIterable: true, $asIterable: function (E) { return [$.JSInt]; }},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;"},

Float32List_Float32List: function($length) {
  return $.Float32List__create1($length);
},

Float32List_Float32List$view: function(buffer, byteOffset, $length) {
  return $.Float32List__create3(buffer, byteOffset, $length);
},

Float32List__create1: function(arg) {
  return new Float32Array(arg);
},

Float32List__create3: function(arg1, arg2, arg3) {
  return new Float32Array(arg1, arg2, arg3);
}}],
["dart.utf", "dart:utf", , {
_ListRange: {"": "IterableBase;_liblib7$_source,_offset,_liblib7$_length",
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._liblib7$_source;
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.get$iterator$bailout(1, t1, t2);
    t3 = this._liblib7$_length;
    if (typeof t3 !== "number")
      return this.get$iterator$bailout(2, t1, t2, t3);
    return new $._ListRangeIteratorImpl(t1, t2 - 1, t2 + t3);
  },
  get$iterator$bailout: function(state0, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this._liblib7$_source;
        t2 = this._offset;
      case 1:
        state0 = 0;
        t3 = this._liblib7$_length;
      case 2:
        var t4;
        state0 = 0;
        t4 = $.getInterceptor$ns(t2);
        t3 = t4.$add(t2, t3);
        return new $._ListRangeIteratorImpl(t1, t4.$sub(t2, 1), t3);
    }
  },
  get$length: function(_) {
    return this._liblib7$_length;
  },
  _ListRange$3: function(source, offset, $length) {
    var t1, t2, t3;
    t1 = this._offset;
    t2 = $.getInterceptor$n(t1);
    if (t2.$lt(t1, 0) || t2.$gt(t1, $.get$length$asx(this._liblib7$_source)))
      throw $.wrapException($.RangeError$value(t1));
    t2 = this._liblib7$_length;
    if (t2 != null && $.$lt$n(t2, 0))
      throw $.wrapException($.RangeError$value(t2));
    t3 = $.getInterceptor$ns(t2);
    if ($.$gt$n(t3.$add(t2, t1), $.get$length$asx(this._liblib7$_source)))
      throw $.wrapException($.RangeError$value(t3.$add(t2, t1)));
  },
  $asIterableBase: function () { return [null]; },
  $asIterable: function () { return [null]; }
},

_ListRangeIteratorImpl: {"": "Object;_liblib7$_source,_offset,_end",
  get$current: function() {
    var t1, t2;
    t1 = this._liblib7$_source;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.get$current$bailout(1, t1);
    t2 = this._offset;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  get$current$bailout: function(state0, t1) {
    return $.$index$asx(t1, this._offset);
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._offset;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    ++t1;
    this._offset = t1;
    t2 = this._end;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return t1 < t2;
  },
  moveNext$0$bailout: function(state0, t1) {
    var t2;
    t1 = $.$add$ns(t1, 1);
    this._offset = t1;
    t2 = this._end;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $.$lt$n(t1, t2);
  }
},

Utf8Decoder: {"": "Object;utf8EncodedBytesIterator,replacementCodepoint,_liblib7$_current",
  get$current: function() {
    return this._liblib7$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4, t5, value, additionalBytes, j, nextValue, validSequence, nonOverlong, inRange;
    this._liblib7$_current = null;
    t1 = this.utf8EncodedBytesIterator;
    t2 = t1._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    ++t2;
    t1._offset = t2;
    t3 = t1._end;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (!(t2 < t3))
      return false;
    t2 = t1._liblib7$_source;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.moveNext$0$bailout(2, t1, t2, t3);
    t4 = t1._offset;
    t5 = $.getInterceptor(t2);
    if (t4 >>> 0 !== t4 || t4 >= t2.length)
      throw $.ioore(t4);
    value = t2[t4];
    if (typeof value !== "number")
      return this.moveNext$0$bailout(3, t1, t2, t3, t5, value);
    if (value < 0) {
      t1 = this.replacementCodepoint;
      if (t1 != null) {
        this._liblib7$_current = t1;
        return true;
      } else
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
    } else if (value <= 127) {
      this._liblib7$_current = value;
      return true;
    } else if (value < 192) {
      t1 = this.replacementCodepoint;
      if (t1 != null) {
        this._liblib7$_current = t1;
        return true;
      } else
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
    } else if (value < 224) {
      value -= 192;
      additionalBytes = 1;
    } else if (value < 240) {
      value -= 224;
      additionalBytes = 2;
    } else if (value < 248) {
      value -= 240;
      additionalBytes = 3;
    } else if (value < 252) {
      value -= 248;
      additionalBytes = 4;
    } else {
      if (value < 254)
        value -= 252;
      else {
        t1 = this.replacementCodepoint;
        if (t1 != null) {
          this._liblib7$_current = t1;
          return true;
        } else
          throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
      }
      additionalBytes = 5;
    }
    j = 0;
    while (true) {
      if (j < additionalBytes) {
        t4 = t1._offset;
        if (typeof t4 !== "number")
          return this.moveNext$0$bailout(4, t1, t2, t3, t5, value, additionalBytes, j, t4);
        ++t4;
        t1._offset = t4;
        t4 = t4 < t3;
      } else
        t4 = false;
      if (!t4)
        break;
      t4 = t1._offset;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      nextValue = t2[t4];
      if (typeof nextValue !== "number")
        return this.moveNext$0$bailout(5, t1, t2, t3, t5, value, additionalBytes, j, 0, nextValue);
      if (nextValue > 127 && nextValue < 192)
        value = (value << 6 | nextValue & 63) >>> 0;
      else {
        if (nextValue >= 192)
          t1._offset = t4 - 1;
        break;
      }
      ++j;
    }
    if (j === additionalBytes)
      validSequence = value < 55296 || value > 57343;
    else
      validSequence = false;
    if (!(additionalBytes === 1 && value > 127))
      if (!(additionalBytes === 2 && value > 2047)) {
        t2 = additionalBytes === 3 && value > 65535;
        nonOverlong = t2;
      } else
        nonOverlong = true;
    else
      nonOverlong = true;
    inRange = value <= 1114111;
    if (validSequence && nonOverlong && inRange) {
      this._liblib7$_current = value;
      return true;
    } else {
      t2 = this.replacementCodepoint;
      if (t2 != null) {
        this._liblib7$_current = t2;
        return true;
      } else {
        t1 = t1._offset;
        if (typeof t1 !== "number")
          return this.moveNext$0$bailout(7, t1, 0, 0, 0, 0, 0, j);
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + $.S(t1 - j)));
      }
    }
  },
  moveNext$0$bailout: function(state0, t1, t2, t3, t4, value, additionalBytes, j, t5, nextValue) {
    switch (state0) {
      case 0:
        this._liblib7$_current = null;
        t1 = this.utf8EncodedBytesIterator;
        t2 = t1._offset;
      case 1:
        state0 = 0;
        t2 = $.$add$ns(t2, 1);
        t1._offset = t2;
        t3 = t1._end;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!$.$lt$n(t2, t3))
          return false;
        t2 = t1._liblib7$_source;
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$asx(t2);
        value = t4.$index(t2, t1._offset);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$n(value);
        if (t5.$lt(value, 0)) {
          t2 = this.replacementCodepoint;
          if (t2 != null) {
            this._liblib7$_current = t2;
            return true;
          } else
            throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + $.S(t1._offset)));
        } else if (t5.$le(value, 127)) {
          this._liblib7$_current = value;
          return true;
        } else if (t5.$lt(value, 192)) {
          t2 = this.replacementCodepoint;
          if (t2 != null) {
            this._liblib7$_current = t2;
            return true;
          } else
            throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + $.S(t1._offset)));
        } else if (t5.$lt(value, 224)) {
          value = t5.$sub(value, 192);
          additionalBytes = 1;
        } else if (t5.$lt(value, 240)) {
          value = t5.$sub(value, 224);
          additionalBytes = 2;
        } else if (t5.$lt(value, 248)) {
          value = t5.$sub(value, 240);
          additionalBytes = 3;
        } else if (t5.$lt(value, 252)) {
          value = t5.$sub(value, 248);
          additionalBytes = 4;
        } else {
          if (t5.$lt(value, 254))
            value = t5.$sub(value, 252);
          else {
            t2 = this.replacementCodepoint;
            if (t2 != null) {
              this._liblib7$_current = t2;
              return true;
            } else
              throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + $.S(t1._offset)));
          }
          additionalBytes = 5;
        }
        j = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
              case 4:
                if (state0 === 4 || state0 === 0 && j < additionalBytes)
                  switch (state0) {
                    case 0:
                      t5 = t1._offset;
                    case 4:
                      state0 = 0;
                      t5 = $.$add$ns(t5, 1);
                      t1._offset = t5;
                      t5 = $.$lt$n(t5, t3);
                  }
                else
                  t5 = false;
                if (!t5)
                  break L0;
                nextValue = t4.$index(t2, t1._offset);
              case 5:
                state0 = 0;
                t5 = $.getInterceptor$n(nextValue);
              case 6:
                if (state0 === 0 && t5.$gt(nextValue, 127) && t5.$lt(nextValue, 192)) {
                  if (typeof value !== "number")
                    throw value.$shl();
                  if (typeof nextValue !== "number")
                    throw nextValue.$and();
                  value = (value << 6 | nextValue & 63) >>> 0;
                } else
                  switch (state0) {
                    case 0:
                    case 6:
                      if (state0 === 6 || state0 === 0 && t5.$ge(nextValue, 192))
                        switch (state0) {
                          case 0:
                            t2 = t1._offset;
                          case 6:
                            state0 = 0;
                            t1._offset = $.$sub$n(t2, 1);
                        }
                      break L0;
                  }
                ++j;
            }
        if (j === additionalBytes) {
          t2 = $.getInterceptor$n(value);
          validSequence = t2.$lt(value, 55296) || t2.$gt(value, 57343);
        } else
          validSequence = false;
        if (!(additionalBytes === 1 && $.$gt$n(value, 127)))
          if (!(additionalBytes === 2 && $.$gt$n(value, 2047))) {
            t2 = additionalBytes === 3 && $.$gt$n(value, 65535);
            nonOverlong = t2;
          } else
            nonOverlong = true;
        else
          nonOverlong = true;
        inRange = $.$le$n(value, 1114111);
      case 7:
        var validSequence, nonOverlong, inRange;
        if (state0 === 0 && validSequence && nonOverlong && inRange) {
          this._liblib7$_current = value;
          return true;
        } else
          switch (state0) {
            case 0:
              t2 = this.replacementCodepoint;
            case 7:
              if (state0 === 0 && t2 != null) {
                this._liblib7$_current = t2;
                return true;
              } else
                switch (state0) {
                  case 0:
                    t1 = t1._offset;
                  case 7:
                    state0 = 0;
                    throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + $.S($.$sub$n(t1, j))));
                }
          }
    }
  }
},

_ListRange$: function(source, offset, $length) {
  var t1 = $length == null ? $.$sub$n($.get$length$asx(source), offset) : $length;
  t1 = new $._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, $length);
  return t1;
},

_ListRangeIteratorImpl$: function(_source, offset, _end) {
  return new $._ListRangeIteratorImpl(_source, $.$sub$n(offset, 1), _end);
},

_addToEncoding: function(offset, bytes, value, buffer) {
  var t1, t2;
  if (typeof value !== "number")
    return $._addToEncoding$bailout(1, offset, bytes, value, buffer);
  for (t1 = buffer.length; bytes > 0;) {
    t2 = offset + bytes;
    if (t2 < 0 || t2 >= t1)
      throw $.ioore(t2);
    buffer[t2] = (128 | value & 63) >>> 0;
    value = $.JSNumber_methods.$shr(value, 6);
    --bytes;
  }
  return value;
},

_addToEncoding$bailout: function(state0, offset, bytes, value, buffer) {
  var t1, t2;
  for (t1 = buffer.length; bytes > 0;) {
    t2 = offset + bytes;
    if (typeof value !== "number")
      throw value.$and();
    if (t2 < 0 || t2 >= t1)
      throw $.ioore(t2);
    buffer[t2] = (128 | value & 63) >>> 0;
    value = $.JSNumber_methods.$shr(value, 6);
    --bytes;
  }
  return value;
},

codepointsToUtf8: function(codepoints, offset, $length) {
  var source, t1, t2, t3, t4, t5, t6, t7, t8, encodedLength, t9, value, encoded, insertAt, insertAt0;
  source = $._ListRange$(codepoints, offset, $length);
  t1 = source._liblib7$_source;
  t2 = source._offset;
  if (typeof t2 !== "number")
    return $.codepointsToUtf8$bailout(1, t1, t2, source);
  t3 = source._liblib7$_length;
  if (typeof t3 !== "number")
    return $.codepointsToUtf8$bailout(2, t1, t2, 0, t3);
  t4 = t2 + t3;
  t5 = $._ListRangeIteratorImpl$(t1, t2, t4);
  t6 = t5._end;
  if (typeof t6 !== "number")
    return $.codepointsToUtf8$bailout(3, t1, t2, 0, t3, t5, t6, $.JSNumber_methods);
  t7 = t5._liblib7$_source;
  if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !$.isJsIndexable(t7, t7[$.dispatchPropertyName])))
    return $.codepointsToUtf8$bailout(4, t1, t2, 0, t3, t5, t6, $.JSNumber_methods, t7);
  t8 = $.getInterceptor(t7);
  encodedLength = 0;
  while (true) {
    t9 = t5._offset;
    if (typeof t9 !== "number")
      return $.codepointsToUtf8$bailout(5, t1, t2, 0, t3, t5, t6, $.JSNumber_methods, t7, t8, encodedLength, t9);
    ++t9;
    t5._offset = t9;
    if (!(t9 < t6))
      break;
    t9 = t5._offset;
    if (t9 >>> 0 !== t9 || t9 >= t7.length)
      throw $.ioore(t9);
    value = t7[t9];
    if (typeof value !== "number")
      return $.codepointsToUtf8$bailout(6, t1, t2, 0, t3, t5, t6, $.JSNumber_methods, t7, t8, encodedLength, 0, value);
    if (value < 0 || value > 1114111)
      encodedLength += 3;
    else if (value <= 127)
      ++encodedLength;
    else if (value <= 2047)
      encodedLength += 2;
    else if (value <= 65535)
      encodedLength += 3;
    else if (value <= 1114111)
      encodedLength += 4;
  }
  encoded = $.List_List(encodedLength, $.JSInt);
  encoded.$builtinTypeInfo = [$.JSInt];
  t1 = $._ListRangeIteratorImpl$(t1, t2, t4);
  t2 = t1._end;
  if (typeof t2 !== "number")
    return $.codepointsToUtf8$bailout(7, t1, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, encoded);
  t3 = t1._liblib7$_source;
  if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
    return $.codepointsToUtf8$bailout(8, t1, t2, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, encoded);
  t4 = $.getInterceptor(t3);
  t5 = encoded.length;
  insertAt = 0;
  while (true) {
    t6 = t1._offset;
    if (typeof t6 !== "number")
      return $.codepointsToUtf8$bailout(9, t1, t2, 0, t3, t5, t6, t4, 0, 0, 0, 0, 0, encoded, insertAt);
    ++t6;
    t1._offset = t6;
    if (!(t6 < t2))
      break;
    t6 = t1._offset;
    if (t6 >>> 0 !== t6 || t6 >= t3.length)
      throw $.ioore(t6);
    value = t3[t6];
    if (typeof value !== "number")
      return $.codepointsToUtf8$bailout(10, t1, t2, 0, t3, t5, 0, t4, 0, 0, 0, 0, value, encoded, insertAt);
    if (value < 0 || value > 1114111) {
      insertAt0 = insertAt + 3;
      $.IterableMixinWorkaround_setRangeList(encoded, insertAt, insertAt0, [239, 191, 189], 0);
      insertAt = insertAt0;
    } else if (value <= 127) {
      if (insertAt >= t5)
        throw $.ioore(insertAt);
      encoded[insertAt] = value;
      ++insertAt;
    } else if (value <= 2047) {
      t6 = $._addToEncoding(insertAt, 1, value, encoded);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (insertAt >= t5)
        throw $.ioore(insertAt);
      encoded[insertAt] = (192 | 31 & t6) >>> 0;
      insertAt += 2;
    } else if (value <= 65535) {
      t6 = $._addToEncoding(insertAt, 2, value, encoded);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (insertAt >= t5)
        throw $.ioore(insertAt);
      encoded[insertAt] = (224 | 15 & t6) >>> 0;
      insertAt += 3;
    } else if (value <= 1114111) {
      t6 = $._addToEncoding(insertAt, 3, value, encoded);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      if (insertAt >= t5)
        throw $.ioore(insertAt);
      encoded[insertAt] = (240 | 7 & t6) >>> 0;
      insertAt += 4;
    }
  }
  return encoded;
},

codepointsToUtf8$bailout: function(state0, t1, t2, source, t3, t5, t6, t4, t7, t8, encodedLength, t9, value, encoded, insertAt) {
  switch (state0) {
    case 0:
      source = $._ListRange$(codepoints, offset, $length);
      t1 = source._liblib7$_source;
      t2 = source._offset;
    case 1:
      state0 = 0;
      t3 = source._liblib7$_length;
    case 2:
      state0 = 0;
      t4 = $.getInterceptor$ns(t2);
      t5 = $._ListRangeIteratorImpl$(t1, t2, t4.$add(t2, t3));
      t6 = t5._end;
    case 3:
      state0 = 0;
      t7 = t5._liblib7$_source;
    case 4:
      state0 = 0;
      t8 = $.getInterceptor$asx(t7);
      encodedLength = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              t9 = t5._offset;
            case 5:
              state0 = 0;
              t9 = $.$add$ns(t9, 1);
              t5._offset = t9;
              if (!$.$lt$n(t9, t6))
                break L0;
              value = t8.$index(t7, t5._offset);
            case 6:
              state0 = 0;
              t9 = $.getInterceptor$n(value);
              if (t9.$lt(value, 0) || t9.$gt(value, 1114111))
                encodedLength += 3;
              else if (t9.$le(value, 127))
                ++encodedLength;
              else if (t9.$le(value, 2047))
                encodedLength += 2;
              else if (t9.$le(value, 65535))
                encodedLength += 3;
              else if (t9.$le(value, 1114111))
                encodedLength += 4;
          }
      encoded = $.List_List(encodedLength, $.JSInt);
      encoded.$builtinTypeInfo = [$.JSInt];
      t1 = $._ListRangeIteratorImpl$(t1, t2, t4.$add(t2, t3));
      t2 = t1._end;
    case 7:
      state0 = 0;
      t3 = t1._liblib7$_source;
    case 8:
      state0 = 0;
      t4 = $.getInterceptor$asx(t3);
      t5 = encoded.length;
      insertAt = 0;
    case 9:
    case 10:
      var insertAt0;
      L1:
        while (true)
          switch (state0) {
            case 0:
              t6 = t1._offset;
            case 9:
              state0 = 0;
              t6 = $.$add$ns(t6, 1);
              t1._offset = t6;
              if (!$.$lt$n(t6, t2))
                break L1;
              value = t4.$index(t3, t1._offset);
            case 10:
              state0 = 0;
              t6 = $.getInterceptor$n(value);
              if (t6.$lt(value, 0) || t6.$gt(value, 1114111)) {
                insertAt0 = insertAt + 3;
                $.IterableMixinWorkaround_setRangeList(encoded, insertAt, insertAt0, [239, 191, 189], 0);
                insertAt = insertAt0;
              } else if (t6.$le(value, 127)) {
                if (insertAt >= t5)
                  throw $.ioore(insertAt);
                encoded[insertAt] = value;
                ++insertAt;
              } else if (t6.$le(value, 2047)) {
                t6 = $._addToEncoding(insertAt, 1, value, encoded);
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (insertAt >= t5)
                  throw $.ioore(insertAt);
                encoded[insertAt] = (192 | 31 & t6) >>> 0;
                insertAt += 2;
              } else if (t6.$le(value, 65535)) {
                t6 = $._addToEncoding(insertAt, 2, value, encoded);
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (insertAt >= t5)
                  throw $.ioore(insertAt);
                encoded[insertAt] = (224 | 15 & t6) >>> 0;
                insertAt += 3;
              } else if (t6.$le(value, 1114111)) {
                t6 = $._addToEncoding(insertAt, 3, value, encoded);
                if (typeof t6 !== "number")
                  throw $.iae(t6);
                if (insertAt >= t5)
                  throw $.ioore(insertAt);
                encoded[insertAt] = (240 | 7 & t6) >>> 0;
                insertAt += 4;
              }
          }
      return encoded;
  }
}}],
["dartemis", "package:dartemis/dartemis.dart", , {
Aspect: {"": "Object;_all,_excluded,_one",
  allOf$1: function(componentTypes) {
    this._all = this._updateBitMask$2(this._all, componentTypes);
    return this;
  },
  get$all: function() {
    return this._all;
  },
  get$excluded: function() {
    return this._excluded;
  },
  get$one: function() {
    return this._one;
  },
  _updateBitMask$2: function(mask, componentTypes) {
    var t1 = {};
    t1.mask_0 = mask;
    $.JSArray_methods.forEach$1(componentTypes, new $.Aspect__updateBitMask_closure(t1));
    return t1.mask_0;
  }
},

Aspect__updateBitMask_closure: {"": "Closure;box_0",
  call$1: function(componentType) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.mask_0;
    t3 = $.ComponentTypeManager_getBit(componentType);
    if (typeof t2 !== "number")
      throw t2.$or();
    t1.mask_0 = (t2 | t3) >>> 0;
  },
  $isFunction: true
},

Component: {"": "Object;",
  _removed$0: function() {
  },
  $isComponent: true
},

ComponentPoolable: {"": "Component_Poolable;",
  _removed$0: function() {
    this.moveToPool$0();
  },
  cleanUp$0: function() {
  }
},

Component_Poolable: {"": "Component+Poolable;"},

ComponentManager: {"": "Manager;_componentsByType,_deleted,_world",
  initialize$0: function() {
  },
  _removeComponentsOfEntity$1: function(e) {
    this._forComponentsOfEntity$2(e, new $.ComponentManager__removeComponentsOfEntity_closure(e));
    e.set$_typeBits(0);
  },
  _addComponent$3: function(e, type, component) {
    var index, t1, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t1._ensureCapacity$1(index);
    components = t1.$index(t1, index);
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    $.$indexSet$ax(components, e.id, component);
    e._addTypeBit$1(type.get$bit());
  },
  getComponentsByType$1: function(type) {
    var index, t1, components;
    index = $.get$id$x(type);
    t1 = this._componentsByType;
    t1._ensureCapacity$1(index);
    components = t1.$index(t1, index);
    if (components == null) {
      components = $.Bag$(16, $.Component);
      t1.$indexSet(t1, index, components);
    }
    return components;
  },
  _getComponent$2: function(e, type) {
    var t1, components;
    t1 = this._componentsByType;
    components = t1.$index(t1, $.get$id$x(type));
    if (components != null && components.isIndexWithinBounds$1(e.id))
      return $.$index$asx(components, e.id);
    return;
  },
  _forComponentsOfEntity$2: function(e, f) {
    var componentBits, t1, index, t2;
    componentBits = e.get$_typeBits();
    for (t1 = this._componentsByType, index = 0; componentBits > 0;) {
      if ((componentBits & 1) === 1) {
        t2 = t1._data;
        if (index >= t2.length)
          throw $.ioore(index);
        f.call$2(t2[index], index);
      }
      ++index;
      componentBits = $.JSInt_methods.$shr(componentBits, 1);
    }
  },
  deleted$1: function(e) {
    var t1 = this._deleted;
    return t1.add$1(t1, e);
  },
  clean$0: function() {
    var t1 = this._deleted;
    t1.forEach$1(t1, new $.ComponentManager_clean_closure(this));
    t1 = this._deleted;
    t1.clear$0(t1);
  }
},

ComponentManager__removeComponentsOfEntity_closure: {"": "Closure;e_0",
  call$2: function(components, typeId) {
    var t1, t2, t3;
    t1 = this.e_0;
    t2 = $.getInterceptor$x(t1);
    t3 = $.getInterceptor$asx(components);
    t3.$index(components, t2.get$id(t1))._removed$0();
    t3.$indexSet(components, t2.get$id(t1), null);
  },
  $isFunction: true
},

ComponentManager_clean_closure: {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0._removeComponentsOfEntity$1(entity);
  },
  $isFunction: true
},

ComponentMapper: {"": "Object;_type,_components",
  get$1: function(e) {
    return $.subtypeOfRuntimeTypeCast($.$index$asx(this._components, $.get$id$x(e)), $.getRuntimeTypeArgument(this, "ComponentMapper", 0));
  },
  getSafe$1: function(e) {
    var t1, t2, $arguments;
    t1 = $.getInterceptor$x(e);
    if (this._components.isIndexWithinBounds$1(t1.get$id(e))) {
      t2 = this._components;
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
        return this.getSafe$1$bailout(1, e, t2, t1);
      t1 = t1.get$id(e);
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw $.ioore(t1);
      t1 = t2[t1];
      $arguments = $.getRuntimeTypeArguments(this, "ComponentMapper");
      return $.subtypeOfRuntimeTypeCast(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    }
    return;
  },
  getSafe$1$bailout: function(state0, e, t2, t1) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(e);
      case 1:
        var $arguments;
        if (state0 === 1 || state0 === 0 && this._components.isIndexWithinBounds$1(t1.get$id(e)))
          switch (state0) {
            case 0:
              t2 = this._components;
            case 1:
              state0 = 0;
              t1 = $.$index$asx(t2, t1.get$id(e));
              $arguments = $.getRuntimeTypeArguments(this, "ComponentMapper");
              return $.subtypeOfRuntimeTypeCast(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
          }
        return;
    }
  },
  ComponentMapper$2: function(componentType, world, A) {
    this._type = $.ComponentTypeManager_getTypeFor(componentType);
    this._components = world.get$componentManager().getComponentsByType$1(this._type);
  }
},

ComponentType: {"": "Object;_bit,_liblib8$_id",
  get$bit: function() {
    return this._bit;
  },
  get$id: function(_) {
    return this._liblib8$_id;
  },
  ComponentType$0: function() {
    var t1 = $.ComponentType__nextBit;
    this._bit = t1;
    $.ComponentType__nextBit = t1 << 1 >>> 0;
    t1 = $.ComponentType__nextId;
    $.ComponentType__nextId = $.$add$ns(t1, 1);
    this._liblib8$_id = t1;
  },
  $isComponentType: true
},

Entity: {"": "Object;id>,_uniqueId,_typeBits@,_systemBits<,_world,_entityManager,_componentManager",
  _addTypeBit$1: function(bit) {
    this._typeBits = (this._typeBits | bit) >>> 0;
  },
  _addSystemBit$1: function(bit) {
    var t1 = this._systemBits;
    if (typeof bit !== "number")
      throw $.iae(bit);
    this._systemBits = (t1 | bit) >>> 0;
  },
  _removeSystemBit$1: function(bit) {
    this._systemBits = (this._systemBits & $.$not$i(bit)) >>> 0;
  },
  toString$0: function(_) {
    return "Entity[" + $.S(this.id) + "]";
  },
  addComponent$1: function(component) {
    this._componentManager._addComponent$3(this, $.ComponentTypeManager_getTypeFor($.get$runtimeType$(component)), component);
  },
  getComponent$1: function(type) {
    return this._componentManager._getComponent$2(this, type);
  },
  deleteFromWorld$0: function() {
    return this._world.deleteEntity$1(this);
  },
  Entity$_$2: function(_world, id) {
    this._entityManager = this._world.get$entityManager();
    this._componentManager = this._world.get$componentManager();
  },
  $isEntity: true
},

EntityManager: {"": "Manager;_entities,_deletedEntities,_disabled,_active,_added,_created,_deleted,_identifierPool,_world",
  initialize$0: function() {
  },
  _createEntityInstance$0: function() {
    var t1, e;
    t1 = this._deletedEntities;
    e = t1.removeLast$0(t1);
    if (null == e)
      e = $.Entity$_(this._world, this._identifierPool.checkOut$0());
    this._created = this._created + 1;
    return e;
  },
  added$1: function(e) {
    var t1;
    this._active = this._active + 1;
    this._added = this._added + 1;
    t1 = this._entities;
    t1.$indexSet(t1, $.get$id$x(e), e);
  },
  enabled$1: function(e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), false);
  },
  disabled$1: function(_, e) {
    var t1 = this._disabled;
    t1.$indexSet(t1, $.get$id$x(e), true);
  },
  deleted$1: function(e) {
    var t1, t2;
    t1 = this._entities;
    t2 = $.getInterceptor$x(e);
    t1.$indexSet(t1, t2.get$id(e), null);
    t1 = this._disabled;
    t1.$indexSet(t1, t2.get$id(e), false);
    t2 = this._deletedEntities;
    t2.add$1(t2, e);
    this._active = this._active - 1;
    this._deleted = this._deleted + 1;
  }
},

_IdentifierPool: {"": "Object;_ids,_nextAvailableId",
  checkOut$0: function() {
    var t1 = this._ids;
    if ($.$gt$n(t1.get$size(t1), 0))
      return t1.removeLast$0(t1);
    t1 = this._nextAvailableId;
    this._nextAvailableId = t1 + 1;
    return t1;
  }
},

EntitySystem: {"": "Object;world<",
  get$passive: function() {
    return this._passive;
  },
  begin$0: function() {
  },
  process$0: function() {
    if (this.checkProcessing$0()) {
      this.begin$0();
      var t1 = this._actives;
      this.processEntities$1(t1.get$readOnly(t1));
      this.end$0();
    }
  },
  end$0: function() {
  },
  initialize$0: function() {
  },
  inserted$1: function(entity) {
  },
  removed$1: function(entity) {
  },
  _check$1: function(e) {
    var contains, t1, t2, interest;
    if (this._liblib8$_dummy)
      return;
    contains = this._contains$1(e);
    t1 = this._all;
    t2 = e.get$_typeBits();
    if (typeof t1 !== "number")
      throw t1.$and();
    interest = (t1 & t2) >>> 0 === t1;
    t1 = this._one;
    if (t1 > 0 && interest)
      interest = (t1 & t2) >>> 0 > 0;
    t1 = this._excluded;
    if (t1 > 0 && interest)
      interest = (t1 & t2) >>> 0 === 0;
    if (interest && !contains)
      this._insertToSystem$1(e);
    else if (!interest && contains)
      this._removeFromSystem$1(e);
  },
  _contains$1: function(e) {
    var t1, t2;
    t1 = this._systemBit;
    t2 = e.get$_systemBits();
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & t2) >>> 0 === t1;
  },
  _insertToSystem$1: function(e) {
    var t1 = this._actives;
    t1.add$1(t1, e);
    e._addSystemBit$1(this._systemBit);
    this.inserted$1(e);
  },
  _removeFromSystem$1: function(e) {
    var t1 = this._actives;
    t1.remove$1(t1, e);
    e._removeSystemBit$1(this._systemBit);
    this.removed$1(e);
  },
  added$1: function(e) {
    return this._check$1(e);
  },
  changed$1: function(e) {
    return this._check$1(e);
  },
  enabled$1: function(e) {
    return this._check$1(e);
  },
  deleted$1: function(e) {
    if (this._contains$1(e))
      this._removeFromSystem$1(e);
  },
  disabled$1: function(_, e) {
    if (this._contains$1(e))
      this._removeFromSystem$1(e);
  },
  EntitySystem$1: function(aspect) {
    this._liblib8$_dummy = $.$eq(this._all, 0) && this._one === 0;
    this._systemBit = $._SystemBitManager__getBitFor(this.get$runtimeType(this));
  },
  $isEntitySystem: true
},

Manager: {"": "Object;",
  added$1: function(e) {
  },
  changed$1: function(e) {
  },
  deleted$1: function(e) {
  },
  disabled$1: function(_, e) {
  },
  enabled$1: function(e) {
  },
  $isManager: true
},

GroupManager: {"": "Manager;_entitiesByGroup<,_groupsByEntity,_world",
  initialize$0: function() {
  },
  add$2: function(_, e, group) {
    var t1, entities, groups;
    t1 = this._entitiesByGroup;
    entities = t1.$index(t1, group);
    if (entities == null) {
      entities = $.Bag$(16, $.Entity);
      t1.$indexSet(t1, group, entities);
    }
    $.add$1$ax(entities, e);
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    if (groups == null) {
      groups = $.Bag$(16, $.JSString);
      t1.$indexSet(t1, e, groups);
    }
    $.add$1$ax(groups, group);
  },
  removeFromAllGroups$1: function(e) {
    var t1, groups;
    t1 = this._groupsByEntity;
    groups = t1.$index(t1, e);
    if (groups != null) {
      t1 = $.getInterceptor$ax(groups);
      t1.forEach$1(groups, new $.GroupManager_removeFromAllGroups_closure(this, e));
      t1.clear$0(groups);
    }
  },
  deleted$1: function(e) {
    return this.removeFromAllGroups$1(e);
  }
},

GroupManager_removeFromAllGroups_closure: {"": "Closure;this_0,e_1",
  call$1: function(group) {
    var t1, entities;
    t1 = this.this_0.get$_entitiesByGroup();
    entities = t1.$index(t1, group);
    if (entities != null)
      $.remove$1$ax(entities, this.e_1);
  },
  $isFunction: true
},

PlayerManager: {"": "Manager;_playerByEntity,_entitiesByPlayer,_world",
  removeFromPlayer$1: function(e) {
    var t1, player, entities;
    t1 = this._playerByEntity;
    player = t1.$index(t1, e);
    if (player != null) {
      t1 = this._entitiesByPlayer;
      entities = t1.$index(t1, player);
      if (entities != null)
        $.remove$1$ax(entities, e);
    }
  },
  initialize$0: function() {
  },
  deleted$1: function(e) {
    return this.removeFromPlayer$1(e);
  },
  PlayerManager$0: function() {
    this._playerByEntity = $.Map_Map($.Entity, $.JSString);
    this._entitiesByPlayer = $.Map_Map($.JSString, [$.Bag, $.Entity]);
  }
},

EntityProcessingSystem: {"": "EntitySystem;",
  processEntities$1: function(entities) {
    return entities.forEach$1(entities, new $.EntityProcessingSystem_processEntities_closure(this));
  },
  checkProcessing$0: function() {
    return true;
  }
},

EntityProcessingSystem_processEntities_closure: {"": "Closure;this_0",
  call$1: function(entity) {
    return this.this_0.processEntity$1(entity);
  },
  $isFunction: true
},

IntervalEntitySystem: {"": "EntitySystem;",
  get$delta: function() {
    return this._delta;
  },
  checkProcessing$0: function() {
    var t1, t2;
    t1 = this._acc;
    t2 = this.world.delta;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._acc = t1 + t2;
    t2 = this._delta;
    t1 = this.world.delta;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._delta = t2 + t1;
    t1 = this._acc;
    t2 = this._interval;
    if (t1 >= t2) {
      this._acc = t1 - t2;
      return true;
    }
    return false;
  },
  end$0: function() {
    this._delta = 0;
  }
},

Bag: {"": "Object;_data,_size,_readOnly",
  $index: function(_, index) {
    var t1 = this._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$size: function(_) {
    return this._size;
  },
  get$readOnly: function(_) {
    return this._readOnly;
  },
  get$isEmpty: function(_) {
    var t1 = this._size;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  forEach$1: function(_, f) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this._size;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this._data;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$1(t1[i]);
      ++i;
    }
  },
  removeLast$0: function(_) {
    var t1, t2, current;
    t1 = this._size;
    if (t1 !== (t1 | 0))
      return this.removeLast$0$bailout(1, t1);
    if (t1 > 0) {
      t2 = this._data;
      --t1;
      this._size = t1;
      if (t1 >= t2.length)
        throw $.ioore(t1);
      current = t2[t1];
      t1 = this._data;
      t2 = this._size;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2] = null;
      return current;
    }
    return;
  },
  removeLast$0$bailout: function(state0, t1) {
    var t2, t3, current;
    t2 = $.getInterceptor$n(t1);
    if (t2.$gt(t1, 0)) {
      t3 = this._data;
      t1 = t2.$sub(t1, 1);
      this._size = t1;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw $.ioore(t1);
      current = t3[t1];
      t1 = this._data;
      t3 = this._size;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw $.ioore(t3);
      t1[t3] = null;
      return current;
    }
    return;
  },
  remove$1: function(_, element) {
    var t1, i, t2, t3;
    t1 = $.getInterceptor(element);
    i = 0;
    while (true) {
      t2 = this._size;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i])) {
        t1 = this._data;
        t2 = $.$sub$n(this._size, 1);
        this._size = t2;
        t3 = t1.length;
        if (t2 >>> 0 !== t2 || t2 >= t3)
          throw $.ioore(t2);
        t2 = t1[t2];
        if (i >= t3)
          throw $.ioore(i);
        t1[i] = t2;
        t2 = this._data;
        t1 = this._size;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          throw $.ioore(t1);
        t2[t1] = null;
        return true;
      }
      ++i;
    }
    return false;
  },
  contains$1: function(_, element) {
    var t1, i, t2;
    for (t1 = $.getInterceptor(element), i = 0; $.$gt$n(this._size, i); ++i) {
      t2 = this._data;
      if (i >= t2.length)
        throw $.ioore(i);
      if (t1.$eq(element, t2[i]))
        return true;
    }
    return false;
  },
  removeAll$1: function(_, bag) {
    var t1, modified, i, t2, o1, j, t3, t4;
    t1 = $.getInterceptor$x(bag);
    modified = false;
    i = 0;
    while (true) {
      t2 = t1.get$size(bag);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!$.JSInt_methods.$lt(i, t2))
        break;
      o1 = t1.$index(bag, i);
      t2 = $.getInterceptor(o1);
      j = 0;
      while (true) {
        t3 = this._size;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(j < t3))
          break;
        t3 = this._data;
        if (j >= t3.length)
          throw $.ioore(j);
        if (t2.$eq(o1, t3[j])) {
          t2 = this._data;
          t3 = t2.length;
          if (j >= t3)
            throw $.ioore(j);
          t4 = $.$sub$n(this._size, 1);
          this._size = t4;
          if (t4 >>> 0 !== t4 || t4 >= t3)
            throw $.ioore(t4);
          t2[j] = t2[t4];
          t4 = this._data;
          t2 = this._size;
          if (t2 >>> 0 !== t2 || t2 >= t4.length)
            throw $.ioore(t2);
          t4[t2] = null;
          modified = true;
          break;
        }
        ++j;
      }
      ++i;
    }
    return modified;
  },
  get$capacity: function() {
    return this._data.length;
  },
  add$1: function(_, element) {
    var t1, t2;
    t1 = this._size;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, t1);
    t2 = this._data.length;
    if (t1 === t2)
      this._growTo$1($.JSInt_methods.toInt$0(t2 * 3 / 2 + 1));
    t1 = this._data;
    t2 = this._size;
    if (t2 !== (t2 | 0))
      return this.add$1$bailout(2, element, t1, t2);
    this._size = t2 + 1;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
  },
  add$1$bailout: function(state0, element, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._size;
      case 1:
        state0 = 0;
        if ($.$eq(t1, this._data.length))
          this._growTo$1($.JSInt_methods.toInt$0(this._data.length * 3 / 2 + 1));
        t1 = this._data;
        t2 = this._size;
      case 2:
        state0 = 0;
        this._size = $.$add$ns(t2, 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          throw $.ioore(t2);
        t1[t2] = element;
    }
  },
  $indexSet: function(_, index, element) {
    var t1, t2, t3;
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, element);
    t1 = this._data;
    t2 = t1.length;
    if (index >= t2) {
      t3 = $.List_List(index * 2, $.getRuntimeTypeArgument(this, "Bag", 0));
      $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(this, "Bag", 0)]);
      this._data = t3;
      $.JSArray_methods.setRange$3(this._data, 0, t2, t1);
    }
    t1 = this._size;
    if (typeof t1 !== "number")
      return this.$$indexSet$bailout(2, index, element, $.JSInt_methods, t1);
    if (t1 <= index)
      this._size = index + 1;
    t1 = this._data;
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = element;
  },
  $$indexSet$bailout: function(state0, index, element, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$n(index);
        if (t1.$ge(index, this._data.length)) {
          t2 = t1.$mul(index, 2);
          oldData = this._data;
          t2 = $.List_List(t2, $.getRuntimeTypeArgument(this, "Bag", 0));
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(this, "Bag", 0)]);
          this._data = t2;
          $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
        }
        t2 = this._size;
      case 2:
        var oldData;
        state0 = 0;
        if ($.$le$n(t2, index))
          this._size = t1.$add(index, 1);
        t1 = this._data;
        if (index >>> 0 !== index || index >= t1.length)
          throw $.ioore(index);
        t1[index] = element;
    }
  },
  _growTo$1: function(newCapacity) {
    var oldData, t1;
    oldData = this._data;
    t1 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, "Bag", 0));
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "Bag", 0)]);
    this._data = t1;
    $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
  },
  _ensureCapacity$1: function(index) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$ge(index, this._data.length))
      this._growTo$1(t1.$mul(index, 2));
  },
  clear$0: function(_) {
    var t1, t2, t3, i;
    t1 = this._size;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this._data;
    t3 = t2.length;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
    this._size = 0;
  },
  addAll$1: function(_, items) {
    var t1, i, t2, t3, truncated, newCapacity, oldData, t4;
    for (t1 = $.getInterceptor$x(items), i = 0; $.$gt$n(t1.get$size(items), i); ++i) {
      t2 = t1.$index(items, i);
      if ($.$eq(this._size, this._data.length)) {
        t3 = this._data.length * 3 / 2 + 1;
        if ($.JSInt_methods.get$isNaN(t3))
          $.throwExpression($.UnsupportedError$("NaN"));
        if ($.JSInt_methods.get$isInfinite(t3))
          $.throwExpression($.UnsupportedError$("Infinity"));
        truncated = $.JSInt_methods.truncateToDouble$0(t3);
        newCapacity = truncated == -0.0 ? 0 : truncated;
        oldData = this._data;
        t3 = $.List_List(newCapacity, $.getRuntimeTypeArgument(this, "Bag", 0));
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(this, "Bag", 0)]);
        this._data = t3;
        $.JSArray_methods.setRange$3(this._data, 0, oldData.length, oldData);
      }
      t3 = this._data;
      t4 = this._size;
      this._size = $.$add$ns(t4, 1);
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw $.ioore(t4);
      t3[t4] = t2;
    }
  },
  isIndexWithinBounds$1: function(index) {
    return $.$lt$n(index, this.get$capacity());
  },
  toString$0: function(_) {
    return "[" + $.JSArray_methods.join$1(this._data, ",") + "]";
  },
  Bag$1$capacity: function(capacity, E) {
    this._readOnly = $.ReadOnlyBag$_of(this, null);
  },
  $isBag: true
},

Poolable: {"": "Object;",
  moveToPool$0: function() {
    this.cleanUp$0();
    $.ObjectPool_add(this);
  }
},

ReadOnlyBag: {"": "Object;_bag",
  $index: function(_, index) {
    var t1 = this._bag._data;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$size: function(_) {
    return this._bag._size;
  },
  get$isEmpty: function(_) {
    var t1 = this._bag._size;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  contains$1: function(_, element) {
    var t1 = this._bag;
    return t1.contains$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1 = this._bag;
    return t1.forEach$1(t1, f);
  }
},

World: {"": "Object;_entityManager,_componentManager,_added,_changed,_deleted,_enable,_disable,_systems,_systemsList<,_managers,_managersBag<,delta?,_frame,_time",
  initialize$0: function() {
    var t1 = this._managersBag;
    t1.forEach$1(t1, new $.World_initialize_closure());
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_initialize_closure0());
  },
  get$entityManager: function() {
    return this._entityManager;
  },
  get$componentManager: function() {
    return this._componentManager;
  },
  addManager$1: function(manager) {
    var t1 = this._managers;
    t1.$indexSet(t1, manager.get$runtimeType(manager), manager);
    t1 = this._managersBag;
    t1.add$1(t1, manager);
    manager._world = this;
  },
  createEntity$0: function() {
    return this._entityManager._createEntityInstance$0();
  },
  addSystem$2$passive: function(system, passive) {
    var t1;
    system.world = this;
    system._passive = passive;
    t1 = this._systems;
    t1.$indexSet(t1, system.get$runtimeType(system), system);
    this._systemsList.push(system);
    return system;
  },
  addSystem$1: function(system) {
    return this.addSystem$2$passive(system, false);
  },
  getSystem$1: function(type) {
    var t1 = this._systems;
    return t1.$index(t1, type);
  },
  _check$2: function(entities, perform) {
    entities.forEach$1(entities, new $.World__check_closure(this, perform));
    entities.clear$0(entities);
  },
  process$0: function() {
    var t1, t2;
    this._frame = this._frame + 1;
    t1 = this._time;
    t2 = this.delta;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._time = t1 + t2;
    this.processEntityChanges$0();
    $.JSArray_methods.forEach$1(this._systemsList, new $.World_process_closure());
  },
  processEntityChanges$0: function() {
    this._check$2(this._added, new $.World_processEntityChanges_closure());
    this._check$2(this._changed, new $.World_processEntityChanges_closure0());
    this._check$2(this._disable, new $.World_processEntityChanges_closure1());
    this._check$2(this._enable, new $.World_processEntityChanges_closure2());
    this._check$2(this._deleted, new $.World_processEntityChanges_closure3());
    this._componentManager.clean$0();
  },
  deleteAllEntities$0: function() {
    var t1 = this.get$entityManager()._entities;
    t1.forEach$1(t1, new $.World_deleteAllEntities_closure(this));
    this.processEntityChanges$0();
  },
  addEntity$1: function(e) {
    var t1 = this._added;
    return t1.add$1(t1, e);
  },
  deleteEntity$1: function(e) {
    var t1 = this._deleted;
    if (!t1.contains$1(t1, e))
      t1.add$1(t1, e);
  },
  World$0: function() {
    this.addManager$1(this._entityManager);
    this.addManager$1(this._componentManager);
  }
},

World_initialize_closure: {"": "Closure;",
  call$1: function(manager) {
    return manager.initialize$0();
  },
  $isFunction: true
},

World_initialize_closure0: {"": "Closure;",
  call$1: function(system) {
    return system.initialize$0();
  },
  $isFunction: true
},

World__check_closure: {"": "Closure;this_0,perform_1",
  call$1: function(entity) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$_managersBag();
    t3 = this.perform_1;
    t2.forEach$1(t2, new $.World__check__closure(t3, entity));
    $.JSArray_methods.forEach$1(t1.get$_systemsList(), new $.World__check__closure0(t3, entity));
  },
  $isFunction: true
},

World__check__closure: {"": "Closure;perform_2,entity_3",
  call$1: function(manager) {
    return this.perform_2.call$2(manager, this.entity_3);
  },
  $isFunction: true
},

World__check__closure0: {"": "Closure;perform_4,entity_5",
  call$1: function(system) {
    return this.perform_4.call$2(system, this.entity_5);
  },
  $isFunction: true
},

World_process_closure: {"": "Closure;",
  call$1: function(system) {
    if (system.get$passive() !== true)
      system.process$0();
  },
  $isFunction: true
},

World_processEntityChanges_closure: {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.added$1(entity);
  },
  $isFunction: true
},

World_processEntityChanges_closure0: {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.changed$1(entity);
  },
  $isFunction: true
},

World_processEntityChanges_closure1: {"": "Closure;",
  call$2: function(observer, entity) {
    return $.disabled$1$x(observer, entity);
  },
  $isFunction: true
},

World_processEntityChanges_closure2: {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.enabled$1(entity);
  },
  $isFunction: true
},

World_processEntityChanges_closure3: {"": "Closure;",
  call$2: function(observer, entity) {
    return observer.deleted$1(entity);
  },
  $isFunction: true
},

World_deleteAllEntities_closure: {"": "Closure;this_0",
  call$1: function(entity) {
    if (null != entity)
      this.this_0.deleteEntity$1(entity);
  },
  $isFunction: true
},

Aspect$: function() {
  return new $.Aspect(0, 0, 0);
},

Aspect_getAspectForAllOf: function(componentTypes) {
  var aspect = $.Aspect$();
  aspect.allOf$1(componentTypes);
  return aspect;
},

ComponentManager$: function() {
  return new $.ComponentManager($.Bag$(16, [$.Bag, $.Component]), $.Bag$(16, $.Entity), null);
},

ComponentMapper$: function(componentType, world, A) {
  var t1 = new $.ComponentMapper(null, null);
  $.setRuntimeTypeInfo(t1, [A]);
  t1.ComponentMapper$2(componentType, world, A);
  return t1;
},

ComponentType$: function() {
  var t1 = new $.ComponentType(0, 0);
  t1.ComponentType$0();
  return t1;
},

ComponentTypeManager_getTypeFor: function(componentType) {
  var t1, type;
  t1 = $.get$ComponentTypeManager__componentTypes();
  type = t1.$index(t1, componentType);
  if (type == null) {
    type = $.ComponentType$();
    t1 = $.get$ComponentTypeManager__componentTypes();
    t1.$indexSet(t1, componentType, type);
  }
  return type;
},

ComponentTypeManager_getBit: function(componentType) {
  return $.ComponentTypeManager_getTypeFor(componentType).get$bit();
},

Entity$_: function(_world, id) {
  var t1 = new $.Entity(id, 0, 0, 0, _world, null, null);
  t1.Entity$_$2(_world, id);
  return t1;
},

EntityManager$: function() {
  return new $.EntityManager($.Bag$(16, $.Entity), $.Bag$(16, $.Entity), $.Bag$(16, $.JSBool), 0, 0, 0, 0, $._IdentifierPool$(), null);
},

_IdentifierPool$: function() {
  return new $._IdentifierPool($.Bag$(16, $.JSInt), 0);
},

GroupManager$: function() {
  return new $.GroupManager($.Map_Map($.JSString, [$.Bag, $.Entity]), $.Map_Map($.Entity, [$.Bag, $.JSString]), null);
},

PlayerManager$: function() {
  var t1 = new $.PlayerManager(null, null, null);
  t1.PlayerManager$0();
  return t1;
},

_SystemBitManager__getBitFor: function(esType) {
  var t1, bit;
  if (null == $._SystemBitManager__systemBits)
    $._SystemBitManager__systemBits = $.Map_Map($.Type, $.JSInt);
  t1 = $._SystemBitManager__systemBits;
  bit = t1.$index(t1, esType);
  if (bit == null) {
    t1 = $._SystemBitManager__POS;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    bit = $.JSInt_methods.$shl(1, t1);
    $._SystemBitManager__POS = $.$add$ns($._SystemBitManager__POS, 1);
    t1 = $._SystemBitManager__systemBits;
    t1.$indexSet(t1, esType, bit);
  }
  return bit;
},

Bag$: function(capacity, E) {
  var t1 = new $.Bag($.List_List(capacity, null), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.Bag$1$capacity(capacity, E);
  return t1;
},

ObjectPool_get: function(type, createPoolable) {
  var obj = $.removeLast$0$ax($.ObjectPool__getPool(type));
  return null == obj ? createPoolable.call$0() : obj;
},

ObjectPool__getPool: function(type) {
  var t1, pooledObjects;
  t1 = $.get$ObjectPool__objectPools();
  pooledObjects = t1.$index(t1, type);
  if (null == pooledObjects) {
    pooledObjects = $.Bag$(16, null);
    t1 = $.get$ObjectPool__objectPools();
    t1.$indexSet(t1, type, pooledObjects);
  }
  return pooledObjects;
},

ObjectPool_add: function(poolable) {
  var t1 = $.get$ObjectPool__objectPools();
  $.add$1$ax(t1.$index(t1, poolable.get$runtimeType(poolable)), poolable);
},

Poolable_Poolable$of: function(type, createPoolable) {
  return $.ObjectPool_get(type, createPoolable);
},

ReadOnlyBag$_of: function(_bag, E) {
  var t1 = new $.ReadOnlyBag(_bag);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

World$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = $.EntityManager$();
  t2 = $.ComponentManager$();
  t3 = $.Bag$(16, $.Entity);
  t4 = $.Bag$(16, $.Entity);
  t5 = $.Bag$(16, $.Entity);
  t6 = $.Bag$(16, $.Entity);
  t7 = $.Bag$(16, $.Entity);
  t8 = $.Map_Map($.Type, $.EntitySystem);
  t9 = $.List_List(null, $.EntitySystem);
  $.setRuntimeTypeInfo(t9, [$.EntitySystem]);
  t9 = new $.World(t1, t2, t3, t4, t5, t6, t7, t8, t9, $.Map_Map($.Type, $.Manager), $.Bag$(16, $.Manager), 0, 0, 0);
  t9.World$0();
  return t9;
}}],
["demos", "demos.dart", , {
main_closure: {"": "Closure;",
  call$0: function() {
    $._setupRoutes();
  },
  $isFunction: true,
  $is_void_: true
},

_setupRoutes_closure: {"": "Closure;",
  call$1: function(e) {
    $._route($.get$hash$x($.Window_methods.get$location($.window())));
  },
  $isFunction: true
},

_route_closure: {"": "Closure;",
  call$1: function(x) {
    x.set$running(false);
    return false;
  },
  $isFunction: true
},

init_closure: {"": "Closure;initEntities_0",
  call$0: function() {
    var world, canvas;
    world = $.World$();
    canvas = $.query("canvas#demo");
    world.addManager$1($.PlayerManager$());
    world.addManager$1($.GroupManager$());
    world.addSystem$1($.System_Animator$());
    world.addSystem$1($.System_Emitters$());
    world.addSystem$1($.System_Simulator$(33.333333333333336, null, 1));
    world.addSystem$1($.System_Renderer$(canvas));
    world.initialize$0();
    world.deleteAllEntities$0();
    return this.initEntities_0.call$1(world);
  },
  $isFunction: true,
  $is_void_: true
},

Ctrl: {"": "Object;running?"},

start_closure: {"": "Closure;_statsLoopTxt_1,_statsLoopChart_2,values_3",
  call$2: function(stats, now) {
    var t1, fps, t2, t3, t4, t5;
    t1 = $.getInterceptor$n(now);
    if ($.$gt$n(t1.$sub(now, stats.get$displayLast()), 1000)) {
      stats.set$displayLast(now);
      fps = 1000 / stats.get$avg();
      t2 = this._statsLoopTxt_1;
      if (t2 != null) {
        t3 = $.getInterceptor$x(stats);
        t2.textContent = "avg : " + $.S(stats.get$avg()) + "\nmax : " + $.S(t3.get$max(stats)) + "\nmin : " + $.S(t3.get$min(stats)) + "\nfps : " + $.S(fps) + "\n";
      }
      t2 = this._statsLoopChart_2;
      if (t2 != null) {
        t3 = this.values_3;
        t4 = stats.get$avg();
        t5 = t3.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3[0] = t4;
        if (1 >= t5)
          throw $.ioore(1);
        t3[1] = fps;
        t2.push$1(t3);
      }
      if ($.$gt$n(t1.$sub(now, stats.get$resetLast()), 3000))
        $.reset$0$x(stats);
    }
  },
  $isFunction: true
},

start_loop: {"": "Closure;box_0,world_4,ctrl_5,statsL_6",
  call$1: function(highResTime) {
    return $.handleError(new $.start_loop_closure(this.box_0, this.world_4, this.ctrl_5, this.statsL_6, this, highResTime));
  },
  $isFunction: true
},

start_loop_closure: {"": "Closure;box_0,world_7,ctrl_8,statsL_9,loop_10,highResTime_11",
  call$0: function() {
    var e, s, t1, t2, t3, t4, t5, exception;
    if (this.ctrl_8.running)
      $.Window_methods.requestAnimationFrame$1($.window(), this.loop_10);
    t1 = this.statsL_9;
    t2 = $.getInterceptor$x(t1);
    t2.start$0(t1);
    try {
      t3 = this.world_7;
      t4 = this.box_0;
      t5 = t4.lastT_0;
      t3.set$delta($.$gt$n(t5, 0) ? $.$sub$n(this.highResTime_11, t5) : 0);
      t3.process$0();
      t4.lastT_0 = this.highResTime_11;
    } catch (exception) {
      t3 = $.unwrapException(exception);
      e = t3;
      s = $.getTraceFromException(exception);
      $.print(e);
      $.print(s);
    }

    t2.stop$0(t1);
  },
  $isFunction: true,
  $is_void_: true
},

closure4: {"": "Closure;",
  call$1: function(hsl) {
    return $.irgba_rgbaString($.hsl_irgba(hsl));
  },
  $isFunction: true
},

closure3: {"": "Closure;",
  call$1: function(hsv) {
    return $.irgba_rgbaString($.hsv_irgba(hsv));
  },
  $isFunction: true
},

closure: {"": "Closure;",
  call$1: function(world) {
    var t1, t2, t3, t4;
    t1 = $.Transform_Transform$w2d(50, 50, 0);
    t2 = $.Drawable$($.rect(10, 20, $.$index$asx($.get$foregroundcolorsM(), 1), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0)));
    t3 = $.Animatable_Animatable();
    t4 = $.Animation$();
    t4.onTick = new $._closure12();
    $.add$1$ax(t3, t4);
    $.addNewEntity(world, [t1, t2, t3], null, null);
    return $.Future_Future$value(world, null);
  },
  $isFunction: true
},

_closure12: {"": "Closure;",
  call$3: function(e, t, t00) {
    var tf = e.getComponent$1($.get$Transform_CT());
    $.set$x$x(tf.get$position3d(), $.periodicRatio($.linear$closure, 10000).call$3(t, 1000, 100));
    $.set$y$x(tf.get$position3d(), $.periodicRatio($.goback($.inElastic$closure), 2000).call$3(t, 100, 100));
    return true;
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

closure0: {"": "Closure;",
  call$1: function(world) {
    var t1, t2, t3, t4;
    t1 = world.getSystem$1($.Type_bAc);
    t2 = t1.get$globalAccs();
    t2.set$y(t2, 0);
    t1.set$steps(1);
    t1.set$collSpace($.Space_XY0$($.Checker_T1$(), $.Resolver_Noop$()));
    t1 = $.Transform_Transform$w2d(50, 50, 0);
    t2 = $.Emitter$();
    t2.genParticles = new $._closure4();
    t2.counter = $.steady(100);
    t3 = t2.initializers;
    t3.push($.particlesStartPosition($.line($.Vector3$(0, 0, 0), $.Vector3$(800, 100, 0), $.periodicRatio($.random$closure, 3000)), true));
    t3.push($.addComponents([new $._closure5(), new $._closure6()]));
    $.addNewEntity(world, [t1, t2], null, null);
    t2 = $.Transform_Transform$w2d(600, 50, 0);
    t1 = $.Emitter$();
    t1.genParticles = new $._closure7();
    t1.counter = $.steady(100);
    t3 = t1.initializers;
    t3.push($.particlesStartPosition($.constant($.Vector3$zero()), true));
    t3.push($.particlesStartPositionPrevious($.line($.Vector3$zero(), $.Vector3$(5, 0, 0), $.periodicRatio($.random$closure, 3000)), true));
    t3.push($.addComponents([new $._closure8(), new $._closure9(), new $._closure10()]));
    t3 = $.Animatable_Animatable();
    t4 = $.Animation$();
    t4.onTick = new $._closure11();
    $.add$1$ax(t3, t4);
    $.addNewEntity(world, [t2, t1, t3], null, null);
    return $.Future_Future$value(world, null);
  },
  $isFunction: true
},

_closure4: {"": "Closure;",
  call$1: function(nb) {
    return $.Particles$(nb, null, 0, 255, 0, false, 1, 1, false, false, false, false, false, true, false);
  },
  $isFunction: true
},

_closure5: {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particles(3, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 1)));
  },
  $isFunction: true,
  $is_void_: true
},

_closure6: {"": "Closure;",
  call$0: function() {
    var t1, t2;
    t1 = $.Animatable_Animatable();
    t2 = $.Animation$();
    t2.onTick = new $.__closure4().call$0();
    t2.onEnd = new $.__closure5();
    $.add$1$ax(t1, t2);
    return t1;
  },
  $isFunction: true,
  $is_void_: true
},

__closure4: {"": "Closure;",
  call$0: function() {
    var t1 = {};
    t1.ys0_0 = [];
    return new $.___closure(t1);
  },
  $isFunction: true,
  $is_void_: true
},

___closure: {"": "Closure;box_0",
  call$3: function(e, t, t00) {
    var ps, t1, ratio, i, t2, t3, t4, t5;
    ps = e.getComponent$1($.get$Particles_CT());
    t1 = $.getInterceptor$n(t);
    ratio = $.$div$n(t1.$sub(t, t00), 10000);
    if (typeof ratio !== "number")
      return this.call$3$bailout(1, t1, t, t00, ps, ratio);
    if (t1.$eq(t, t00)) {
      t1 = this.box_0;
      t1.ys0_0 = $.List_List($.get$length$asx(ps.get$position3d()), null);
      i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
      if (typeof i !== "number")
        return this.call$3$bailout(2, t1, 0, 0, ps, ratio, i);
      for (; i > -1; --i)
        $.$indexSet$ax(t1.ys0_0, i, $.get$y$x($.$index$asx(ps.get$position3d(), i)));
    }
    i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
    if (typeof i !== "number")
      return this.call$3$bailout(3, 0, 0, 0, ps, ratio, i);
    t1 = this.box_0;
    t2 = 1 - ratio;
    for (; i > -1; --i) {
      t3 = $.$index$asx(ps.get$position3d(), i);
      t4 = $.$index$asx(t1.ys0_0, i);
      t5 = $.outBounce(t2, 1, 0);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      $.set$y$x(t3, (1 - t5) * 200 + t4);
    }
    return ratio < 1;
  },
  call$3$bailout: function(state0, t1, t, t00, ps, ratio, i) {
    switch (state0) {
      case 0:
        ps = e.getComponent$1($.get$Particles_CT());
        t1 = $.getInterceptor$n(t);
        ratio = $.$div$n(t1.$sub(t, t00), 10000);
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && t1.$eq(t, t00))
          switch (state0) {
            case 0:
              t1 = this.box_0;
              t1.ys0_0 = $.List_List($.get$length$asx(ps.get$position3d()), null);
              i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
            case 2:
              state0 = 0;
              for (; t2 = $.getInterceptor$n(i), t2.$gt(i, -1); i = t2.$sub(i, 1))
                $.$indexSet$ax(t1.ys0_0, i, $.get$y$x($.$index$asx(ps.get$position3d(), i)));
          }
        i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
      case 3:
        var t2, t3, t4, t5;
        state0 = 0;
        t1 = this.box_0;
        for (; t2 = $.getInterceptor$n(i), t2.$gt(i, -1); i = t2.$sub(i, 1)) {
          t3 = $.$index$asx(ps.get$position3d(), i);
          t4 = $.$index$asx(t1.ys0_0, i);
          if (typeof ratio !== "number")
            throw $.iae(ratio);
          t5 = $.outBounce(1 - ratio, 1, 0);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          $.set$y$x(t3, (1 - t5) * 200 + t4);
        }
        if (typeof ratio !== "number")
          throw ratio.$lt();
        return ratio < 1;
    }
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

__closure5: {"": "Closure;",
  call$3: function(e, t, t00) {
    e.deleteFromWorld$0();
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

_closure7: {"": "Closure;",
  call$1: function(nb) {
    return $.Particles$(nb, null, 1, 4278190335, 0.98, true, 1, 4, false, true, true, false, false, true, false);
  },
  $isFunction: true
},

_closure8: {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particles(1, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1)));
  },
  $isFunction: true,
  $is_void_: true
},

_closure9: {"": "Closure;",
  call$0: function() {
    return $.Constraints$();
  },
  $isFunction: true,
  $is_void_: true
},

_closure10: {"": "Closure;",
  call$0: function() {
    var t1, t2, t3;
    t1 = $.Animatable_Animatable();
    t2 = $.Animation$();
    t2.onTick = new $.__closure1();
    t2.onEnd = new $.__closure2();
    t3 = $.getInterceptor$ax(t1);
    t3.add$1(t1, t2);
    t2 = $.Animation$();
    t2.onTick = new $.__closure3();
    t3.add$1(t1, t2);
    return t1;
  },
  $isFunction: true,
  $is_void_: true
},

__closure1: {"": "Closure;",
  call$3: function(e, t, t00) {
    return $.$lt$n($.$sub$n(t, t00), 5000);
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

__closure2: {"": "Closure;",
  call$3: function(e, t, t00) {
    return e.deleteFromWorld$0();
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

__closure3: {"": "Closure;",
  call$3: function(e, t, t00) {
    var t1, opacity, ps, t2, i, t3, t4;
    t1 = $.getInterceptor$n(t);
    opacity = $.toInt$0$n($.onceRatio($.linear$closure, 5000).call$3(t1.$sub(t, t00), -255, 255));
    ps = e.getComponent$1($.get$Particles_CT());
    t2 = $.getInterceptor$asx(ps);
    i = 0;
    while (true) {
      t3 = t2.get$length(ps);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      t3 = ps.get$color();
      t4 = t3.$index(t3, i);
      if (typeof t4 !== "number")
        throw t4.$and();
      if (typeof opacity !== "number")
        throw $.iae(opacity);
      t3.$indexSet(t3, i, (t4 & 4294967040 | opacity) >>> 0);
      ++i;
    }
    return $.$lt$n(t1.$sub(t, t00), 5001);
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

_closure11: {"": "Closure;",
  call$3: function(e, t, t00) {
    var t1 = e.getComponent$1($.get$Transform_CT()).get$rotation3d();
    t1.set$z(t1, $.periodicRatio($.linear$closure, 3000).call$3($.$sub$n(t, t00), 6.283185307179586, 0));
    return true;
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

closure1: {"": "Closure;",
  call$1: function(world) {
    var t1, t2, defaultDraw, genP, segment, ground;
    t1 = world.getSystem$1($.Type_bAc);
    t2 = t1.get$globalAccs();
    t2.set$y(t2, 10);
    t1.set$steps(3);
    t1.set$collSpace($.Space_XY0$($.Checker_T1$(), $.Resolver_Backward$()));
    defaultDraw = $.drawComponentType([$.DrawComponentType$($.get$Particles_CT(), $.particles(5, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1))), $.DrawComponentType$($.get$Constraints_CT(), $.drawConstraints("rgba(255,255,0,0.2)", "#d8dde2", "#e20000", "rgba(0,153,255,0.1)"))]);
    genP = new $._closure3();
    t1 = $.JSArray_methods.toList$0($.makeLineSegments([$.Vector3$(20, 10, 0), $.Vector3$(40, 10, 0), $.Vector3$(60, 10, 0), $.Vector3$(80, 10, 0), $.Vector3$(100, 10, 0)], 0.02, false, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    segment = $.addNewEntity(world, t1, null, null);
    $.pinParticle(segment, 0);
    $.pinParticle(segment, 4);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.Vector3$(200, 50, 0), 50, 30, 0.3, 0.9, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.Vector3$(400, 50, 0), 70, 7, 0.1, 0.2, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.Vector3$(600, 50, 0), 70, 3, 1, 1, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeCloth($.Vector3$(800, 50, 0), $.Vector3$(300, 0, 0), $.Vector3$(0, 200, 0), 15, 14, 0.5, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.addNewEntity(world, t1, null, null);
    t1 = $.JSArray_methods.toList$0($.makeTireXY($.Vector3$(600, 300, 0), 70, 4, 1, 1, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeParallelogram($.Vector3$(400, 300, 0), $.Vector3$(70, 0, 0), $.Vector3$(0, 70, 0), 1, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeParallelogram($.Vector3$(200, 300, 0), $.Vector3$(70, 10, 0), $.Vector3$(10, 30, 0), 1, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    $.setCollideOfSegment($.addNewEntity(world, t1, null, null), 1);
    t1 = $.JSArray_methods.toList$0($.makeParallelogram($.Vector3$(10, 380, 0), $.Vector3$(1100, 0, 0), $.Vector3$(0, 10, 0), 1, genP));
    $.JSArray_methods.add$1(t1, $.Drawable$(defaultDraw));
    ground = $.addNewEntity(world, t1, null, null);
    $.pinParticle(ground, 0);
    $.pinParticle(ground, 1);
    $.pinParticle(ground, 2);
    $.pinParticle(ground, 3);
    $.setCollideOfSegment(ground, 1);
    return $.Future_Future$value(world, null);
  },
  $isFunction: true
},

_closure3: {"": "Closure;",
  call$1: function(nb) {
    return $.Particles$(nb, null, 1, 10486015, 0.99, false, 1, 1, false, true, false, false, false, true, false);
  },
  $isFunction: true
},

closure2: {"": "Closure;",
  call$1: function(world) {
    var canvas, t1, w, h, grid, t2, t3, t4, t5;
    canvas = $.query("canvas#demo");
    t1 = $.getInterceptor$x(canvas);
    w = t1.get$width(canvas);
    h = t1.get$height(canvas);
    grid = $.QuadTreeXYAabb$(-10, -10, $.$add$ns(w, 20), $.$add$ns(h, 20), 10, 4);
    t1 = world.getSystem$1($.Type_bAc);
    t2 = t1.get$globalAccs();
    t2.set$y(t2, 0);
    t1.set$steps(3);
    t1.set$collSpace($.Space_QuadtreeXY$($.Checker_T1$(), $.Resolver_Noop$(), grid));
    $.addNewEntity(world, [$.Drawable$(grid.newDrawCanvas$2($.$index$asx($.get$foregroundcolorsM(), 2), $.irgba_rgbaString(15728895)))], null, null);
    t1 = $.Transform_Transform$w2d(50, 50, 0);
    t2 = $.Emitter$();
    t2.genParticles = new $._closure();
    t2.counter = $.singleWave(500);
    t3 = t2.initializers;
    if (typeof w !== "number")
      throw w.$div();
    t4 = w / 2;
    if (typeof h !== "number")
      throw h.$div();
    t5 = h / 2;
    t3.push($.particlesStartPosition($.box($.Vector3$(t4, t5, 0), $.Vector3$(t4 - 10, t5 - 10, 0)), true));
    t3.push($.particlesStartPositionPrevious($.box($.Vector3$zero(), $.Vector3$(3, 3, 0)), false));
    t3.push($.addComponents([new $._closure0(), new $._closure1(), new $._closure2(w, h, 10, 10)]));
    $.addNewEntity(world, [t1, t2], null, null);
    return $.Future_Future$value(world, null);
  },
  $isFunction: true
},

_closure: {"": "Closure;",
  call$1: function(nb) {
    return $.Particles$(nb, null, 1, 4278190335, 1, true, 1, 3, false, true, true, false, false, true, true);
  },
  $isFunction: true
},

_closure0: {"": "Closure;",
  call$0: function() {
    return $.Drawable$($.particles(1, $.$index$asx($.get$foregroundcolors(), 0), 0, 1, $.$index$asx($.get$foregroundcolors(), 1)));
  },
  $isFunction: true,
  $is_void_: true
},

_closure1: {"": "Closure;",
  call$0: function() {
    return $.Constraints$();
  },
  $isFunction: true,
  $is_void_: true
},

_closure2: {"": "Closure;w_1,h_2,wm_3,hm_4",
  call$0: function() {
    var t1, t2;
    t1 = $.Animatable_Animatable();
    t2 = $.Animation$();
    t2.onTick = new $.__closure(this.w_1, this.h_2, this.wm_3, this.hm_4);
    t2.onEnd = new $.__closure0();
    $.add$1$ax(t1, t2);
    return t1;
  },
  $isFunction: true,
  $is_void_: true
},

__closure: {"": "Closure;w_5,h_6,wm_7,hm_8",
  call$3: function(e, t, t00) {
    var ps, i, t1, t2, t3, t4, t5, cont;
    ps = e.getComponent$1($.get$Particles_CT());
    i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
    if (typeof i !== "number")
      return this.call$3$bailout(1, i, ps);
    t1 = this.w_5;
    t2 = this.wm_7;
    t3 = this.h_6;
    t4 = this.hm_8;
    for (; i > -1; --i) {
      if ($.$gt$n($.get$y$x($.$index$asx(ps.get$position3d(), i)), t4)) {
        t5 = $.get$y$x($.$index$asx(ps.get$position3d(), i));
        if (typeof t3 !== "number")
          throw t3.$sub();
        cont = $.$lt$n(t5, t3 - t4);
      } else
        cont = false;
      if (cont && $.$gt$n($.get$x$x($.$index$asx(ps.get$position3d(), i)), t2)) {
        t5 = $.get$x$x($.$index$asx(ps.get$position3d(), i));
        if (typeof t1 !== "number")
          throw t1.$sub();
        cont = $.$lt$n(t5, t1 - t2);
      } else
        cont = false;
      if (!cont)
        $.$index$asx(ps.get$position3d(), i).setFrom$1($.$index$asx(ps.get$position3dPrevious(), i));
    }
    return true;
  },
  call$3$bailout: function(state0, i, ps) {
    switch (state0) {
      case 0:
        ps = e.getComponent$1($.get$Particles_CT());
        i = $.$sub$n($.get$length$asx(ps.get$position3d()), 1);
      case 1:
        var t1, t2, t3, t4, t5, t6, cont;
        state0 = 0;
        t1 = this.w_5;
        t2 = this.wm_7;
        t3 = this.h_6;
        t4 = this.hm_8;
        for (; t5 = $.getInterceptor$n(i), t5.$gt(i, -1); i = t5.$sub(i, 1)) {
          if ($.$gt$n($.get$y$x($.$index$asx(ps.get$position3d(), i)), t4)) {
            t6 = $.get$y$x($.$index$asx(ps.get$position3d(), i));
            if (typeof t3 !== "number")
              throw t3.$sub();
            cont = $.$lt$n(t6, t3 - t4);
          } else
            cont = false;
          if (cont && $.$gt$n($.get$x$x($.$index$asx(ps.get$position3d(), i)), t2)) {
            t6 = $.get$x$x($.$index$asx(ps.get$position3d(), i));
            if (typeof t1 !== "number")
              throw t1.$sub();
            cont = $.$lt$n(t6, t1 - t2);
          } else
            cont = false;
          if (!cont)
            $.$index$asx(ps.get$position3d(), i).setFrom$1($.$index$asx(ps.get$position3dPrevious(), i));
        }
        return true;
    }
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

__closure0: {"": "Closure;",
  call$3: function(e, t, t00) {
    e.deleteFromWorld$0();
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

init_autogenerated_closure: {"": "Closure;",
  call$0: function() {
    return $.get$initDemo().get$keys();
  },
  $isFunction: true,
  $is_void_: true
},

init_autogenerated_closure0: {"": "Closure;__html0_1",
  call$3: function($$list, $$index, __t) {
    var t1, k, __e2, __binding0;
    t1 = {};
    k = $.$index$asx($$list, $$index);
    t1.__e1_0 = null;
    __e2 = $.clone$1$x(this.__html0_1, true);
    t1.__e1_0 = $.$index$asx($.get$nodes$x(__e2), 0);
    __binding0 = __t.contentBind$2(new $.init_autogenerated__closure(k), false);
    $.add$1$ax($.get$nodes$x(t1.__e1_0), __binding0);
    __t.oneWayBind$4(new $.init_autogenerated__closure0(k), new $.init_autogenerated__closure1(t1), false, true);
    __t.bindClass$3(__e2, new $.init_autogenerated__closure2(k), false);
    $.addAll$1$ax(__t, [$.Text_Text("\n            "), __e2, $.Text_Text("\n          ")]);
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

init_autogenerated__closure: {"": "Closure;k_2",
  call$0: function() {
    return this.k_2;
  },
  $isFunction: true,
  $is_void_: true
},

init_autogenerated__closure0: {"": "Closure;k_3",
  call$0: function() {
    return "#/" + $.S(this.k_3);
  },
  $isFunction: true,
  $is_void_: true
},

init_autogenerated__closure1: {"": "Closure;box_0",
  call$1: function(e) {
    var t1 = this.box_0;
    if (!$.$eq($.get$href$x(t1.__e1_0), e))
      $.set$href$x(t1.__e1_0, e);
  },
  $isFunction: true
},

init_autogenerated__closure2: {"": "Closure;k_4",
  call$0: function() {
    var t1, t2;
    t1 = $.activeDemo();
    t2 = this.k_4;
    return (t1 == null ? t2 == null : t1 === t2) ? "active" : "";
  },
  $isFunction: true,
  $is_void_: true
},

demo_proto2d: function(world) {
  $.addNewEntity(world, [$.Transform_Transform$w2d(50, 50, 0), $.Drawable$($.rect(10, 10, $.$index$asx($.get$foregroundcolorsM(), 3), 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0)))], null, null);
  $.addNewEntity(world, [$.Transform_Transform$w2d(0, 20, 0), $.Drawable$($.text("Hello World, choose an other demo in the list", null, "16px sans-serif", 0, 1, $.$index$asx($.get$foregroundcolorsM(), 0), null))], null, null);
  return $.Future_Future$value(world, null);
},

main: function() {
  $.Timer_Timer($.Duration_0, new $.main_closure());
},

_setupRoutes: function() {
  $.EventStreamProvider_hashchange.forTarget$1($.window()).listen$1(new $._setupRoutes_closure());
  $._route($.get$hash$x($.Window_methods.get$location($.window())));
},

activeDemo: function() {
  if ($.observeReads())
    $.notifyRead($.get$__changes(), 1, "activeDemo");
  return $.__$activeDemo;
},

activeDemo0: function(value) {
  if ($.hasObservers($.get$__changes()))
    $.notifyChange($.get$__changes(), 1, "activeDemo", $.__$activeDemo, value);
  $.__$activeDemo = value;
},

_route: function(hash) {
  var k, t1, t2, initEntities;
  k = hash != null && $.$lt$n($.get$length$asx(hash), 2) ? null : $.substring$1$s(hash, 2);
  if (k == null) {
    t1 = $.Window_methods.get$location($.window());
    t2 = $.get$initDemo().get$keys();
    $.set$hash$x(t1, "/" + $.S(t2.get$first(t2)));
    return;
  }
  t1 = $.get$initDemo();
  initEntities = t1.$index(t1, k);
  if (initEntities == null) {
    t1 = $.Window_methods.get$location($.window());
    t2 = $.get$initDemo().get$keys();
    $.set$hash$x(t1, "/" + $.S(t2.get$first(t2)));
    return;
  }
  $.activeDemo0(k);
  $.get$activeCtrl().then$1(new $._route_closure());
  $.activeCtrl = $.init(initEntities).then$1($.start$closure);
},

init: function(initEntities) {
  return $.handleError(new $.init_closure(initEntities));
},

Ctrl$: function() {
  return new $.Ctrl(true);
},

start: function(world) {
  var t1, ctrl, _statsLoopTxt, _statsLoopChart, values, statsL;
  t1 = {};
  t1.lastT_0 = -1;
  ctrl = $.Ctrl$();
  _statsLoopTxt = $.interceptedTypeCast($.query("#statsLoop"), "$isPreElement");
  _statsLoopChart = $.get$xtag$x($.query("#statsLoop_xtchart"));
  values = $.List_List(2, $.JSDouble);
  $.setRuntimeTypeInfo(values, [$.JSDouble]);
  statsL = $.StartStopStats$();
  statsL.displayFct = new $.start_closure(_statsLoopTxt, _statsLoopChart, values);
  $.Window_methods.requestAnimationFrame$1($.window(), new $.start_loop(t1, world, ctrl, statsL));
  return ctrl;
},

handleError: function(f) {
  var e, s, t1, exception;
  try {
    t1 = f.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    $.print(e);
    $.print(s);
    throw $.wrapException(e);
  }

},

init_autogenerated: function() {
  var __root, __html0, __t, t1, t2, __e4;
  __root = $.document().body;
  __html0 = $.Element_Element$html("<li class=\"\"><a></a></li>");
  __t = $.Template$(__root);
  t1 = $.getInterceptor$x(__root);
  t2 = t1.get$nodes(__root);
  __t.loop$3(__t, $.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x(t2.$index(t2, 1)), 5)), 1)), 1), new $.init_autogenerated_closure(), new $.init_autogenerated_closure0(__html0));
  t1 = t1.get$nodes(__root);
  __e4 = $.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x(t1.$index(t1, 1)), 7)), 3);
  t1 = $.XTchart$();
  t1.set$host(t1, __e4);
  __t.component$1(t1);
  __t.create$0();
  __t.insert$0(__t);
}}],
["ease", "package:dartemis_toolbox/ease.dart", , {
reverse_closure: {"": "Closure;f0_0",
  call$3: function(ratio, change, baseValue) {
    return this.f0_0.call$3(ratio, $.$negate$n(change), $.$add$ns(baseValue, change));
  },
  $isFunction: true
},

goback_closure: {"": "Closure;f0_0",
  call$3: function(ratio, change, baseValue) {
    var t1, t2;
    ratio = $.$mul$n(ratio, 2);
    t1 = $.getInterceptor$n(ratio);
    t2 = this.f0_0;
    return t1.$lt(ratio, 1) ? t2.call$3(ratio, change, baseValue) : $.reverse(t2).call$3(t1.$sub(ratio, 1), change, baseValue);
  },
  $isFunction: true
},

periodicRatio_closure: {"": "Closure;f0_0,duration_1",
  call$3: function(ratio, change, baseValue) {
    var t1;
    ratio = $.$div$n(ratio, this.duration_1);
    t1 = $.getInterceptor$n(ratio);
    return this.f0_0.call$3(t1.$sub(ratio, t1.toInt$0(ratio)), change, baseValue);
  },
  $isFunction: true
},

onceRatio_closure: {"": "Closure;f0_0,duration_1",
  call$3: function(ratio, change, baseValue) {
    var t1, t2;
    t1 = this.duration_1;
    t2 = $.getInterceptor$n(ratio);
    ratio = t2.$lt(ratio, t1) ? t2.$div(ratio, t1) : 1;
    return this.f0_0.call$3(ratio, change, baseValue);
  },
  $isFunction: true
},

reverse: function(f0) {
  return new $.reverse_closure(f0);
},

goback: function(f0) {
  return new $.goback_closure(f0);
},

periodicRatio: function(f0, duration) {
  return new $.periodicRatio_closure(f0, duration);
},

onceRatio: function(f0, duration) {
  return new $.onceRatio_closure(f0, duration);
},

linear: function(ratio, change, baseValue) {
  return $.$add$ns($.$mul$n(change, ratio), baseValue);
},

random: function(ratio, change, baseValue) {
  var t1 = $.getInterceptor$n(ratio);
  return $.$add$ns($.$mul$n(change, t1.$gt(ratio, 0) && t1.$lt(ratio, 1) ? $.get$_randomRatio().nextDouble$0() : ratio), baseValue);
},

inElastic: function(ratio, change, baseValue) {
  var t1, r;
  t1 = $.getInterceptor(ratio);
  if (!(t1.$eq(ratio, 0) || t1.$eq(ratio, 1))) {
    ratio = t1.$sub(ratio, 1);
    if (typeof ratio !== "number")
      throw $.iae(ratio);
    r = -$.pow(2, 10 * ratio) * $.sin((ratio - 0.075) * 6.283185307179586 / 0.3);
  } else
    r = ratio;
  return $.$add$ns($.$mul$n(r, change), baseValue);
},

outBounce: function(ratio, change, baseValue) {
  if (ratio < 0.36363636363636365)
    ratio = 7.5625 * ratio * ratio;
  else if (ratio < 0.7272727272727273) {
    ratio -= 0.5454545454545454;
    ratio = 7.5625 * ratio * ratio + 0.75;
  } else if (ratio < 0.9090909090909091) {
    ratio -= 0.8181818181818182;
    ratio = 7.5625 * ratio * ratio + 0.9375;
  } else {
    ratio -= 0.9545454545454546;
    ratio = 7.5625 * ratio * ratio + 0.984375;
  }
  return ratio * change + baseValue;
}}],
["html_common", "dart:html_common", , {
_TypedImageData: {"": "Object;data,height,width", $is_TypedImageData: true, $isImageData: true, $asImageData: null},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return $.LinkedHashSetIterator$(t1, t1._modifications, null);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.map$1(t1, f);
  },
  where$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.where$1(t1, f);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isNotEmpty(t1);
  },
  get$length: function(_) {
    return this.readClasses$0()._liblib0$_length;
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  add$1: function(_, value) {
    this.modify$1(new $.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(_, iterable) {
    this.modify$1(new $.CssClassSetImpl_addAll_closure(iterable));
  },
  removeAll$1: function(_, iterable) {
    this.modify$1(new $.CssClassSetImpl_removeAll_closure(iterable));
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  clear$0: function(_) {
    this.modify$1(new $.CssClassSetImpl_clear_closure());
  },
  modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  $isIterable: true,
  $asIterable: function () { return [$.JSString]; }
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true
},

CssClassSetImpl_addAll_closure: {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.addAll$1$ax(s, this.iterable_0);
  },
  $isFunction: true
},

CssClassSetImpl_removeAll_closure: {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.removeAll$1$x(s, this.iterable_0);
  },
  $isFunction: true
},

CssClassSetImpl_clear_closure: {"": "Closure;",
  call$1: function(s) {
    return $.clear$0$ax(s);
  },
  $isFunction: true
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, needle) {
    if (typeof needle !== "object" || needle === null || !$.getInterceptor(needle).$isElement)
      return false;
    return $.$eq($.get$parentNode$x(needle), this._node);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (typeof element !== "object" || element === null || !$.getInterceptor(element).$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return $.ListIterator$(t1, $.getRuntimeTypeArgument(t1, "JSArray", 0));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
},

_TypedImageData$: function(data, height, width) {
  return new $._TypedImageData(data, height, width);
},

convertNativeToDart_ImageData: function(nativeImageData) {
  if (typeof nativeImageData === "object" && nativeImageData !== null && !!$.getInterceptor(nativeImageData).$isImageData)
    return nativeImageData;
  return $._TypedImageData$(nativeImageData.data, nativeImageData.height, nativeImageData.width);
},

convertDartToNative_ImageData: function(imageData) {
  if (!!$.getInterceptor(imageData).$is_TypedImageData)
    return {data: imageData.data, height: imageData.height, width: imageData.width};
  return imageData;
},

Device_userAgent: function() {
  return $.window().navigator.userAgent;
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
},

Device_isIE: function() {
  if ($.Device__isIE == null)
    $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0);
  return $.Device__isIE;
},

FilteredElementList$: function(node, T) {
  var t1 = new $.FilteredElementList(node, $.get$nodes$x(node));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

JenkinsSmiHash_combine: function(hash, value) {
  if (typeof value !== "number")
    throw $.iae(value);
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ $.JSInt_methods.$shr(hash, 6)) >>> 0;
},

JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ $.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

JenkinsSmiHash_hash2: function(a, b) {
  return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, a), b));
},

JenkinsSmiHash_hash4: function(a, b, c, d) {
  return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, a), b), c), d));
}}],
["linked_list", "package:web_ui/src/linked_list.dart", , {
LinkedListNode: {"": "Object;_liblib1$_previous?,_liblib1$_next?,_list<,_liblib1$_value",
  get$next: function() {
    return this._liblib1$_next;
  },
  get$value: function(_) {
    return this._liblib1$_value;
  },
  set$value: function(_, e) {
    this._liblib1$_value = e;
    return e;
  },
  _link$2: function(p, n) {
    this._liblib1$_next = n;
    this._liblib1$_previous = p;
    if (p != null)
      p.set$_liblib1$_next(this);
    if (n != null)
      n.set$_liblib1$_previous(this);
    return this;
  },
  remove$0: function(_) {
    var t1, t2;
    t1 = this._list;
    if (t1 == null)
      return;
    t1.set$_liblib1$_length(t1.get$_liblib1$_length() - 1);
    t1 = this._liblib1$_previous;
    t2 = this._liblib1$_next;
    if (t1 != null)
      t1.set$_liblib1$_next(t2);
    else
      this._list.set$_head(t2);
    t1 = this._liblib1$_next;
    t2 = this._liblib1$_previous;
    if (t1 != null)
      t1.set$_liblib1$_previous(t2);
    else
      this._list.set$_tail(t2);
    this._liblib1$_next = null;
    this._liblib1$_previous = null;
    this._list = null;
  },
  get$remove: function(_liblib2$_receiver) {
    return new $.Bound_remove_LinkedListNode(this, "remove$0", _liblib2$_receiver);
  },
  LinkedListNode$_$2: function(value, _list, E) {
    var t1 = this._list;
    if (t1 != null)
      t1.set$_liblib1$_length(t1.get$_liblib1$_length() + 1);
  },
  $isLinkedListNode: true
},

LinkedList: {"": "IterableBase;_head?,_tail?,_liblib1$_length@",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$head: function(_) {
    return this._head;
  },
  add$1: function(_, e) {
    var node, t1;
    node = $.LinkedListNode$_(e, this, $.getRuntimeTypeArgument(this, "LinkedList", 0));
    t1 = this._tail;
    if (t1 == null) {
      this._tail = node;
      this._head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._tail = t1;
    return t1;
  },
  get$add: function(_liblib2$_receiver) {
    return new $.BoundClosure$i1(this, "add$1", _liblib2$_receiver);
  },
  addAll$1: function(_, e) {
    return $.forEach$1$ax(e, this.get$add(this));
  },
  get$iterator: function(_) {
    var $arguments, t1;
    $arguments = $.getRuntimeTypeArguments(this, "LinkedList");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    return $.LinkedListIterator$(this, t1);
  },
  $asIterableBase: null,
  $asIterable: null
},

LinkedListIterator: {"": "Object;_copy,_list<,_liblib1$_current,_pos",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      if (t1 !== (t1 | 0))
        return this.moveNext$0$bailout(1, t1);
      t2 = this._copy;
      t3 = t2.length;
      if (t1 < t3) {
        if (t1 < 0)
          throw $.ioore(t1);
        t1 = !$.$eq(t2[t1].get$_list(), this._list);
      } else
        t1 = false;
    } while (t1);
    t1 = this._pos;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(2, t1);
    t2 = this._copy;
    t3 = t2.length;
    if (t1 < t3) {
      if (t1 < 0)
        throw $.ioore(t1);
      this._liblib1$_current = $.get$value$x(t2[t1]);
      return true;
    } else {
      this._liblib1$_current = null;
      return false;
    }
  },
  moveNext$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                this._pos = this._pos + 1;
                t1 = this._pos;
              case 1:
                state0 = 0;
                t2 = this._copy;
                t3 = t2.length;
                if (t1 < t3) {
                  if (t1 >>> 0 !== t1 || t1 >= t3)
                    throw $.ioore(t1);
                  t1 = !$.$eq(t2[t1].get$_list(), this._list);
                } else
                  t1 = false;
                if (!t1)
                  break L0;
            }
        t1 = this._pos;
      case 2:
        var t2, t3;
        state0 = 0;
        t2 = this._copy;
        t3 = t2.length;
        if (t1 < t3) {
          if (t1 >>> 0 !== t1 || t1 >= t3)
            throw $.ioore(t1);
          this._liblib1$_current = $.get$value$x(t2[t1]);
          return true;
        } else {
          this._liblib1$_current = null;
          return false;
        }
    }
  },
  LinkedListIterator$1: function(_list, E) {
    var t1, node, i, i0;
    t1 = this._list;
    t1 = $.List_List(t1.get$length(t1), $.LinkedListNode);
    $.setRuntimeTypeInfo(t1, [$.LinkedListNode]);
    this._copy = t1;
    t1 = this._list;
    node = t1.get$head(t1);
    for (i = 0; node != null; i = i0) {
      t1 = this._copy;
      i0 = i + 1;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = node;
      node = node.get$next();
    }
  }
},

LinkedListNode$_: function(value, _list, E) {
  var t1 = new $.LinkedListNode(null, null, _list, value);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListNode$_$2(value, _list, E);
  return t1;
},

LinkedList$: function(E) {
  var t1 = new $.LinkedList(null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedListIterator$: function(_list, E) {
  var t1 = new $.LinkedListIterator(null, _list, null, -1);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListIterator$1(_list, E);
  return t1;
}}],
["meta", "package:meta/meta.dart", , {
_Deprecated: {"": "Object;"}}],
["metadata", "../../../../bin/soft-linux-x86-64/dart/dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {"": "Object;browserName,minimumVersion"},

Experimental: {"": "Object;"},

DomName: {"": "Object;name"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
["startstopstats", "package:dartemis_toolbox/startstopstats.dart", , {
StartStopStats: {"": "Object;displayFct,displayLast@,resetLast<,min>,max>,total,count,_pstart,_perf",
  displayFct$2: function(arg0, arg1) {
    return this.displayFct.call$2(arg0, arg1);
  },
  get$avg: function() {
    var t1, t2;
    t1 = this.count;
    if (t1 === 0)
      t1 = 0;
    else {
      t2 = this.total;
      if (t2 == null)
        throw t2.$div();
      if (t1 == null)
        throw $.iae(t1);
      t1 = t2 / t1;
    }
    return t1;
  },
  start$0: function(_) {
    this._pstart = this._perf.now();
  },
  stop$0: function(_) {
    var now, t1;
    now = this._perf.now();
    t1 = this._pstart;
    if (now == null)
      throw now.$sub();
    if (t1 == null)
      throw $.iae(t1);
    this.store$1(now - t1);
    if (this.displayFct != null)
      this.displayFct$2(this, now);
  },
  store$1: function(t) {
    var t1 = this.min;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > t)
      this.min = t;
    t1 = this.max;
    if (t1 == null)
      throw t1.$lt();
    if (t1 < t)
      this.max = t;
    t1 = this.count;
    if (t1 == null)
      throw t1.$add();
    this.count = t1 + 1;
    t1 = this.total;
    if (t1 == null)
      throw t1.$add();
    this.total = t1 + t;
  },
  reset$0: function(_) {
    this.resetLast = this._perf.now();
    this.min = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    this.max = 5e-324;
    this.total = 0;
    this.count = 0;
  },
  StartStopStats$0: function() {
    this.reset$0(this);
    this.start$0(this);
  }
},

StartStopStats$: function() {
  var t1 = new $.StartStopStats(null, 0, 0, null, null, null, null, null, $.window().performance);
  t1.StartStopStats$0();
  return t1;
}}],
["system_animator", "package:dartemis_toolbox/system_animator.dart", , {
Animatable: {"": "ComponentPoolable;l<",
  cleanUp$0: function() {
    var t1 = this.l;
    t1.clear$0(t1);
  },
  add$1: function(_, a) {
    var t1 = this.l;
    t1.add$1(t1, a);
    return this;
  },
  $isAnimatable: true
},

Animation: {"": "Object;_t0@,onBegin,onTick,onEnd,next@",
  onBegin$3: function(arg0, arg1, arg2) {
    return this.onBegin.call$3(arg0, arg1, arg2);
  },
  onTick$3: function(arg0, arg1, arg2) {
    return this.onTick.call$3(arg0, arg1, arg2);
  },
  onEnd$3: function(arg0, arg1, arg2) {
    return this.onEnd.call$3(arg0, arg1, arg2);
  },
  $isAnimation: true
},

System_Animator: {"": "EntityProcessingSystem;_animatableMapper,_tickTime<,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._animatableMapper = $.ComponentMapper$($.Type_I6I, this.world, $.Animatable);
  },
  begin$0: function() {
    var t1, t2;
    t1 = this._tickTime;
    t2 = this.world.delta;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._tickTime = t1 + t2;
  },
  processEntity$1: function(entity) {
    this._animatableMapper.get$1(entity).get$l().iterateAndUpdate$1(new $.System_Animator_processEntity_closure(this, entity));
  }
},

System_Animator_processEntity_closure: {"": "Closure;this_0,entity_1",
  call$1: function(anim) {
    var t1, t2, t3;
    if (anim.get$_t0() < 0) {
      t1 = this.this_0;
      anim.set$_t0(t1.get$_tickTime());
      anim.onBegin$3(this.entity_1, t1.get$_tickTime(), anim.get$_t0());
    }
    t1 = anim.get$_t0();
    t2 = this.this_0;
    t3 = t2.get$_tickTime();
    t1 = (!(t1 <= t3) || anim.onTick$3(this.entity_1, t3, t1)) === true;
    if (!t1)
      anim.onEnd$3(this.entity_1, t2.get$_tickTime(), anim.get$_t0());
    return t1 ? anim : anim.get$next();
  },
  $isFunction: true
},

Animatable$_: function() {
  return new $.Animatable($.LinkedBag$($.Animation));
},

Animatable__ctor: function() {
  return $.Animatable$_();
},

Animatable_Animatable: function() {
  var c = $.Poolable_Poolable$of($.Type_I6I, $.Animatable__ctor$closure);
  c.cleanUp$0();
  return c;
},

onNoop: function(e, t, t00) {
  return false;
},

Animation$: function() {
  return new $.Animation(-1, $.onNoop$closure, $.onNoop$closure, $.onNoop$closure, null);
},

System_Animator$: function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_I6I]);
  t2 = new $.System_Animator(null, 0, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
}}],
["system_emitter", "package:dartemis_toolbox/system_emitter.dart", , {
Emitter: {"": "Component;initializers<,counter,genParticles<,once<",
  counter$1: function(arg0) {
    return this.counter.call$1(arg0);
  },
  $isEmitter: true
},

System_Emitters: {"": "EntityProcessingSystem;_emitterMapper,_dt<,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._emitterMapper = $.ComponentMapper$($.Type_Opk, this.world, $.Emitter);
  },
  begin$0: function() {
    this._dt = this.world.delta;
  },
  processEntity$1: function(entity) {
    var em, nb, t1, ne;
    em = this._emitterMapper.get$1(entity);
    nb = em.counter$1(this._dt);
    t1 = em.get$genParticles();
    ne = t1 != null ? this._genParticles$2(nb, t1) : this._genEntities$1(nb);
    $.JSArray_methods.forEach$1(em.get$initializers(), new $.System_Emitters_processEntity_closure(this, entity, ne));
    $.forEach$1$ax(ne, new $.System_Emitters_processEntity_closure0(this));
    if (em.get$once())
      entity.deleteFromWorld$0();
  },
  _genEntities$1: function(nb) {
    return $.List_List$generate(nb, new $.System_Emitters__genEntities_closure(this), true, $.Entity);
  },
  _genParticles$2: function(nb, pc) {
    var e, t1;
    e = this.world.createEntity$0();
    e.addComponent$1(pc.call$1(nb));
    t1 = $.List_List$filled(1, e, $.Entity);
    $.setRuntimeTypeInfo(t1, [$.Entity]);
    return t1;
  }
},

System_Emitters_processEntity_closure: {"": "Closure;this_0,entity_1,ne_2",
  call$1: function(init) {
    return init.call$3(this.this_0.get$_dt(), this.entity_1, this.ne_2);
  },
  $isFunction: true
},

System_Emitters_processEntity_closure0: {"": "Closure;this_3",
  call$1: function(e) {
    return this.this_3.get$world().addEntity$1(e);
  },
  $isFunction: true
},

System_Emitters__genEntities_closure: {"": "Closure;this_0",
  call$1: function(i) {
    return this.this_0.get$world().createEntity$0();
  },
  $isFunction: true
},

processParticules_closure: {"": "Closure;f_0",
  call$1: function(e) {
    var ps, t1, t2, i;
    ps = $.propertyTypeCast(e.getComponent$1($.get$Particles_CT()), "$isParticles");
    if (ps != null) {
      t1 = ps.length;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = this.f_0;
      i = 0;
      for (; i < t1; ++i)
        t2.call$2(ps, i);
    }
  },
  $isFunction: true
},

particlesStartPosition_closure: {"": "Closure;gen_0,fromEmitter_1",
  call$3: function(dt, emitter, es) {
    $.processParticules(es, new $.particlesStartPosition__closure(this.gen_0, this.fromEmitter_1, dt, $.propertyTypeCast(emitter.getComponent$1($.get$Transform_CT()), "$isTransform").position3d));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

particlesStartPosition__closure: {"": "Closure;gen_2,fromEmitter_3,dt_4,pos_5",
  call$2: function(ps, i) {
    this.gen_2.call$2($.$index$asx(ps.get$position3d(), i), this.dt_4);
    if (this.fromEmitter_3)
      $.add$1$ax($.$index$asx(ps.get$position3d(), i), this.pos_5);
  },
  $isFunction: true
},

particlesStartPositionPrevious_closure: {"": "Closure;gen_0,fromEmitter_1",
  call$3: function(dt, emitter, es) {
    var m4, tf, t1;
    m4 = $.Matrix4$identity();
    if (this.fromEmitter_1) {
      tf = $.propertyTypeCast(emitter.getComponent$1($.get$Transform_CT()), "$isTransform");
      t1 = tf.rotation3d;
      m4.rotateX$1(t1.get$x(t1));
      t1 = tf.rotation3d;
      m4.rotateY$1(t1.get$y(t1));
      t1 = tf.rotation3d;
      m4.rotateZ$1(t1.get$z(t1));
    }
    $.processParticules(es, new $.particlesStartPositionPrevious__closure(this.gen_0, dt, m4));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

particlesStartPositionPrevious__closure: {"": "Closure;gen_2,dt_3,m4_4",
  call$2: function(ps, i) {
    $.add$1$ax(this.m4_4.rotate3$1(this.gen_2.call$2($.$index$asx(ps.get$position3dPrevious(), i), this.dt_3)), $.$index$asx(ps.get$position3d(), i));
  },
  $isFunction: true
},

addComponents_closure: {"": "Closure;fs_0",
  call$3: function(dt, emitter, es) {
    $.forEach$1$ax(es, new $.addComponents__closure(this.fs_0));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

addComponents__closure: {"": "Closure;fs_1",
  call$1: function(e) {
    $.JSArray_methods.forEach$1(this.fs_1, new $.addComponents___closure(e));
  },
  $isFunction: true
},

addComponents___closure: {"": "Closure;e_2",
  call$1: function(f) {
    return this.e_2.addComponent$1(f.call$0());
  },
  $isFunction: true
},

zero_closure: {"": "Closure;",
  call$1: function(dt) {
    return 0;
  },
  $isFunction: true
},

singleWave_closure: {"": "Closure;v_0",
  call$1: function(dt) {
    return $.$eq(dt, 0) ? this.v_0 : 0;
  },
  $isFunction: true
},

steady_closure: {"": "Closure;box_0,rate_1,_rateInv_2",
  call$1: function(dt) {
    var t1, t2, b;
    t1 = this.box_0;
    t1._acc_0 = $.$add$ns(t1._acc_0, dt);
    t2 = t1._acc_0;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    b = $.JSNumber_methods.round$0(this.rate_1 * t2 / 1000);
    t1._acc_0 = $.$sub$n(t1._acc_0, b * this._rateInv_2);
    return b;
  },
  $isFunction: true
},

constant_closure: {"": "Closure;x_0",
  call$2: function(v, dt) {
    return v.setFrom$1(this.x_0);
  },
  $isFunction: true
},

box_closure: {"": "Closure;center_0,offsets_1",
  call$2: function(v, dt) {
    var t1, t2, t3, t4;
    v.setFrom$1(this.center_0);
    t1 = $.getInterceptor$x(v);
    t2 = this.offsets_1;
    t1.set$x(v, $.$add$ns(t1.get$x(v), ($.get$_random().nextDouble$0() - 0.5) * 2 * t2.get$x(t2)));
    t1.set$y(v, $.$add$ns(t1.get$y(v), ($.get$_random().nextDouble$0() - 0.5) * 2 * t2.get$y(t2)));
    t3 = t1.get$z(v);
    t4 = $.get$_random().nextDouble$0();
    t2 = t2.get$z(t2);
    if (typeof t3 !== "number")
      throw t3.$add();
    t1.set$z(v, t3 + (t4 - 0.5) * 2 * t2);
    return v;
  },
  $isFunction: true
},

line_closure: {"": "Closure;box_0,start_1,easing_2,length_3",
  call$2: function(v, dt) {
    var t1, t2;
    t1 = v.setFrom$1(this.length_3);
    t2 = this.box_0;
    t1 = t1.scale$1(t1, this.easing_2.call$3(t2.acc_0, 1, 0));
    t1.add$1(t1, this.start_1);
    t2.acc_0 = $.$add$ns(t2.acc_0, dt);
    return v;
  },
  $isFunction: true
},

Emitter$: function() {
  var t1 = $.List_List(null, {func: "void__dynamic_Entity_Iterable", void: true, args: [null, $.Entity, [$.Iterable, $.Entity]]});
  $.setRuntimeTypeInfo(t1, [{func: "void__dynamic_Entity_Iterable", void: true, args: [null, $.Entity, [$.Iterable, $.Entity]]}]);
  return new $.Emitter(t1, $.zero(), null, false);
},

System_Emitters$: function() {
  var t1, t2;
  t1 = $.Aspect_getAspectForAllOf([$.Type_Opk]);
  t2 = new $.System_Emitters(null, 0, 0, null, $.Bag$(16, $.Entity), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
},

processParticules: function(es, f) {
  $.forEach$1$ax(es, new $.processParticules_closure(f));
},

particlesStartPosition: function(gen, fromEmitter) {
  return new $.particlesStartPosition_closure(gen, fromEmitter);
},

particlesStartPositionPrevious: function(gen, fromEmitter) {
  return new $.particlesStartPositionPrevious_closure(gen, fromEmitter);
},

addComponents: function(fs) {
  return new $.addComponents_closure(fs);
},

zero: function() {
  return new $.zero_closure();
},

singleWave: function(v) {
  return new $.singleWave_closure(v);
},

steady: function(rate) {
  var t1, _rateInv;
  t1 = {};
  t1._acc_0 = 0;
  _rateInv = rate > 0 ? 1000 / rate : 0;
  return new $.steady_closure(t1, rate, _rateInv);
},

constant: function(x) {
  return new $.constant_closure(x);
},

box: function(center, offsets) {
  return new $.box_closure(center, offsets);
},

line: function(start, end, easing) {
  var t1, $length;
  t1 = {};
  $length = end.$sub(end, start);
  t1.acc_0 = 0;
  return new $.line_closure(t1, start, easing, $length);
}}],
["system_particles", "package:dartemis_toolbox/system_particles.dart", , {
Particles: {"": "Component;length>,position3d<,position3dBuff<,position3dPrevious<,color<,mass<,radius<,collide<,intraCollide<,acc<,inertia<,extradata",
  copyPosition3dIntoPrevious$0: function() {
    var i, t1;
    i = $.$sub$n(this.length, 1);
    if (typeof i !== "number")
      return this.copyPosition3dIntoPrevious$0$bailout(1, i);
    t1 = this.position3dPrevious;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.copyPosition3dIntoPrevious$0$bailout(2, i, t1);
    for (; i > -1; --i) {
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      t1[i].setFrom$1($.$index$asx(this.position3d, i));
    }
  },
  copyPosition3dIntoPrevious$0$bailout: function(state0, i, t1) {
    switch (state0) {
      case 0:
        i = $.$sub$n(this.length, 1);
      case 1:
        state0 = 0;
        t1 = this.position3dPrevious;
      case 2:
        var t2, t3;
        state0 = 0;
        t2 = $.getInterceptor$asx(t1);
        for (; t3 = $.getInterceptor$n(i), t3.$gt(i, -1); i = t3.$sub(i, 1))
          t2.$index(t1, i).setFrom$1($.$index$asx(this.position3d, i));
    }
  },
  Particles$15$acc0$collide0$color0$inertia0$intraCollide$mass0$radius0$withAccs$withCollides$withColors$withInertias$withMass$withPrevious$withRadius: function($length, acc0, collide0, color0, inertia0, intraCollide, mass0, radius0, withAccs, withCollides, withColors, withInertias, withMass, withPrevious, withRadius) {
    this.position3d = $.List_List$generate($length, new $.Particles_closure6(this), true, null);
  },
  $isParticles: true
},

Particles_closure: {"": "Closure;",
  call$1: function(i) {
    return $.Vector3$zero();
  },
  $isFunction: true
},

Particles_closure0: {"": "Closure;color0_0",
  call$1: function(i) {
    return this.color0_0;
  },
  $isFunction: true
},

Particles_closure1: {"": "Closure;mass0_1",
  call$1: function(i) {
    return this.mass0_1;
  },
  $isFunction: true
},

Particles_closure2: {"": "Closure;radius0_2",
  call$1: function(i) {
    return this.radius0_2;
  },
  $isFunction: true
},

Particles_closure3: {"": "Closure;collide0_3",
  call$1: function(i) {
    return this.collide0_3;
  },
  $isFunction: true
},

Particles_closure4: {"": "Closure;acc0_4",
  call$1: function(i) {
    return $.Vector3$zero();
  },
  $isFunction: true
},

Particles_closure5: {"": "Closure;inertia0_5",
  call$1: function(i) {
    return this.inertia0_5;
  },
  $isFunction: true
},

Particles_closure6: {"": "Closure;this_6",
  call$1: function(i) {
    return $.Vector3$view($.Float32List_Float32List$view(this.this_6.get$position3dBuff().buffer, $.$mul$n($.$mul$n(i, 4), 3), 3));
  },
  $isFunction: true
},

Segment: {"": "Object;ps<,i1<,i2<,collide@"},

Particles$: function($length, acc0, collide0, color0, inertia0, intraCollide, mass0, radius0, withAccs, withCollides, withColors, withInertias, withMass, withPrevious, withRadius) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.Float32List_Float32List($.$mul$n($length, 3));
  t2 = withPrevious ? $.List_List$generate($length, new $.Particles_closure(), true, null) : null;
  t3 = withColors ? $.ItemSome$($.List_List$generate($length, new $.Particles_closure0(color0), true, null), null) : $.ItemDefault$(color0, null);
  t4 = withMass ? $.ItemSome$($.List_List$generate($length, new $.Particles_closure1(mass0), true, null), null) : $.ItemDefault$(mass0, null);
  t5 = withRadius ? $.ItemSome$($.List_List$generate($length, new $.Particles_closure2(radius0), true, null), null) : $.ItemDefault$(radius0, null);
  t6 = withCollides ? $.ItemSome$($.List_List$generate($length, new $.Particles_closure3(collide0), true, null), null) : $.ItemDefault$(collide0, null);
  if (withAccs)
    t7 = $.ItemSome$($.List_List$generate($length, new $.Particles_closure4(acc0), true, null), null);
  else
    t7 = $.ItemDefault$($.Vector3$zero(), null);
  t8 = withInertias ? $.ItemSome$($.List_List$generate($length, new $.Particles_closure5(inertia0), true, null), null) : $.ItemDefault$(inertia0, null);
  t8 = new $.Particles($length, null, t1, t2, t3, t4, t5, t6, intraCollide, t7, t8, null);
  t8.Particles$15$acc0$collide0$color0$inertia0$intraCollide$mass0$radius0$withAccs$withCollides$withColors$withInertias$withMass$withPrevious$withRadius($length, acc0, collide0, color0, inertia0, intraCollide, mass0, radius0, withAccs, withCollides, withColors, withInertias, withMass, withPrevious, withRadius);
  return t8;
}}],
["system_proto2d", "package:dartemis_toolbox/system_proto2d.dart", , {
Drawable: {"": "Component;draw",
  draw$3: function(arg0, arg1, arg2) {
    return this.draw.call$3(arg0, arg1, arg2);
  },
  $isDrawable: true
},

System_Renderer: {"": "EntityProcessingSystem;_gVisible,_g,_transformMapper,_drawMapper,_w,_h,_dpr,_areaEntity,translateX,translateY,_scale,_scaleI,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  get$scale: function(_) {
    return $.$div$n(this._scale, this._dpr);
  },
  set$scale: function(_, v) {
    var t1;
    this._scale = $.$mul$n(v, this._dpr);
    t1 = this._scale;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._scaleI = 1 / t1;
  },
  initialize$0: function() {
    this._drawMapper = $.ComponentMapper$($.Type_iuI, this.world, $.Drawable);
    this._transformMapper = $.ComponentMapper$($.Type_UU7, this.world, $.Transform);
    this._initCanvasDimension$0();
  },
  _initCanvasDimension$0: function() {
    var t1, canvasV, s, t2, t3;
    t1 = this._gVisible;
    canvasV = t1.canvas;
    s = this.get$scale(this);
    this._dpr = $.window().devicePixelRatio;
    this.set$scale(this, s);
    t2 = this._dpr;
    t3 = canvasV.clientWidth;
    if (t2 == null)
      throw t2.$mul();
    if (t3 == null)
      throw $.iae(t3);
    this._w = $.JSNumber_methods.round$0(t2 * t3);
    t3 = this._dpr;
    t2 = canvasV.clientHeight;
    if (t3 == null)
      throw t3.$mul();
    if (t2 == null)
      throw $.iae(t2);
    this._h = $.JSNumber_methods.round$0(t3 * t2);
    canvasV.width = this._w;
    canvasV.height = this._h;
    t2 = this._dpr;
    t1.scale(t2, t2);
    t2 = this._g;
    t2.canvas.width = this._w;
    t2.canvas.height = this._h;
  },
  begin$0: function() {
    this._g.save();
  },
  processEntity$1: function(entity) {
    var t1, t2, t3, t4, d, tf, t5, t6;
    t1 = this._g;
    t2 = this.translateX;
    t3 = this.translateY;
    t1.translate(t2, t3);
    t4 = this._scale;
    if (t4 !== 1)
      t1.scale(t4, t4);
    d = this._drawMapper.get$1(entity);
    tf = this._transformMapper.getSafe$1(entity);
    t4 = tf != null;
    if (t4) {
      t1.translate($.toInt$0$n($.get$x$x(tf.get$position3d())), $.toInt$0$n($.get$y$x(tf.get$position3d())));
      t5 = tf.get$rotation3d();
      t1.rotate(t5.get$z(t5));
      t5 = tf.get$scale3d();
      t5 = t5.get$x(t5);
      t6 = tf.get$scale3d();
      t1.scale(t5, t6.get$y(t6));
    }
    t5 = this._areaEntity;
    t5.set$x(t5, 0);
    t5.set$y(t5, 0);
    d.draw$3(t1, entity, t5);
    if (t4) {
      t4 = tf.get$scale3d();
      t4 = t4.get$x(t4);
      t5 = tf.get$scale3d();
      t1.scale(1 / t4, 1 / t5.get$y(t5));
      t5 = tf.get$rotation3d();
      t1.rotate(-t5.get$z(t5));
      t5 = $.toInt$0$n($.get$x$x(tf.get$position3d()));
      if (typeof t5 !== "number")
        throw t5.$negate();
      t4 = $.toInt$0$n($.get$y$x(tf.get$position3d()));
      if (typeof t4 !== "number")
        throw t4.$negate();
      t1.translate(-t5, -t4);
    }
    if (this._scale !== 1) {
      t4 = this._scaleI;
      t1.scale(t4, t4);
    }
    t1.translate(-t2, -t3);
    t1.restore();
  },
  end$0: function() {
    var t1, t2;
    t1 = this._g;
    t1.restore();
    t2 = this._gVisible;
    t2.clearRect(0, 0, this._w, this._h);
    t2.drawImage(t1.canvas, 0, 0);
    t1.clearRect(0, 0, this._w, this._h);
  }
},

rect_closure: {"": "Closure;w_0,h_1,fillStyle_2,strokeStyle_3,strokeLineWidth_4,strokeLineDashOffset_5",
  call$3: function(g, e, area) {
    var t1, t2, t3, rx, t4, ry, t5, t6;
    t1 = this.strokeStyle_3;
    t2 = t1 == null;
    if (t2 && this.fillStyle_2 == null)
      return;
    t3 = this.w_0;
    rx = -t3 / 2;
    t4 = this.h_1;
    ry = -t4 / 2;
    t5 = this.fillStyle_2;
    if (t5 != null) {
      t6 = $.getInterceptor$x(g);
      t6.set$fillStyle(g, t5);
      t6.fillRect$4(g, rx, ry, t3, t4);
    }
    if (!t2) {
      t2 = $.getInterceptor$x(g);
      t2.set$strokeStyle(g, t1);
      t2.set$lineWidth(g, this.strokeLineWidth_4);
      t2.set$lineDashOffset(g, this.strokeLineDashOffset_5);
      t2.strokeRect$4(g, rx, ry, t3, t4);
    }
    t1 = $.getInterceptor$x(area);
    t1.set$x(area, $.JSDouble_methods.toDouble$0(t3));
    t1.set$y(area, $.JSDouble_methods.toDouble$0(t4));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

text_closure: {"": "Closure;txt_0,fillStyle_1,strokeStyle_2,strokeLineWidth_3,strokeLineDashOffset_4,font_5",
  call$3: function(g, e, area) {
    var t1, t2;
    t1 = this.strokeStyle_2;
    t2 = t1 == null;
    if (t2 && true)
      return;
    if (!t2) {
      t2 = $.getInterceptor$x(g);
      t2.set$strokeStyle(g, t1);
      t2.set$lineWidth(g, this.strokeLineWidth_3);
      t2.set$lineDashOffset(g, this.strokeLineDashOffset_4);
      t2.set$font(g, this.font_5);
      t2.strokeText$3(g, this.txt_0, 0, 0);
    }
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

particles_closure: {"": "Closure;radiusScale_0,fillStyle_1,strokeStyle_2,strokeLineWidth_3,strokeLineDashOffset_4",
  call$3: function(g, entity, area) {
    var t1, i, t2, t3, t4, t5, t6, t7, t8, pos, t9, radius0, color, fillStyle0;
    t1 = entity.getComponent$1($.get$Particles_CT());
    $.propertyTypeCast(t1, "$isParticles");
    if (t1 == null || $.get$isEmpty$asx(t1.position3d) === true)
      return;
    i = $.$sub$n(t1.length, 1);
    if (typeof i !== "number")
      return this.call$3$bailout(1, g, t1, i);
    t2 = this.strokeStyle_2;
    t3 = $.getInterceptor$x(g);
    t4 = this.strokeLineWidth_3;
    t5 = this.strokeLineDashOffset_4;
    t6 = t2 != null;
    t7 = this.fillStyle_1 != null;
    t8 = this.radiusScale_0;
    for (; i > -1; --i) {
      pos = $.$index$asx(t1.position3d, i);
      if (pos != null) {
        t9 = t1.radius;
        radius0 = $.$mul$n(t9.$index(t9, i), t8);
        t9 = t1.color;
        color = t9.$index(t9, i);
        t9 = t1.collide;
        if ($.$eq(t9.$index(t9, i), -1)) {
          t9 = $.irgba_hsl(color);
          if (0 >= t9.length)
            throw $.ioore(0);
          t9[0] = $.JSNumber_methods.$mod(t9[0] + 0.5, 1);
          color = $.hsl_irgba(t9);
        }
        fillStyle0 = $.irgba_rgbaString(color);
        t3.beginPath$0(g);
        t9 = $.getInterceptor$x(pos);
        t3.arc$6(g, t9.get$x(pos), t9.get$y(pos), radius0, 0, 6.283185307179586, true);
        t3.closePath$0(g);
        if (t7) {
          t3.set$fillStyle(g, fillStyle0);
          t3.fill$0(g);
        }
        if (t6) {
          t3.set$strokeStyle(g, t2);
          t3.set$lineWidth(g, t4);
          t3.set$lineDashOffset(g, t5);
          t3.stroke$0(g);
        }
      }
    }
  },
  call$3$bailout: function(state0, g, t1, i) {
    switch (state0) {
      case 0:
        t1 = entity.getComponent$1($.get$Particles_CT());
        $.propertyTypeCast(t1, "$isParticles");
        if (t1 == null || $.get$isEmpty$asx(t1.position3d) === true)
          return;
        i = $.$sub$n(t1.length, 1);
      case 1:
        var t2, t3, t4, t5, t6, t7, t8, t9, pos, t10, radius0, color, fillStyle0;
        state0 = 0;
        t2 = this.strokeStyle_2;
        t3 = $.getInterceptor$x(g);
        t4 = this.strokeLineWidth_3;
        t5 = this.strokeLineDashOffset_4;
        t6 = t2 != null;
        t7 = this.fillStyle_1 != null;
        t8 = this.radiusScale_0;
        for (; t9 = $.getInterceptor$n(i), t9.$gt(i, -1); i = t9.$sub(i, 1)) {
          pos = $.$index$asx(t1.position3d, i);
          if (pos != null) {
            t10 = t1.radius;
            radius0 = $.$mul$n(t10.$index(t10, i), t8);
            t10 = t1.color;
            color = t10.$index(t10, i);
            t10 = t1.collide;
            if ($.$eq(t10.$index(t10, i), -1)) {
              t10 = $.irgba_hsl(color);
              if (0 >= t10.length)
                throw $.ioore(0);
              t10[0] = $.JSNumber_methods.$mod(t10[0] + 0.5, 1);
              color = $.hsl_irgba(t10);
            }
            fillStyle0 = $.irgba_rgbaString(color);
            t3.beginPath$0(g);
            t10 = $.getInterceptor$x(pos);
            t3.arc$6(g, t10.get$x(pos), t10.get$y(pos), radius0, 0, 6.283185307179586, true);
            t3.closePath$0(g);
            if (t7) {
              t3.set$fillStyle(g, fillStyle0);
              t3.fill$0(g);
            }
            if (t6) {
              t3.set$strokeStyle(g, t2);
              t3.set$lineWidth(g, t4);
              t3.set$lineDashOffset(g, t5);
              t3.stroke$0(g);
            }
          }
        }
    }
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

drawConstraints_closure: {"": "Closure;pinStyle_0,distanceStyle_1,distanceStyleCollide_2,angleStyle_3",
  call$3: function(g, e, area) {
    $.JSArray_methods.forEach$1($.propertyTypeCast(e.getComponent$1($.get$Constraints_CT()), "$isConstraints").l, new $.drawConstraints__closure(this.pinStyle_0, this.distanceStyle_1, this.distanceStyleCollide_2, this.angleStyle_3, g));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

drawConstraints__closure: {"": "Closure;pinStyle_4,distanceStyle_5,distanceStyleCollide_6,angleStyle_7,g_8",
  call$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isConstraint_Distance)
      $.drawSegment(this.g_8, x.get$segment(), this.distanceStyle_5, this.distanceStyleCollide_6);
    else if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isConstraint_Pin)
      $.drawCPin(this.g_8, x, this.pinStyle_4);
  },
  $isFunction: true
},

DrawComponentType: {"": "Object;ct<,draw",
  draw$3: function(arg0, arg1, arg2) {
    return this.draw.call$3(arg0, arg1, arg2);
  }
},

drawComponentType_closure: {"": "Closure;l_0",
  call$3: function(g, e, area) {
    $.JSArray_methods.forEach$1(this.l_0, new $.drawComponentType__closure(g, e, area));
  },
  $isFunction: true,
  $is_void__dynamic_Entity_Iterable: true
},

drawComponentType__closure: {"": "Closure;g_1,e_2,area_3",
  call$1: function(i) {
    var t1 = this.e_2;
    if (t1.getComponent$1(i.get$ct()) != null)
      i.draw$3(this.g_1, t1, this.area_3);
  },
  $isFunction: true
},

Drawable$: function(draw) {
  return new $.Drawable(draw);
},

System_Renderer$: function(canvas) {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.Vector2$(0, 0);
  t2 = $.Aspect_getAspectForAllOf([$.Type_iuI]);
  t3 = $.Bag$(16, $.Entity);
  t4 = t2.get$all();
  t5 = t2.get$excluded();
  t6 = t2.get$one();
  t6 = new $.System_Renderer($.get$context2D$x(canvas), $.get$context2D$x($.CanvasElement_CanvasElement(null, null)), null, null, 0, 0, 1, t1, 0, 0, 1, 1, 0, null, t3, t4, t5, t6, null, null);
  t6.EntitySystem$1(t2);
  return t6;
},

rect: function(w, h, fillStyle, strokeLineDashOffset, strokeLineWidth, strokeStyle) {
  return new $.rect_closure(w, h, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset);
},

text: function(txt, fillStyle, font, strokeLineDashOffset, strokeLineWidth, strokeStyle, textAlign) {
  return new $.text_closure(txt, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset, font);
},

particles: function(radiusScale, fillStyle, strokeLineDashOffset, strokeLineWidth, strokeStyle) {
  return new $.particles_closure(radiusScale, fillStyle, strokeStyle, strokeLineWidth, strokeLineDashOffset);
},

drawSegment: function(g, x, strokeStyle, strokeStyleCollide) {
  var t1, p1, p2, t2;
  t1 = x.ps;
  p1 = $.$index$asx(t1.get$position3d(), x.i1);
  p2 = $.$index$asx(t1.get$position3d(), x.i2);
  t1 = $.getInterceptor$x(g);
  t1.beginPath$0(g);
  t2 = $.getInterceptor$x(p1);
  t1.moveTo$2(g, t2.get$x(p1), t2.get$y(p1));
  t2 = $.getInterceptor$x(p2);
  t1.lineTo$2(g, t2.get$x(p2), t2.get$y(p2));
  t1.set$strokeStyle(g, x.collide === -1 ? strokeStyleCollide : strokeStyle);
  t1.stroke$0(g);
},

drawCPin: function(g, x, fillStyle) {
  var t1, t2;
  t1 = $.getInterceptor$x(g);
  t1.beginPath$0(g);
  t2 = x.pin;
  t1.arc$5(g, t2.get$x(t2), t2.get$y(t2), 6, 0, 6.283185307179586);
  t1.set$fillStyle(g, fillStyle);
  t1.fill$0(g);
},

drawConstraints: function(angleStyle, distanceStyle, distanceStyleCollide, pinStyle) {
  return new $.drawConstraints_closure(pinStyle, distanceStyle, distanceStyleCollide, angleStyle);
},

DrawComponentType$: function(ct, draw) {
  return new $.DrawComponentType(ct, draw);
},

drawComponentType: function(l) {
  return new $.drawComponentType_closure(l);
}}],
["system_transform", "package:dartemis_toolbox/system_transform.dart", , {
Transform: {"": "ComponentPoolable;position3d<,rotation3d<,scale3d<,_position2d", $isTransform: true},

Transform$_: function() {
  return new $.Transform(null, null, null, $.Vector2$zero());
},

Transform__ctor: function() {
  return $.Transform$_();
},

Transform_Transform$w2d: function(x, y, a) {
  return $.Transform_Transform$w3d($.Vector3$(x, y, 0), $.Vector3$(0, 0, a), null);
},

Transform_Transform$w3d: function(position, rotation, scale) {
  var c = $.propertyTypeCast($.Poolable_Poolable$of($.Type_UU7, $.Transform__ctor$closure), "$isTransform");
  c.position3d = position;
  c.rotation3d = rotation;
  c.scale3d = $.Vector3$(1, 1, 1);
  return c;
}}],
["system_verlet", "package:dartemis_toolbox/system_verlet.dart", , {
Constraint: {"": "Object;", $isConstraint: true},

Constraints: {"": "Component;l<", $isConstraints: true},

System_Simulator: {"": "IntervalEntitySystem;_particlesMapper<,_constraintsMapper,_constraintss,_constraintssL,steps?,globalAccs<,collSpace@,interval,_timestep,_acc,_delta,_interval,_systemBit,world,_actives,_all,_excluded,_one,_liblib8$_dummy,_passive",
  initialize$0: function() {
    this._particlesMapper = $.ComponentMapper$($.Type_GZG, this.world, $.Particles);
    this._constraintsMapper = $.ComponentMapper$($.Type_rpo, this.world, $.Constraints);
  },
  processEntities$1: function(entities) {
    var deplacement, accs, t1, dt, timestepPrevious, stepCoef, step, i, cs, j, c;
    deplacement = $.Vector3$zero();
    accs = $.Vector3$zero();
    t1 = this.collSpace;
    t1.reset$0(t1);
    dt = $.JSNumber_methods.toDouble$0(this.get$delta()) / 1000;
    timestepPrevious = this._timestep;
    if (timestepPrevious === -1)
      timestepPrevious = dt;
    this._timestep = dt;
    t1 = this._timestep;
    entities.forEach$1(entities, new $.System_Simulator_processEntities_closure(this, deplacement, accs, t1 / timestepPrevious, t1 * t1));
    stepCoef = 1 / this.steps;
    this._updateConstraintss$1(entities);
    for (step = 0; step < this.steps; ++step)
      for (i = 0; i < this._constraintssL; ++i) {
        t1 = this._constraintss;
        if (i >= t1.length)
          throw $.ioore(i);
        $.forEach$1$ax(t1[i].get$l(), new $.System_Simulator_processEntities_closure0(stepCoef));
      }
    for (i = 0; i < this._constraintssL; ++i) {
      t1 = this._constraintss;
      if (i >= t1.length)
        throw $.ioore(i);
      cs = t1[i];
      for (j = 0; j < $.get$length$asx(cs.get$l()); ++j) {
        c = $.$index$asx(cs.get$l(), j);
        if (typeof c === "object" && c !== null && !!$.getInterceptor(c).$isConstraint_Distance)
          this.collSpace.addSegment$1(c.segment);
      }
    }
    this.collSpace.handleCollision$0();
  },
  _updateConstraintss$1: function(entities) {
    var t1, i, t2, e, c, t3;
    this._constraintssL = 0;
    if ($.$gt$n(entities.get$size(entities), this._constraintss.length))
      this._constraintss = $.List_List(entities.get$size(entities), null);
    t1 = entities._bag;
    i = 0;
    while (true) {
      entities.get$size;
      t2 = t1._size;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      entities.$index;
      t2 = t1._data;
      if (i >= t2.length)
        throw $.ioore(i);
      e = t2[i];
      c = this._constraintsMapper.getSafe$1(e);
      if (c != null) {
        t2 = this._constraintss;
        t3 = this._constraintssL;
        if (t3 < 0 || t3 >= t2.length)
          throw $.ioore(t3);
        t2[t3] = c;
        this._constraintssL = t3 + 1;
      }
      ++i;
    }
  }
},

System_Simulator_processEntities_closure: {"": "Closure;this_0,deplacement_1,accs_2,timeScale_3,timestep2_4",
  call$1: function(e) {
    var t1, ps, i, t2, t3, t4, t5, position3d, position3dPrevious, t6, t7;
    t1 = this.this_0;
    ps = t1.get$_particlesMapper().get$1(e);
    if (ps == null)
      return;
    i = $.$sub$n($.get$length$asx(ps), 1);
    if (typeof i !== "number")
      return this.call$1$bailout(1, i, t1, ps);
    t2 = this.deplacement_1;
    t3 = this.timeScale_3;
    t4 = this.accs_2;
    t5 = this.timestep2_4;
    for (; i > -1; --i) {
      position3d = $.$index$asx(ps.get$position3d(), i);
      position3dPrevious = $.$index$asx(ps.get$position3dPrevious(), i);
      t6 = t2.setFrom$1(position3d).sub$1(position3dPrevious);
      t7 = ps.get$inertia();
      t7 = t7.$index(t7, i);
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t6.scale$1(t6, t3 * t7);
      t4.setFrom$1(t1.get$globalAccs());
      t7 = ps.get$acc();
      t4.add$1(t4, t7.$index(t7, i));
      t4.scale$1(t4, t5);
      t2.add$1(t2, t4);
      position3dPrevious.setFrom$1(position3d);
      $.add$1$ax(position3d, t2);
    }
    t1.get$collSpace().addParticles$1(ps);
  },
  call$1$bailout: function(state0, i, t1, ps) {
    switch (state0) {
      case 0:
        t1 = this.this_0;
        ps = t1.get$_particlesMapper().get$1(e);
        if (ps == null)
          return;
        i = $.$sub$n($.get$length$asx(ps), 1);
      case 1:
        var t2, t3, t4, t5, t6, position3d, position3dPrevious, t7, t8;
        state0 = 0;
        t2 = this.deplacement_1;
        t3 = this.timeScale_3;
        t4 = this.accs_2;
        t5 = this.timestep2_4;
        for (; t6 = $.getInterceptor$n(i), t6.$gt(i, -1); i = t6.$sub(i, 1)) {
          position3d = $.$index$asx(ps.get$position3d(), i);
          position3dPrevious = $.$index$asx(ps.get$position3dPrevious(), i);
          t7 = t2.setFrom$1(position3d).sub$1(position3dPrevious);
          t8 = ps.get$inertia();
          t8 = t8.$index(t8, i);
          if (typeof t8 !== "number")
            throw $.iae(t8);
          t7.scale$1(t7, t3 * t8);
          t4.setFrom$1(t1.get$globalAccs());
          t8 = ps.get$acc();
          t4.add$1(t4, t8.$index(t8, i));
          t4.scale$1(t4, t5);
          t2.add$1(t2, t4);
          position3dPrevious.setFrom$1(position3d);
          $.add$1$ax(position3d, t2);
        }
        t1.get$collSpace().addParticles$1(ps);
    }
  },
  $isFunction: true
},

System_Simulator_processEntities_closure0: {"": "Closure;stepCoef_5",
  call$1: function(j) {
    j.relax$1(this.stepCoef_5);
  },
  $isFunction: true
},

Constraint_Distance: {"": "Object;segment<,stiffness,_distance2,_stick",
  relax$1: function(stepCoef) {
    var t1, t2, t3, a, b, t4, l, t5, ma, mb;
    t1 = this.segment;
    t2 = t1.ps;
    t3 = t1.i1;
    a = $.$index$asx(t2.get$position3d(), t3);
    t1 = t1.i2;
    b = $.$index$asx(t2.get$position3d(), t1);
    t4 = this._stick;
    t4.setFrom$1(a).sub$1(b);
    l = t4.get$length(t4);
    t4.scale$1(t4, $.$mul$n($.$mul$n($.$div$n($.$sub$n(this._distance2, l), l), this.stiffness), stepCoef));
    t5 = t2.get$mass();
    ma = t5.$index(t5, t3);
    t2 = t2.get$mass();
    mb = t2.$index(t2, t1);
    t1 = $.getInterceptor$ns(ma);
    $.add$1$ax(a, t4.scale$1(t4, t1.$div(ma, t1.$add(ma, mb))));
    b.sub$1(t4.scale$1(t4, $.$div$n(mb, ma)));
  },
  Constraint_Distance$2: function(segment, stiffness) {
    var t1, t2;
    t1 = this.segment;
    t2 = t1.ps;
    this._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t2.get$position3d(), t1.i1), $.$index$asx(t2.get$position3d(), t1.i2)));
  },
  $isConstraint_Distance: true,
  $isConstraint: true
},

Constraint_Pin: {"": "Object;pin,a",
  relax$1: function(stepCoef) {
    this.a.setFrom$1(this.pin);
  },
  $isConstraint_Pin: true,
  $isConstraint: true
},

setCollideOfSegment_closure: {"": "Closure;collide_0",
  call$1: function(c) {
    if (typeof c === "object" && c !== null && !!$.getInterceptor(c).$isConstraint_Distance)
      c.segment.collide = this.collide_0;
  },
  $isFunction: true
},

Constraints$: function() {
  var t1 = $.List_List(null, $.Constraint);
  $.setRuntimeTypeInfo(t1, [$.Constraint]);
  return new $.Constraints(t1);
},

System_Simulator$: function(interval0, space0, steps) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = $.List_List(0, $.Constraints);
  $.setRuntimeTypeInfo(t1, [$.Constraints]);
  t2 = $.Vector3$(0, 0, 0);
  t3 = $.Aspect_getAspectForAllOf([$.Type_GZG]);
  t4 = $.Bag$(16, $.Entity);
  t5 = t3.get$all();
  t6 = t3.get$excluded();
  t7 = t3.get$one();
  t8 = $.Space_Noop$();
  t7 = new $.System_Simulator(null, null, t1, 0, steps, t2, t8, interval0, -1, 0, 0, interval0, 0, null, t4, t5, t6, t7, null, null);
  t7.EntitySystem$1(t3);
  return t7;
},

Constraint_Distance_Constraint_Distance$fromParticles: function(ps, i1, i2, stiffness, collide) {
  var t1, t2;
  t1 = new $.Segment(ps, i1, i2, collide);
  t2 = new $.Constraint_Distance(t1, stiffness, null, $.Vector3$zero());
  t2.Constraint_Distance$2(t1, stiffness);
  return t2;
},

makeTireXY: function(origin, radius, segments, spokeStiffness, treadStiffness, genP) {
  var stride, ps, i, t1, theta, v, cs, i0, t2, t3, t4;
  stride = 6.283185307179586 / segments;
  ps = genP.call$1(segments + 1);
  for (i = 0; t1 = ps.get$position3d(), i < segments; ++i) {
    theta = i * stride;
    v = $.$index$asx(t1, i).setFrom$1(origin);
    t1 = v.get$x(v);
    v.set$x(v, t1 + Math.cos(theta) * radius);
    t1 = v.get$y(v);
    v.set$y(v, t1 + Math.sin(theta) * radius);
  }
  $.$index$asx(t1, segments).setFrom$1(origin);
  ps.copyPosition3dIntoPrevious$0();
  cs = $.Constraints$();
  for (t1 = cs.l, i = 0; i < segments; i = i0) {
    i0 = i + 1;
    t2 = new $.Constraint_Distance(new $.Segment(ps, i, $.JSInt_methods.$mod(i0, segments), 0), treadStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
    t3 = t2.segment;
    t4 = t3.ps;
    t2._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t4.get$position3d(), t3.i1), $.$index$asx(t4.get$position3d(), t3.i2)));
    t1.push(t2);
    t2 = new $.Constraint_Distance(new $.Segment(ps, i, segments, 0), spokeStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
    t3 = t2.segment;
    t4 = t3.ps;
    t2._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t4.get$position3d(), t3.i1), $.$index$asx(t4.get$position3d(), t3.i2)));
    t1.push(t2);
    t2 = new $.Constraint_Distance(new $.Segment(ps, i, $.JSInt_methods.$mod(i + 5, segments), 0), treadStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
    t3 = t2.segment;
    t4 = t3.ps;
    t2._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t4.get$position3d(), t3.i1), $.$index$asx(t4.get$position3d(), t3.i2)));
    t1.push(t2);
  }
  return [ps, cs];
},

makeLineSegments: function(vertices, stiffness, $closed, genP) {
  var ps, t1, i, t2, cs, t3, t4;
  ps = genP.call$1(vertices.length);
  t1 = $.getInterceptor$asx(ps);
  i = 0;
  while (true) {
    t2 = t1.get$length(ps);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (!(i < t2))
      break;
    t2 = $.$index$asx(ps.get$position3d(), i);
    if (i >= vertices.length)
      throw $.ioore(i);
    t2.setFrom$1(vertices[i]);
    ++i;
  }
  ps.copyPosition3dIntoPrevious$0();
  cs = $.Constraints$();
  t1 = cs.l;
  i = 1;
  while (true) {
    t2 = $.get$length$asx(ps.get$position3d());
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (!(i < t2))
      break;
    t2 = new $.Constraint_Distance(new $.Segment(ps, i, i - 1, 0), stiffness, null, new $.Vector3($.Float32List_Float32List(3)));
    t3 = t2.segment;
    t4 = t3.ps;
    t2._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t4.get$position3d(), t3.i1), $.$index$asx(t4.get$position3d(), t3.i2)));
    t1.push(t2);
    ++i;
  }
  if ($closed)
    t1.push($.Constraint_Distance_Constraint_Distance$fromParticles(ps, 0, $.$sub$n($.get$length$asx(ps.get$position3d()), 1), stiffness, 0));
  return [ps, cs];
},

makeParallelogram: function(origin, width, height, stiffness, genP) {
  var t1, t2;
  t1 = origin.$add(origin, width);
  t2 = origin.$add(origin, width);
  return $.makeLineSegments([origin, t1, t2.$add(t2, height), origin.$add(origin, height)], stiffness, true, genP);
},

makeCloth: function(origin, width, height, segments, pinMod, stiffness, genP) {
  var xStride, yStride, diag, diagl, xStiffness, yStiffness, ps, cs, t1, y, t2, t3, x0, t4, t5, t6, x, t7, t8;
  xStride = width.$div(width, $.JSInt_methods.toDouble$0(segments));
  yStride = height.$div(height, $.JSInt_methods.toDouble$0(segments));
  diag = width.$sub(width, height);
  diagl = diag.get$length(diag);
  xStiffness = stiffness * width.get$length(width) / diagl;
  yStiffness = stiffness * height.get$length(height) / diagl;
  ps = genP.call$1(segments * segments);
  cs = $.Constraints$();
  for (t1 = cs.l, y = 0; y < segments; ++y) {
    t2 = y * segments;
    t3 = t2 + 0;
    x0 = $.$index$asx(ps.get$position3d(), t3);
    t4 = x0.setFrom$1(yStride);
    t4 = t4.scale$1(t4, y);
    t4.add$1(t4, origin);
    t4 = y > 0;
    if (t4) {
      t3 = new $.Constraint_Distance(new $.Segment(ps, t3, (y - 1) * segments, 0), yStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
      t5 = t3.segment;
      t6 = t5.ps;
      t3._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t6.get$position3d(), t5.i1), $.$index$asx(t6.get$position3d(), t5.i2)));
      t1.push(t3);
    }
    for (t3 = (y - 1) * segments, x = 1; x < segments; ++x) {
      t5 = t2 + x;
      t6 = $.$index$asx(ps.get$position3d(), t5).setFrom$1(xStride);
      t6 = t6.scale$1(t6, x);
      t6.add$1(t6, x0);
      t6 = new $.Constraint_Distance(new $.Segment(ps, t5, t5 - 1, 0), xStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
      t7 = t6.segment;
      t8 = t7.ps;
      t6._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t8.get$position3d(), t7.i1), $.$index$asx(t8.get$position3d(), t7.i2)));
      t1.push(t6);
      if (t4) {
        t5 = new $.Constraint_Distance(new $.Segment(ps, t5, t3 + x, 0), yStiffness, null, new $.Vector3($.Float32List_Float32List(3)));
        t6 = t5.segment;
        t7 = t6.ps;
        t5._distance2 = $.get$length$asx($.$sub$n($.$index$asx(t7.get$position3d(), t6.i1), $.$index$asx(t7.get$position3d(), t6.i2)));
        t1.push(t5);
      }
    }
  }
  ps.copyPosition3dIntoPrevious$0();
  for (x = 0; x < segments; ++x)
    if ($.JSInt_methods.$mod(x, pinMod) === 0) {
      t2 = $.$index$asx(ps.get$position3d(), x);
      t1.push(new $.Constraint_Pin($.clone$0$x(t2), t2));
    }
  return [ps, cs];
},

pinParticle: function(e, index) {
  $.pinVector3($.$index$asx($.propertyTypeCast(e.getComponent$1($.get$Particles_CT()), "$isParticles").position3d, index), e.getComponent$1($.get$Constraints_CT()));
},

pinVector3: function(v, cs) {
  $.add$1$ax(cs.get$l(), new $.Constraint_Pin($.clone$0$x(v), v));
},

setCollideOfSegment: function(e, collide) {
  $.JSArray_methods.forEach$1($.propertyTypeCast(e.getComponent$1($.get$Constraints_CT()), "$isConstraints").l, new $.setCollideOfSegment_closure(collide));
}}],
["templating", "package:web_ui/templating.dart", , {
updateCssClass_closure: {"": "Closure;",
  call$1: function(e) {
    return e != null && !$.$eq(e, "");
  },
  $isFunction: true
},

updateCssClass_closure0: {"": "Closure;",
  call$1: function(e) {
    return e != null && !$.$eq(e, "");
  },
  $isFunction: true
},

bindCssClasses_closure: {"": "Closure;elem_0",
  call$1: function(e) {
    var t1, t2, change, t3;
    t1 = e.get$changes();
    if (t1 != null)
      for (t1 = $.get$iterator$ax(t1), t2 = this.elem_0; t1.moveNext$0() === true;) {
        change = t1.get$current();
        t3 = $.getInterceptor$x(change);
        if (t3.get$oldValue(change) != null)
          $.remove$1$ax($.get$classes$x(t2), t3.get$oldValue(change));
        if (t3.get$newValue(change) != null)
          $.add$1$ax($.get$classes$x(t2), t3.get$newValue(change));
      }
    else {
      t1 = this.elem_0;
      t2 = $.getInterceptor$x(e);
      $.updateCssClass(t1, false, t2.get$oldValue(e));
      $.updateCssClass(t1, true, t2.get$newValue(e));
    }
  },
  $isFunction: true
},

TemplateItem: {"": "Object;",
  create$0: function() {
  }
},

Binding: {"": "TemplateItem;exp,action,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  action$1: function($receiver, arg0) {
    return this.action.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      this.action$1(this, $.ChangeNotification$(null, this.exp$0(), null));
    else if (this.stopper != null)
      throw $.wrapException($.StateError$("binding already attached"));
    else
      this.stopper = $.watchAndInvoke(this.exp, this.action, "generic-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
},

ClassAttrBinding: {"": "TemplateItem;elem,exp,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      $.updateCssClass(this.elem, true, this.exp$0());
    else if (this.stopper != null)
      throw $.wrapException($.StateError$("class binding already attached"));
    else
      this.stopper = $.bindCssClasses(this.elem, this.exp);
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
},

DomPropertyBinding: {"": "TemplateItem;setter,getter,isUrl,isFinal,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  getter$0: function() {
    return this.getter.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  _safeSetter$1: function(value) {
    this.setter$1(this.isUrl ? $.sanitizeUri(value) : value);
  },
  insert$0: function(_) {
    if (this.isFinal)
      this._safeSetter$1(this.getter$0());
    else if (this.stopper != null)
      throw $.wrapException($.StateError$("data binding already attached."));
    else
      this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_closure(this), "dom-property-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  }
},

DomPropertyBinding_insert_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._safeSetter$1($.get$newValue$x(e));
  },
  $isFunction: true
},

ComponentItem: {"": "TemplateItem;component",
  create$0: function() {
    var t1 = this.component;
    t1.created_autogenerated$0();
    t1.created$0();
    t1.composeChildren$0();
  },
  insert$0: function(_) {
    var t1 = this.component;
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  remove$0: function(_) {
    var t1 = this.component;
    t1.removed_autogenerated$0();
    t1.removed$0();
  }
},

Template: {"": "TemplateItem;node,children>,nodes>",
  contentBind$2: function(exp, isFinal) {
    var t1 = {};
    t1.bindNode_0 = $.Text_Text("");
    this.children.push($.Binding$(new $.Template_contentBind_closure(exp), new $.Template_contentBind_closure0(t1, exp), isFinal));
    return t1.bindNode_0;
  },
  bindClass$3: function(elem, exp, isFinal) {
    this.children.push($.ClassAttrBinding$(elem, exp, isFinal));
  },
  oneWayBind$4: function(exp, setter, isFinal, isUrl) {
    this.children.push($.DomPropertyBinding$(exp, setter, isUrl, isFinal));
  },
  loop$3: function(_, template, exp, iterSetup) {
    this.children.push($.LoopTemplate$(template, exp, iterSetup));
  },
  component$1: function(component) {
    this.children.push($.ComponentItem$(component));
  },
  add$1: function(_, n) {
    return this.nodes.push(n);
  },
  addAll$1: function(_, list) {
    return $.JSArray_methods.addAll$1(this.nodes, list);
  },
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].create$0();
    }
  },
  insert$0: function(_) {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.insert$0$ax(t1[i]);
    }
  },
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  }
},

Template_contentBind_closure: {"": "Closure;exp_1",
  call$0: function() {
    return $.S(this.exp_1.call$0());
  },
  $isFunction: true,
  $is_void_: true
},

Template_contentBind_closure0: {"": "Closure;box_0,exp_2",
  call$1: function(e) {
    var t1 = this.box_0;
    t1.bindNode_0 = $.updateBinding(this.exp_2.call$0(), t1.bindNode_0, $.get$newValue$x(e));
  },
  $isFunction: true
},

PlaceholderTemplate: {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function(_) {
    var t1, t2, t3, $parent, reference, len, i;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    if (t1.length > 0) {
      t2 = this.node;
      t3 = $.getInterceptor$x(t2);
      $parent = t3.get$parentNode(t2);
      reference = t3.get$nextNode(t2);
      for (len = t1.length, t2 = $.getInterceptor$x($parent), i = 0; i < len; ++i) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.insertBefore$2($parent, t1[i], reference);
      }
    }
    $.Template.prototype.insert$0.call(this, this);
  },
  remove$0: function(_) {
    var t1, i;
    $.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  }
},

LoopTemplate: {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$3: function(arg0, arg1, arg2) {
    return this.iterSetup.call$3(arg0, arg1, arg2);
  },
  insert$0: function(_) {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_closure(this), "loop-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  }
},

LoopTemplate_insert_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, list, t3, i, t4;
    t1 = this.this_0;
    t2 = $.getInterceptor$ax(t1);
    $.PlaceholderTemplate.prototype.remove$0.call(t2, t1);
    list = $.get$newValue$x(e);
    t3 = $.getInterceptor$asx(list);
    i = 0;
    while (true) {
      t4 = t3.get$length(list);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (!(i < t4))
        break;
      t1.iterSetup$3(list, i, t1);
      ++i;
    }
    $.PlaceholderTemplate.prototype.insert$0.call(t2, t1);
  },
  $isFunction: true
},

updateBinding: function(value, node, stringValue) {
  var node0;
  if (stringValue == null)
    stringValue = $.toString$0(value);
  if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isText)
    $.set$text$x(node, stringValue);
  else {
    node0 = $.Text_Text(stringValue);
    $.replaceWith$1$x(node, node0);
    node = node0;
  }
  return node;
},

updateCssClass: function(elem, addClasses, classes) {
  var t1, t2;
  t1 = $.getInterceptor(classes);
  if (t1.$eq(classes, "") || classes == null)
    return;
  if (addClasses)
    if (typeof classes === "string") {
      t2 = $.getInterceptor$x(elem);
      if (t1.contains$1(classes, " "))
        $.addAll$1$ax(t2.get$classes(elem), classes.split(" "));
      else
        $.add$1$ax(t2.get$classes(elem), classes);
    } else {
      t2 = $.checkSubtype(classes, "$isList", [$.JSString], "$asList");
      if (t2)
        $.addAll$1$ax($.get$classes$x(elem), t1.where$1(classes, new $.updateCssClass_closure()));
      else
        throw $.wrapException($.ArgumentError$("classes must be a String or List<String>."));
    }
  else if (typeof classes === "string") {
    t2 = $.getInterceptor$x(elem);
    if (t1.contains$1(classes, " "))
      $.removeAll$1$x(t2.get$classes(elem), classes.split(" "));
    else
      $.remove$1$ax(t2.get$classes(elem), classes);
  } else {
    t2 = $.checkSubtype(classes, "$isList", [$.JSString], "$asList");
    if (t2)
      $.removeAll$1$x($.get$classes$x(elem), t1.where$1(classes, new $.updateCssClass_closure0()));
    else
      throw $.wrapException($.ArgumentError$("classes must be a String or List<String>."));
  }
},

bindCssClasses: function(elem, exp) {
  return $.watchAndInvoke(exp, new $.bindCssClasses_closure(elem), "css-class-bind");
},

sanitizeUri: function(uri) {
  uri = $.toString$0(uri);
  return $._isSafeUri(uri) ? uri : "#";
},

_isSafeUri: function(uri) {
  var scheme, t1;
  scheme = $.Uri_parse(uri).scheme;
  t1 = $.getInterceptor(scheme);
  if (t1.$eq(scheme, ""))
    return true;
  return $.JSArray_methods.contains$1($.List_http_https_ftp_mailto, t1.toLowerCase$0(scheme)) || "MAILTO" === t1.toUpperCase$0(scheme);
},

Binding$: function(exp, action, isFinal) {
  return new $.Binding(exp, action, isFinal, null);
},

ClassAttrBinding$: function(elem, exp, isFinal) {
  return new $.ClassAttrBinding(elem, exp, isFinal, null);
},

DomPropertyBinding$: function(getter, setter, isUrl, isFinal) {
  return new $.DomPropertyBinding(setter, getter, isUrl, isFinal, null);
},

ComponentItem$: function(component) {
  return new $.ComponentItem(component);
},

Template$: function(node) {
  return new $.Template(node, [], []);
},

LoopTemplate$: function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
}}],
["utils", "package:dartemis_toolbox/utils.dart", , {
LinkedBag: {"": "Object;_liblib9$_head",
  get$length: function(_) {
    var a, i;
    for (a = this._liblib9$_head, i = 0; a != null; a = a._liblib9$_next)
      if (a._obj != null)
        ++i;
    return i;
  },
  clear$0: function(_) {
    var a;
    for (a = this._liblib9$_head; a != null; a = a._liblib9$_next)
      a._obj = null;
  },
  add$1: function(_, obj) {
    var a, a0, e;
    a = this._liblib9$_head;
    for (; a != null; a = a0) {
      if (a._obj == null) {
        a._obj = obj;
        return;
      }
      a0 = a._liblib9$_next;
      if (a0 == null) {
        e = new $.LinkedEntry(null, null);
        e._obj = obj;
        a._liblib9$_next = e;
        return;
      }
    }
  },
  iterateAndUpdate$1: function(f) {
    var current, t1;
    for (current = this._liblib9$_head; current != null; current = current._liblib9$_next) {
      t1 = current._obj;
      if (t1 != null)
        current._obj = f.call$1(t1);
    }
  }
},

LinkedEntry: {"": "Object;_liblib9$_next,_obj"},

ItemOption: {"": "Object;"},

ItemSome: {"": "ItemOption;_vs",
  $index: function(_, i) {
    var t1 = this._vs;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.$$index$bailout1(1, i, t1);
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $$index$bailout1: function(state0, i, t1) {
    return $.$index$asx(t1, i);
  },
  $indexSet: function(_, i, v) {
    var t1 = this._vs;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.isJsIndexable(t1, t1[$.dispatchPropertyName]))
      return this.$$indexSet$bailout1(1, i, v, t1);
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
    return v;
  },
  $$indexSet$bailout1: function(state0, i, v, t1) {
    $.$indexSet$ax(t1, i, v);
    return v;
  },
  $asItemOption: null
},

ItemDefault: {"": "ItemOption;_liblib9$_value",
  $index: function(_, i) {
    return this._liblib9$_value;
  },
  $indexSet: function(_, i, v) {
  },
  $asItemOption: null
},

LinkedBag$: function(E) {
  var t1 = new $.LinkedBag($.LinkedEntry$());
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedEntry$: function() {
  return new $.LinkedEntry(null, null);
},

ItemSome$: function(_vs, T) {
  var t1 = new $.ItemSome(_vs);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

ItemDefault$: function(_value, T) {
  var t1 = new $.ItemDefault(_value);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
}}],
["utils_dartemis", "package:dartemis_toolbox/utils_dartemis.dart", , {
addNewEntity_closure: {"": "Closure;e_0",
  call$1: function(c) {
    return this.e_0.addComponent$1(c);
  },
  $isFunction: true
},

addNewEntity_closure0: {"": "Closure;e_1,gm_2",
  call$1: function(group) {
    var t1 = this.gm_2;
    return t1.add$2(t1, this.e_1, group);
  },
  $isFunction: true
},

addNewEntity: function(world, cs, groups, player) {
  var e = world.createEntity$0();
  $.forEach$1$ax(cs, new $.addNewEntity_closure(e));
  world.addEntity$1(e);
  return e;
}}],
["utils_math", "package:dartemis_toolbox/utils_math.dart", , {
MinMax: {"": "Object;min>,max>"},

IntersectionFinderXY: {"": "Object;_v0,_v1,_v2,_mm0,_mm1",
  segment_sphere$4: function(s1, s2, c, r) {
    var s1c, s, sl2, sp, u, t1, cs, l2;
    s1c = this._v0;
    s1c.setFrom$1(c).sub$1(s1);
    s = this._v1;
    s.setFrom$1(s2).sub$1(s1);
    sl2 = s.get$length2();
    if (sl2 === 0)
      sp = s1;
    else {
      u = (s1c.get$x(s1c) * s.get$x(s) + s1c.get$y(s1c) * s.get$y(s)) / sl2;
      if (u < 0)
        sp = s1;
      else if (u > 1)
        sp = s2;
      else {
        t1 = s.scale$1(s, u);
        t1 = t1.add$1(t1, s1);
        sp = t1;
      }
    }
    cs = this._v2;
    cs.setFrom$1(c).sub$1(sp);
    l2 = cs.get$length2();
    t1 = $.$mul$n(r, r);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (l2 > t1)
      return false;
    return true;
  },
  sphere_sphere$4: function(ca, ra, cb, rb) {
    var threshold, t1, t2, dx, dy, dis2;
    threshold = $.$add$ns(ra, rb);
    t1 = $.getInterceptor$x(ca);
    t2 = $.getInterceptor$x(cb);
    dx = $.$sub$n(t1.get$x(ca), t2.get$x(cb));
    dy = $.$sub$n(t1.get$y(ca), t2.get$y(cb));
    dis2 = $.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy));
    return $.$ge$n($.$mul$n(threshold, threshold), dis2);
  }
},

MinMax$: function() {
  return new $.MinMax(null, null);
},

extractAabbDisc: function(v, radius, out) {
  var t1, t2, t3, t4, t5, t6;
  if (typeof radius !== "number")
    return $.extractAabbDisc$bailout(1, v, radius, out);
  t1 = out.get$min(out);
  t2 = $.getInterceptor$x(v);
  t3 = t2.get$x(v);
  if (typeof t3 !== "number")
    return $.extractAabbDisc$bailout(2, v, radius, out, t1, t2, t3);
  t3 -= radius;
  t4 = t2.get$y(v);
  if (typeof t4 !== "number")
    return $.extractAabbDisc$bailout(3, v, radius, out, t1, t2, t3, t4);
  t5 = t2.get$z(v);
  if (typeof t5 !== "number")
    throw t5.$sub();
  t1 = t1.storage;
  t6 = t1.length;
  if (0 >= t6)
    throw $.ioore(0);
  t1[0] = t3;
  if (1 >= t6)
    throw $.ioore(1);
  t1[1] = t4 - radius;
  if (2 >= t6)
    throw $.ioore(2);
  t1[2] = t5 - radius;
  t5 = out.get$max(out);
  t1 = t2.get$x(v);
  if (typeof t1 !== "number")
    return $.extractAabbDisc$bailout(4, v, radius, 0, t1, t2, 0, 0, t5);
  t1 += radius;
  t6 = t2.get$y(v);
  if (typeof t6 !== "number")
    return $.extractAabbDisc$bailout(5, v, radius, 0, t1, t2, 0, 0, t5, t6);
  t2 = t2.get$z(v);
  if (typeof t2 !== "number")
    throw t2.$add();
  t5 = t5.storage;
  t4 = t5.length;
  if (0 >= t4)
    throw $.ioore(0);
  t5[0] = t1;
  if (1 >= t4)
    throw $.ioore(1);
  t5[1] = t6 + radius;
  if (2 >= t4)
    throw $.ioore(2);
  t5[2] = t2 + radius;
},

extractAabbDisc$bailout: function(state0, v, radius, out, t1, t2, t3, t4, t5, t6) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = out.get$min(out);
      t2 = $.getInterceptor$x(v);
      t3 = t2.get$x(v);
    case 2:
      state0 = 0;
      t3 = $.$sub$n(t3, radius);
      t4 = t2.get$y(v);
    case 3:
      state0 = 0;
      t4 = $.$sub$n(t4, radius);
      t5 = t2.get$z(v);
      if (typeof t5 !== "number")
        throw t5.$sub();
      if (typeof radius !== "number")
        throw $.iae(radius);
      t1 = t1.storage;
      t6 = t1.length;
      if (0 >= t6)
        throw $.ioore(0);
      t1[0] = t3;
      if (1 >= t6)
        throw $.ioore(1);
      t1[1] = t4;
      if (2 >= t6)
        throw $.ioore(2);
      t1[2] = t5 - radius;
      t5 = out.get$max(out);
      t1 = t2.get$x(v);
    case 4:
      state0 = 0;
      t1 = $.$add$ns(t1, radius);
      t6 = t2.get$y(v);
    case 5:
      state0 = 0;
      t6 = $.$add$ns(t6, radius);
      t2 = t2.get$z(v);
      if (typeof t2 !== "number")
        throw t2.$add();
      t5 = t5.storage;
      t4 = t5.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5[0] = t1;
      if (1 >= t4)
        throw $.ioore(1);
      t5[1] = t6;
      if (2 >= t4)
        throw $.ioore(2);
      t5[2] = t2 + radius;
  }
},

extractAabbDisc2: function(v0, v1, radius, out) {
  var min, max, t1, t2, t3, t4;
  min = out.get$min(out);
  max = out.get$max(out);
  t1 = $.getInterceptor$x(v0);
  t2 = $.getInterceptor$x(v1);
  if ($.$gt$n(t1.get$x(v0), t2.get$x(v1))) {
    min.set$x(min, $.$sub$n(t1.get$x(v0), radius));
    max.set$x(max, $.$add$ns(t2.get$x(v1), radius));
  } else {
    min.set$x(min, $.$sub$n(t2.get$x(v1), radius));
    max.set$x(max, $.$add$ns(t1.get$x(v0), radius));
  }
  if ($.$gt$n(t1.get$y(v0), t2.get$y(v1))) {
    min.set$y(min, $.$sub$n(t1.get$y(v0), radius));
    max.set$y(max, $.$add$ns(t2.get$y(v1), radius));
  } else {
    min.set$y(min, $.$sub$n(t2.get$y(v1), radius));
    max.set$y(max, $.$add$ns(t1.get$y(v0), radius));
  }
  t3 = t1.get$z(v0);
  t4 = t2.get$z(v1);
  if (typeof t3 !== "number")
    throw t3.$gt();
  if (typeof t4 !== "number")
    throw $.iae(t4);
  if (t3 > t4) {
    t1 = t1.get$z(v0);
    if (typeof t1 !== "number")
      throw t1.$sub();
    min.set$z(min, t1 - radius);
    t2 = t2.get$z(v1);
    if (typeof t2 !== "number")
      throw t2.$add();
    max.set$z(max, t2 + radius);
  } else {
    t2 = t2.get$z(v1);
    if (typeof t2 !== "number")
      throw t2.$sub();
    min.set$z(min, t2 - radius);
    t1 = t1.get$z(v0);
    if (typeof t1 !== "number")
      throw t1.$add();
    max.set$z(max, t1 + radius);
  }
},

IntersectionFinderXY$: function() {
  return new $.IntersectionFinderXY($.Vector3$zero(), $.Vector3$zero(), $.Vector3$zero(), $.MinMax$(), $.MinMax$());
}}],
["vector_math", "package:vector_math/vector_math.dart", , {
Aabb3: {"": "Object;_min,_max",
  get$min: function(_) {
    return this._min;
  },
  get$max: function(_) {
    return this._max;
  },
  Aabb3$0: function() {
    this._min = $.Vector3$zero();
    this._max = $.Vector3$zero();
  }
},

Matrix4: {"": "Object;storage<",
  index$2: function(_, row, col) {
    return $.$add$ns($.$mul$n(col, 4), row);
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (15 >= t2.length)
      throw $.ioore(15);
    t2 = t2[15];
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t2;
    t2 = arg.get$storage();
    if (14 >= t2.length)
      throw $.ioore(14);
    t1[14] = t2[14];
    t2 = arg.get$storage();
    if (13 >= t2.length)
      throw $.ioore(13);
    t1[13] = t2[13];
    t2 = arg.get$storage();
    if (12 >= t2.length)
      throw $.ioore(12);
    t1[12] = t2[12];
    t2 = arg.get$storage();
    if (11 >= t2.length)
      throw $.ioore(11);
    t1[11] = t2[11];
    t2 = arg.get$storage();
    if (10 >= t2.length)
      throw $.ioore(10);
    t1[10] = t2[10];
    t2 = arg.get$storage();
    if (9 >= t2.length)
      throw $.ioore(9);
    t1[9] = t2[9];
    t2 = arg.get$storage();
    if (8 >= t2.length)
      throw $.ioore(8);
    t1[8] = t2[8];
    t2 = arg.get$storage();
    if (7 >= t2.length)
      throw $.ioore(7);
    t1[7] = t2[7];
    t2 = arg.get$storage();
    if (6 >= t2.length)
      throw $.ioore(6);
    t1[6] = t2[6];
    t2 = arg.get$storage();
    if (5 >= t2.length)
      throw $.ioore(5);
    t1[5] = t2[5];
    t2 = arg.get$storage();
    if (4 >= t2.length)
      throw $.ioore(4);
    t1[4] = t2[4];
    t2 = arg.get$storage();
    if (3 >= t2.length)
      throw $.ioore(3);
    t1[3] = t2[3];
    t2 = arg.get$storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n[1] " + $.S(this.getRow$1(1)) + "\n[2] " + $.S(this.getRow$1(2)) + "\n[3] " + $.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var r, t1, t2, t3;
    r = $.Vector4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = this.index$2(this, row, 0);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = this.index$2(this, row, 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t3 = this.index$2(this, row, 2);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = t3;
    t3 = this.index$2(this, row, 3);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t3;
    return r;
  },
  clone$0: function(_) {
    return $.Matrix4$copy(this);
  },
  _mul_scale$1: function(arg) {
    var r, t1, t2, t3;
    r = $.Matrix4$zero();
    t1 = r.storage;
    t2 = this.storage;
    if (15 >= t2.length)
      throw $.ioore(15);
    t3 = t2[15];
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t3 * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    r = $.Matrix4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t11 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t12 = t2[12];
    if (3 >= t6)
      throw $.ioore(3);
    t5 = t5[3];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5;
    t5 = t2[0];
    t12 = arg.get$storage();
    t11 = t12.length;
    if (4 >= t11)
      throw $.ioore(4);
    t10 = t12[4];
    t9 = t2[4];
    if (5 >= t11)
      throw $.ioore(5);
    t8 = t12[5];
    t7 = t2[8];
    if (6 >= t11)
      throw $.ioore(6);
    t4 = t12[6];
    t13 = t2[12];
    if (7 >= t11)
      throw $.ioore(7);
    t12 = t12[7];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[0];
    t13 = arg.get$storage();
    t4 = t13.length;
    if (8 >= t4)
      throw $.ioore(8);
    t7 = t13[8];
    t8 = t2[4];
    if (9 >= t4)
      throw $.ioore(9);
    t9 = t13[9];
    t10 = t2[8];
    if (10 >= t4)
      throw $.ioore(10);
    t5 = t13[10];
    t11 = t2[12];
    if (11 >= t4)
      throw $.ioore(11);
    t13 = t13[11];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t12 * t7 + t8 * t9 + t10 * t5 + t11 * t13;
    t13 = t2[0];
    t11 = arg.get$storage();
    t5 = t11.length;
    if (12 >= t5)
      throw $.ioore(12);
    t10 = t11[12];
    t9 = t2[4];
    if (13 >= t5)
      throw $.ioore(13);
    t8 = t11[13];
    t7 = t2[8];
    if (14 >= t5)
      throw $.ioore(14);
    t12 = t11[14];
    t4 = t2[12];
    if (15 >= t5)
      throw $.ioore(15);
    t11 = t11[15];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t11;
    t11 = t2[1];
    t4 = arg.get$storage();
    t12 = t4.length;
    if (0 >= t12)
      throw $.ioore(0);
    t7 = t4[0];
    t8 = t2[5];
    if (1 >= t12)
      throw $.ioore(1);
    t9 = t4[1];
    t10 = t2[9];
    if (2 >= t12)
      throw $.ioore(2);
    t13 = t4[2];
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    if (3 >= t12)
      throw $.ioore(3);
    t1[1] = t11 * t7 + t8 * t9 + t10 * t13 + t5 * t4[3];
    t4 = t2[1];
    t5 = arg.get$storage();
    t13 = t5.length;
    if (4 >= t13)
      throw $.ioore(4);
    t10 = t5[4];
    t9 = t2[5];
    if (5 >= t13)
      throw $.ioore(5);
    t8 = t5[5];
    t7 = t2[9];
    if (6 >= t13)
      throw $.ioore(6);
    t11 = t5[6];
    t12 = t2[13];
    if (7 >= t13)
      throw $.ioore(7);
    t1[5] = t4 * t10 + t9 * t8 + t7 * t11 + t12 * t5[7];
    t5 = t2[1];
    t12 = arg.get$storage();
    t11 = t12.length;
    if (8 >= t11)
      throw $.ioore(8);
    t7 = t12[8];
    t8 = t2[5];
    if (9 >= t11)
      throw $.ioore(9);
    t9 = t12[9];
    t10 = t2[9];
    if (10 >= t11)
      throw $.ioore(10);
    t4 = t12[10];
    t13 = t2[13];
    if (11 >= t11)
      throw $.ioore(11);
    t1[9] = t5 * t7 + t8 * t9 + t10 * t4 + t13 * t12[11];
    t12 = t2[1];
    t13 = arg.get$storage();
    t4 = t13.length;
    if (12 >= t4)
      throw $.ioore(12);
    t10 = t13[12];
    t9 = t2[5];
    if (13 >= t4)
      throw $.ioore(13);
    t8 = t13[13];
    t7 = t2[9];
    if (14 >= t4)
      throw $.ioore(14);
    t5 = t13[14];
    t11 = t2[13];
    if (15 >= t4)
      throw $.ioore(15);
    t13 = t13[15];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t12 * t10 + t9 * t8 + t7 * t5 + t11 * t13;
    t13 = t2[2];
    t11 = arg.get$storage();
    t5 = t11.length;
    if (0 >= t5)
      throw $.ioore(0);
    t7 = t11[0];
    t8 = t2[6];
    if (1 >= t5)
      throw $.ioore(1);
    t9 = t11[1];
    t10 = t2[10];
    if (2 >= t5)
      throw $.ioore(2);
    t12 = t11[2];
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    if (3 >= t5)
      throw $.ioore(3);
    t1[2] = t13 * t7 + t8 * t9 + t10 * t12 + t4 * t11[3];
    t11 = t2[2];
    t4 = arg.get$storage();
    t12 = t4.length;
    if (4 >= t12)
      throw $.ioore(4);
    t10 = t4[4];
    t9 = t2[6];
    if (5 >= t12)
      throw $.ioore(5);
    t8 = t4[5];
    t7 = t2[10];
    if (6 >= t12)
      throw $.ioore(6);
    t13 = t4[6];
    t5 = t2[14];
    if (7 >= t12)
      throw $.ioore(7);
    t1[6] = t11 * t10 + t9 * t8 + t7 * t13 + t5 * t4[7];
    t4 = t2[2];
    t5 = arg.get$storage();
    t13 = t5.length;
    if (8 >= t13)
      throw $.ioore(8);
    t7 = t5[8];
    t8 = t2[6];
    if (9 >= t13)
      throw $.ioore(9);
    t9 = t5[9];
    t10 = t2[10];
    if (10 >= t13)
      throw $.ioore(10);
    t11 = t5[10];
    t12 = t2[14];
    if (11 >= t13)
      throw $.ioore(11);
    t1[10] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t5[11];
    t5 = t2[2];
    t12 = arg.get$storage();
    t11 = t12.length;
    if (12 >= t11)
      throw $.ioore(12);
    t10 = t12[12];
    t9 = t2[6];
    if (13 >= t11)
      throw $.ioore(13);
    t8 = t12[13];
    t7 = t2[10];
    if (14 >= t11)
      throw $.ioore(14);
    t4 = t12[14];
    t13 = t2[14];
    if (15 >= t11)
      throw $.ioore(15);
    t12 = t12[15];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t5 * t10 + t9 * t8 + t7 * t4 + t13 * t12;
    t12 = t2[3];
    t13 = arg.get$storage();
    t4 = t13.length;
    if (0 >= t4)
      throw $.ioore(0);
    t7 = t13[0];
    t8 = t2[7];
    if (1 >= t4)
      throw $.ioore(1);
    t9 = t13[1];
    t10 = t2[11];
    if (2 >= t4)
      throw $.ioore(2);
    t5 = t13[2];
    if (15 >= t3)
      throw $.ioore(15);
    t3 = t2[15];
    if (3 >= t4)
      throw $.ioore(3);
    t1[3] = t12 * t7 + t8 * t9 + t10 * t5 + t3 * t13[3];
    t13 = t2[3];
    t3 = arg.get$storage();
    t5 = t3.length;
    if (4 >= t5)
      throw $.ioore(4);
    t10 = t3[4];
    t9 = t2[7];
    if (5 >= t5)
      throw $.ioore(5);
    t8 = t3[5];
    t7 = t2[11];
    if (6 >= t5)
      throw $.ioore(6);
    t12 = t3[6];
    t4 = t2[15];
    if (7 >= t5)
      throw $.ioore(7);
    t1[7] = t13 * t10 + t9 * t8 + t7 * t12 + t4 * t3[7];
    t3 = t2[3];
    t4 = arg.get$storage();
    t12 = t4.length;
    if (8 >= t12)
      throw $.ioore(8);
    t7 = t4[8];
    t8 = t2[7];
    if (9 >= t12)
      throw $.ioore(9);
    t9 = t4[9];
    t10 = t2[11];
    if (10 >= t12)
      throw $.ioore(10);
    t13 = t4[10];
    t5 = t2[15];
    if (11 >= t12)
      throw $.ioore(11);
    t1[11] = t3 * t7 + t8 * t9 + t10 * t13 + t5 * t4[11];
    t4 = t2[3];
    t5 = arg.get$storage();
    t13 = t5.length;
    if (12 >= t13)
      throw $.ioore(12);
    t10 = t5[12];
    t9 = t2[7];
    if (13 >= t13)
      throw $.ioore(13);
    t8 = t5[13];
    t7 = t2[11];
    if (14 >= t13)
      throw $.ioore(14);
    t3 = t5[14];
    t2 = t2[15];
    if (15 >= t13)
      throw $.ioore(15);
    t5 = t5[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t4 * t10 + t9 * t8 + t7 * t3 + t2 * t5;
    return r;
  },
  _mul_vector$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    r = $.Vector4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (3 >= t3)
      throw $.ioore(3);
    t4 = t2[3];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (7 >= t3)
      throw $.ioore(7);
    t8 = t2[7];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (11 >= t3)
      throw $.ioore(11);
    t10 = t2[11];
    if (2 >= t6)
      throw $.ioore(2);
    t11 = t5[2];
    if (15 >= t3)
      throw $.ioore(15);
    t3 = t2[15];
    if (3 >= t6)
      throw $.ioore(3);
    t6 = t5[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t4 * t7 + t8 * t9 + t10 * t11 + t3 * t6;
    t1[2] = t2[2] * t5[0] + t2[6] * t5[1] + t2[10] * t5[2] + t2[14] * t5[3];
    t1[1] = t2[1] * t5[0] + t2[5] * t5[1] + t2[9] * t5[2] + t2[13] * t5[3];
    t1[0] = t2[0] * t5[0] + t2[4] * t5[1] + t2[8] * t5[2] + t2[12] * t5[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    r = $.Vector3$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t6 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t11 = t2[12];
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t6 + t11;
    t11 = t2[1];
    t6 = t5[0];
    t10 = t2[5];
    t9 = t5[1];
    t8 = t2[9];
    t7 = t5[2];
    if (13 >= t3)
      throw $.ioore(13);
    t4 = t2[13];
    if (1 >= t12)
      throw $.ioore(1);
    t1[1] = t11 * t6 + t10 * t9 + t8 * t7 + t4;
    t4 = t2[2];
    t7 = t5[0];
    t8 = t2[6];
    t9 = t5[1];
    t10 = t2[10];
    t5 = t5[2];
    if (14 >= t3)
      throw $.ioore(14);
    t2 = t2[14];
    if (2 >= t12)
      throw $.ioore(2);
    t1[2] = t4 * t7 + t8 * t9 + t10 * t5 + t2;
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isVector4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isVector3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw $.wrapException($.ArgumentError$(arg));
  },
  $add: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = new $.Matrix4($.Float32List_Float32List(16));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 + t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 + t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 + t5;
    if (3 >= t3)
      throw $.ioore(3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t4 = t4[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t5 + t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= t5.length)
      throw $.ioore(4);
    t5 = t5[4];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t4 + t5;
    if (5 >= t3)
      throw $.ioore(5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= t4.length)
      throw $.ioore(5);
    t4 = t4[5];
    if (5 >= t6)
      throw $.ioore(5);
    t1[5] = t5 + t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= t5.length)
      throw $.ioore(6);
    t5 = t5[6];
    if (6 >= t6)
      throw $.ioore(6);
    t1[6] = t4 + t5;
    if (7 >= t3)
      throw $.ioore(7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= t4.length)
      throw $.ioore(7);
    t4 = t4[7];
    if (7 >= t6)
      throw $.ioore(7);
    t1[7] = t5 + t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    t5 = arg.get$storage();
    if (8 >= t5.length)
      throw $.ioore(8);
    t5 = t5[8];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t4 + t5;
    if (9 >= t3)
      throw $.ioore(9);
    t5 = t2[9];
    t4 = arg.get$storage();
    if (9 >= t4.length)
      throw $.ioore(9);
    t4 = t4[9];
    if (9 >= t6)
      throw $.ioore(9);
    t1[9] = t5 + t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    t5 = arg.get$storage();
    if (10 >= t5.length)
      throw $.ioore(10);
    t5 = t5[10];
    if (10 >= t6)
      throw $.ioore(10);
    t1[10] = t4 + t5;
    if (11 >= t3)
      throw $.ioore(11);
    t5 = t2[11];
    t4 = arg.get$storage();
    if (11 >= t4.length)
      throw $.ioore(11);
    t4 = t4[11];
    if (11 >= t6)
      throw $.ioore(11);
    t1[11] = t5 + t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    t5 = arg.get$storage();
    if (12 >= t5.length)
      throw $.ioore(12);
    t5 = t5[12];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t4 + t5;
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    t4 = arg.get$storage();
    if (13 >= t4.length)
      throw $.ioore(13);
    t4 = t4[13];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t5 + t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    t5 = arg.get$storage();
    if (14 >= t5.length)
      throw $.ioore(14);
    t5 = t5[14];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t4 + t5;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    t3 = arg.get$storage();
    if (15 >= t3.length)
      throw $.ioore(15);
    t3 = t3[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t2 + t3;
    return r;
  },
  $sub: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = new $.Matrix4($.Float32List_Float32List(16));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 - t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 - t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 - t5;
    if (3 >= t3)
      throw $.ioore(3);
    t5 = t2[3];
    t4 = arg.get$storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t4 = t4[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t5 - t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    t5 = arg.get$storage();
    if (4 >= t5.length)
      throw $.ioore(4);
    t5 = t5[4];
    if (4 >= t6)
      throw $.ioore(4);
    t1[4] = t4 - t5;
    if (5 >= t3)
      throw $.ioore(5);
    t5 = t2[5];
    t4 = arg.get$storage();
    if (5 >= t4.length)
      throw $.ioore(5);
    t4 = t4[5];
    if (5 >= t6)
      throw $.ioore(5);
    t1[5] = t5 - t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    t5 = arg.get$storage();
    if (6 >= t5.length)
      throw $.ioore(6);
    t5 = t5[6];
    if (6 >= t6)
      throw $.ioore(6);
    t1[6] = t4 - t5;
    if (7 >= t3)
      throw $.ioore(7);
    t5 = t2[7];
    t4 = arg.get$storage();
    if (7 >= t4.length)
      throw $.ioore(7);
    t4 = t4[7];
    if (7 >= t6)
      throw $.ioore(7);
    t1[7] = t5 - t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    t5 = arg.get$storage();
    if (8 >= t5.length)
      throw $.ioore(8);
    t5 = t5[8];
    if (8 >= t6)
      throw $.ioore(8);
    t1[8] = t4 - t5;
    if (9 >= t3)
      throw $.ioore(9);
    t5 = t2[9];
    t4 = arg.get$storage();
    if (9 >= t4.length)
      throw $.ioore(9);
    t4 = t4[9];
    if (9 >= t6)
      throw $.ioore(9);
    t1[9] = t5 - t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    t5 = arg.get$storage();
    if (10 >= t5.length)
      throw $.ioore(10);
    t5 = t5[10];
    if (10 >= t6)
      throw $.ioore(10);
    t1[10] = t4 - t5;
    if (11 >= t3)
      throw $.ioore(11);
    t5 = t2[11];
    t4 = arg.get$storage();
    if (11 >= t4.length)
      throw $.ioore(11);
    t4 = t4[11];
    if (11 >= t6)
      throw $.ioore(11);
    t1[11] = t5 - t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    t5 = arg.get$storage();
    if (12 >= t5.length)
      throw $.ioore(12);
    t5 = t5[12];
    if (12 >= t6)
      throw $.ioore(12);
    t1[12] = t4 - t5;
    if (13 >= t3)
      throw $.ioore(13);
    t5 = t2[13];
    t4 = arg.get$storage();
    if (13 >= t4.length)
      throw $.ioore(13);
    t4 = t4[13];
    if (13 >= t6)
      throw $.ioore(13);
    t1[13] = t5 - t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    t5 = arg.get$storage();
    if (14 >= t5.length)
      throw $.ioore(14);
    t5 = t5[14];
    if (14 >= t6)
      throw $.ioore(14);
    t1[14] = t4 - t5;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    t3 = arg.get$storage();
    if (15 >= t3.length)
      throw $.ioore(15);
    t3 = t3[15];
    if (15 >= t6)
      throw $.ioore(15);
    t1[15] = t2 - t3;
    return r;
  },
  rotateX$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = $.cos(angle);
    sinAngle = $.sin(angle);
    t1 = this.storage;
    t2 = t1.length;
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    if (8 >= t2)
      throw $.ioore(8);
    t4 = t1[8];
    t5 = t1[5];
    if (9 >= t2)
      throw $.ioore(9);
    t6 = t1[9];
    t7 = t1[6];
    if (10 >= t2)
      throw $.ioore(10);
    t8 = t1[10];
    t9 = t1[7];
    if (11 >= t2)
      throw $.ioore(11);
    t2 = t1[11];
    t10 = -sinAngle;
    t1[4] = t3 * cosAngle + t4 * sinAngle;
    t1[5] = t5 * cosAngle + t6 * sinAngle;
    t1[6] = t7 * cosAngle + t8 * sinAngle;
    t1[7] = t9 * cosAngle + t2 * sinAngle;
    t1[8] = t3 * t10 + t4 * cosAngle;
    t1[9] = t5 * t10 + t6 * cosAngle;
    t1[10] = t7 * t10 + t8 * cosAngle;
    t1[11] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  rotateY$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = $.cos(angle);
    sinAngle = $.sin(angle);
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (8 >= t2)
      throw $.ioore(8);
    t4 = t1[8];
    t5 = t1[1];
    if (9 >= t2)
      throw $.ioore(9);
    t6 = t1[9];
    t7 = t1[2];
    if (10 >= t2)
      throw $.ioore(10);
    t8 = t1[10];
    t9 = t1[3];
    if (11 >= t2)
      throw $.ioore(11);
    t2 = t1[11];
    t10 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 * sinAngle;
    t1[1] = t5 * cosAngle + t6 * sinAngle;
    t1[2] = t7 * cosAngle + t8 * sinAngle;
    t1[3] = t9 * cosAngle + t2 * sinAngle;
    t1[8] = t3 * t10 + t4 * cosAngle;
    t1[9] = t5 * t10 + t6 * cosAngle;
    t1[10] = t7 * t10 + t8 * cosAngle;
    t1[11] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  rotateZ$1: function(angle) {
    var cosAngle, sinAngle, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    cosAngle = $.cos(angle);
    sinAngle = $.sin(angle);
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (4 >= t2)
      throw $.ioore(4);
    t4 = t1[4];
    t5 = t1[1];
    if (5 >= t2)
      throw $.ioore(5);
    t6 = t1[5];
    t7 = t1[2];
    if (6 >= t2)
      throw $.ioore(6);
    t8 = t1[6];
    t9 = t1[3];
    if (7 >= t2)
      throw $.ioore(7);
    t2 = t1[7];
    t10 = -sinAngle;
    t1[0] = t3 * cosAngle + t4 * sinAngle;
    t1[1] = t5 * cosAngle + t6 * sinAngle;
    t1[2] = t7 * cosAngle + t8 * sinAngle;
    t1[3] = t9 * cosAngle + t2 * sinAngle;
    t1[4] = t3 * t10 + t4 * cosAngle;
    t1[5] = t5 * t10 + t6 * cosAngle;
    t1[6] = t7 * t10 + t8 * cosAngle;
    t1[7] = t9 * t10 + t2 * cosAngle;
    return this;
  },
  scale$3: function(_, x, y, z) {
    var t1, t2, sw, sx, sy, sz;
    t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector4;
    if (t1) {
      t2 = x.storage;
      if (3 >= t2.length)
        throw $.ioore(3);
      sw = t2[3];
    } else
      sw = 1;
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector3 || t1) {
      t1 = x.get$storage();
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      sx = t1[0];
      if (1 >= t2)
        throw $.ioore(1);
      sy = t1[1];
      if (2 >= t2)
        throw $.ioore(2);
      sz = t1[2];
    } else {
      sy = x;
      if (typeof sy !== "number")
        return this.scale$3$bailout(1, x, sw, z, sy);
      sz = x;
      if (typeof sz !== "number")
        return this.scale$3$bailout(2, x, sw, 0, sy, sz);
      sx = x;
    }
    if (typeof sx !== "number")
      return this.scale$3$bailout(3, 0, sw, 0, sy, sz, sx);
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * sx;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * sx;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * sx;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t1[3] * sx;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = t1[4] * sy;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = t1[5] * sy;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = t1[6] * sy;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = t1[7] * sy;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = t1[8] * sz;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = t1[9] * sz;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = t1[10] * sz;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = t1[11] * sz;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = t1[12] * sw;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = t1[13] * sw;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = t1[14] * sw;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = t1[15] * sw;
    return this;
  },
  scale$3$bailout: function(state0, x, sw, z, sy, sz, sx) {
    switch (state0) {
      case 0:
        t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector4;
        if (t1) {
          t2 = x.storage;
          if (3 >= t2.length)
            throw $.ioore(3);
          sw = t2[3];
        } else
          sw = 1;
      default:
        if (state0 === 0 && (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector3 || t1)) {
          t1 = x.get$storage();
          t2 = t1.length;
          if (0 >= t2)
            throw $.ioore(0);
          sx = t1[0];
          if (1 >= t2)
            throw $.ioore(1);
          sy = t1[1];
          if (2 >= t2)
            throw $.ioore(2);
          sz = t1[2];
        } else
          switch (state0) {
            case 0:
              sy = x;
            case 1:
              state0 = 0;
              sz = x;
            case 2:
              state0 = 0;
              sx = x;
          }
      case 3:
        var t1, t2, t3;
        state0 = 0;
        t1 = this.storage;
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t3 = t1[0];
        if (typeof sx !== "number")
          throw $.iae(sx);
        t1[0] = t3 * sx;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = t1[1] * sx;
        if (2 >= t2)
          throw $.ioore(2);
        t1[2] = t1[2] * sx;
        if (3 >= t2)
          throw $.ioore(3);
        t1[3] = t1[3] * sx;
        if (4 >= t2)
          throw $.ioore(4);
        t3 = t1[4];
        if (typeof sy !== "number")
          throw $.iae(sy);
        t1[4] = t3 * sy;
        if (5 >= t2)
          throw $.ioore(5);
        t1[5] = t1[5] * sy;
        if (6 >= t2)
          throw $.ioore(6);
        t1[6] = t1[6] * sy;
        if (7 >= t2)
          throw $.ioore(7);
        t1[7] = t1[7] * sy;
        if (8 >= t2)
          throw $.ioore(8);
        t3 = t1[8];
        if (typeof sz !== "number")
          throw $.iae(sz);
        t1[8] = t3 * sz;
        if (9 >= t2)
          throw $.ioore(9);
        t1[9] = t1[9] * sz;
        if (10 >= t2)
          throw $.ioore(10);
        t1[10] = t1[10] * sz;
        if (11 >= t2)
          throw $.ioore(11);
        t1[11] = t1[11] * sz;
        if (12 >= t2)
          throw $.ioore(12);
        t1[12] = t1[12] * sw;
        if (13 >= t2)
          throw $.ioore(13);
        t1[13] = t1[13] * sw;
        if (14 >= t2)
          throw $.ioore(14);
        t1[14] = t1[14] * sw;
        if (15 >= t2)
          throw $.ioore(15);
        t1[15] = t1[15] * sw;
        return this;
    }
  },
  scale$1: function($receiver, x) {
    return this.scale$3($receiver, x, null, null);
  },
  $negate: function(_) {
    var r, t1;
    r = $.Matrix4$zero();
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    r.$indexSet(r, 0, -t1[0]);
    if (1 >= t1.length)
      throw $.ioore(1);
    r.$indexSet(r, 1, -t1[1]);
    if (2 >= t1.length)
      throw $.ioore(2);
    r.$indexSet(r, 2, -t1[2]);
    if (3 >= t1.length)
      throw $.ioore(3);
    r.$indexSet(r, 3, -t1[3]);
    return r;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 1;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 1;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 1;
    return this;
  },
  add$1: function(_, o) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = o.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = o.get$storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t4 = t1[3];
    t3 = o.get$storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t1[3] = t4 + t3[3];
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    t4 = o.get$storage();
    if (4 >= t4.length)
      throw $.ioore(4);
    t1[4] = t3 + t4[4];
    if (5 >= t2)
      throw $.ioore(5);
    t4 = t1[5];
    t3 = o.get$storage();
    if (5 >= t3.length)
      throw $.ioore(5);
    t1[5] = t4 + t3[5];
    if (6 >= t2)
      throw $.ioore(6);
    t3 = t1[6];
    t4 = o.get$storage();
    if (6 >= t4.length)
      throw $.ioore(6);
    t1[6] = t3 + t4[6];
    if (7 >= t2)
      throw $.ioore(7);
    t4 = t1[7];
    t3 = o.get$storage();
    if (7 >= t3.length)
      throw $.ioore(7);
    t1[7] = t4 + t3[7];
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    t4 = o.get$storage();
    if (8 >= t4.length)
      throw $.ioore(8);
    t1[8] = t3 + t4[8];
    if (9 >= t2)
      throw $.ioore(9);
    t4 = t1[9];
    t3 = o.get$storage();
    if (9 >= t3.length)
      throw $.ioore(9);
    t1[9] = t4 + t3[9];
    if (10 >= t2)
      throw $.ioore(10);
    t3 = t1[10];
    t4 = o.get$storage();
    if (10 >= t4.length)
      throw $.ioore(10);
    t1[10] = t3 + t4[10];
    if (11 >= t2)
      throw $.ioore(11);
    t4 = t1[11];
    t3 = o.get$storage();
    if (11 >= t3.length)
      throw $.ioore(11);
    t1[11] = t4 + t3[11];
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    t4 = o.get$storage();
    if (12 >= t4.length)
      throw $.ioore(12);
    t1[12] = t3 + t4[12];
    if (13 >= t2)
      throw $.ioore(13);
    t4 = t1[13];
    t3 = o.get$storage();
    if (13 >= t3.length)
      throw $.ioore(13);
    t1[13] = t4 + t3[13];
    if (14 >= t2)
      throw $.ioore(14);
    t3 = t1[14];
    t4 = o.get$storage();
    if (14 >= t4.length)
      throw $.ioore(14);
    t1[14] = t3 + t4[14];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    t4 = o.get$storage();
    if (15 >= t4.length)
      throw $.ioore(15);
    t1[15] = t2 + t4[15];
    return this;
  },
  sub$1: function(o) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = o.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = o.get$storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 - t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t4 = t1[3];
    t3 = o.get$storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t1[3] = t4 - t3[3];
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    t4 = o.get$storage();
    if (4 >= t4.length)
      throw $.ioore(4);
    t1[4] = t3 - t4[4];
    if (5 >= t2)
      throw $.ioore(5);
    t4 = t1[5];
    t3 = o.get$storage();
    if (5 >= t3.length)
      throw $.ioore(5);
    t1[5] = t4 - t3[5];
    if (6 >= t2)
      throw $.ioore(6);
    t3 = t1[6];
    t4 = o.get$storage();
    if (6 >= t4.length)
      throw $.ioore(6);
    t1[6] = t3 - t4[6];
    if (7 >= t2)
      throw $.ioore(7);
    t4 = t1[7];
    t3 = o.get$storage();
    if (7 >= t3.length)
      throw $.ioore(7);
    t1[7] = t4 - t3[7];
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    t4 = o.get$storage();
    if (8 >= t4.length)
      throw $.ioore(8);
    t1[8] = t3 - t4[8];
    if (9 >= t2)
      throw $.ioore(9);
    t4 = t1[9];
    t3 = o.get$storage();
    if (9 >= t3.length)
      throw $.ioore(9);
    t1[9] = t4 - t3[9];
    if (10 >= t2)
      throw $.ioore(10);
    t3 = t1[10];
    t4 = o.get$storage();
    if (10 >= t4.length)
      throw $.ioore(10);
    t1[10] = t3 - t4[10];
    if (11 >= t2)
      throw $.ioore(11);
    t4 = t1[11];
    t3 = o.get$storage();
    if (11 >= t3.length)
      throw $.ioore(11);
    t1[11] = t4 - t3[11];
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    t4 = o.get$storage();
    if (12 >= t4.length)
      throw $.ioore(12);
    t1[12] = t3 - t4[12];
    if (13 >= t2)
      throw $.ioore(13);
    t4 = t1[13];
    t3 = o.get$storage();
    if (13 >= t3.length)
      throw $.ioore(13);
    t1[13] = t4 - t3[13];
    if (14 >= t2)
      throw $.ioore(14);
    t3 = t1[14];
    t4 = o.get$storage();
    if (14 >= t4.length)
      throw $.ioore(14);
    t1[14] = t3 - t4[14];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    t4 = o.get$storage();
    if (15 >= t4.length)
      throw $.ioore(15);
    t1[15] = t2 - t4[15];
    return this;
  },
  rotate3$1: function(arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (4 >= t2)
      throw $.ioore(4);
    t7 = t1[4];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (8 >= t2)
      throw $.ioore(8);
    t9 = t1[8];
    if (2 >= t5)
      throw $.ioore(2);
    t4 = t4[2];
    t5 = t1[1];
    t10 = t1[5];
    if (9 >= t2)
      throw $.ioore(9);
    t11 = t1[9];
    t12 = t1[2];
    t13 = t1[6];
    if (10 >= t2)
      throw $.ioore(10);
    t1 = t1[10];
    t2 = $.getInterceptor$x(arg);
    t2.set$x(arg, t3 * t6 + t7 * t8 + t9 * t4);
    t2.set$y(arg, t5 * t6 + t10 * t8 + t11 * t4);
    t2.set$z(arg, t12 * t6 + t13 * t8 + t1 * t4);
    return arg;
  },
  get$right: function() {
    var t1, t2, x, y;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    x = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    y = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = new $.Vector3($.Float32List_Float32List(3));
    t2.Vector3$3(x, y, t1[2]);
    return t2;
  },
  Matrix4$copy$1: function(other) {
    this.setFrom$1(other);
  },
  Matrix4$identity$0: function() {
    this.setIdentity$0();
  }
},

Vector2: {"": "Object;storage<",
  setValues$2: function(x_, y_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = other.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    return t2 + $.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    return $.Vector2$(-t3, -t1[1]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t5 = new $.Vector2($.Float32List_Float32List(2));
    t5.Vector2$2(t3 - t6, t1 - t4[1]);
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t5 = new $.Vector2($.Float32List_Float32List(2));
    t5.Vector2$2(t3 + t6, t1 + t4[1]);
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    return $.Vector2$(t3 * o, t1[1] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t2 = new $.Vector2($.Float32List_Float32List(2));
    t2.Vector2$2(t3 * scale, t1[1] * scale);
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    return Math.sqrt($.checkNum(t3 * t3 + t1 * t1));
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t1[1] = t2 - t4[1];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[1] = t2 * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  clone$0: function(_) {
    return $.Vector2$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  Vector2$copy$1: function(other) {
    this.setFrom$1(other);
  },
  Vector2$2: function(x_, y_) {
    this.setValues$2(x_, y_);
  }
},

Vector3: {"": "Object;storage<",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = other.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = other.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = other.get$storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t2 = t2[2];
    if (2 >= t3)
      throw $.ioore(2);
    t1[2] = t2;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    return t2 + $.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.Vector3$(-t3, -t4, -t1[2]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t5 = new $.Vector3($.Float32List_Float32List(3));
    t5.Vector3$3(t3 - t6, t7 - t8, t1 - t4[2]);
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t5 = new $.Vector3($.Float32List_Float32List(3));
    t5.Vector3$3(t3 + t6, t7 + t8, t1 + t4[2]);
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.Vector3$(t3 * o, t4 * o, t1[2] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = new $.Vector3($.Float32List_Float32List(3));
    t2.Vector3$3(t3 * scale, t4 * scale, t1[2] * scale);
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return Math.sqrt($.checkNum(t3 * t3 + t4 * t4 + t1 * t1));
  },
  get$length2: function() {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return t3 * t3 + t4 * t4 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = t1[2];
    t3 = arg.get$storage();
    if (2 >= t3.length)
      throw $.ioore(2);
    t1[2] = t2 + t3[2];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = t1[2];
    t3 = arg.get$storage();
    if (2 >= t3.length)
      throw $.ioore(2);
    t1[2] = t2 - t3[2];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t1[2];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[2] = t2 * arg;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  clone$0: function(_) {
    return $.Vector3$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = arg;
    return arg;
  },
  set$ps: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = t2;
    t2 = arg.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[0] = t2[1];
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  get$ps: function() {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return $.Vector2$(t1[2], t1[0]);
  },
  Vector3$copy$1: function(other) {
    this.setFrom$1(other);
  },
  Vector3$3: function(x_, y_, z_) {
    this.setValues$3(x_, y_, z_);
  },
  $isVector3: true
},

Vector4: {"": "Object;storage<",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (3 >= t2.length)
      throw $.ioore(3);
    t2 = t2[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t2;
    t2 = other.get$storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t1[2] = t2[2];
    t2 = other.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t2 + $.S(t1[2]) + ",";
    if (3 >= t1.length)
      throw $.ioore(3);
    return t2 + $.S(t1[3]);
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.Vector4$(-t3, -t4, -t5, -t1[3]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    t5 = new $.Vector4($.Float32List_Float32List(4));
    t5.Vector4$4(t3 - t6, t7 - t8, t9 - t10, t1 - t4[3]);
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    t5 = new $.Vector4($.Float32List_Float32List(4));
    t5.Vector4$4(t3 + t6, t7 + t8, t9 + t10, t1 + t4[3]);
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.Vector4$(t3 * o, t4 * o, t5 * o, t1[3] * o);
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = new $.Vector4($.Float32List_Float32List(4));
    t2.Vector4$4(t3 * scale, t4 * scale, t5 * scale, t1[3] * scale);
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    return Math.sqrt($.checkNum(t3 * t3 + t4 * t4 + t5 * t5 + t1 * t1));
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = arg.get$storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    t4 = arg.get$storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t1[3] = t2 + t4[3];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = arg.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 - t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = arg.get$storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 - t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    t4 = arg.get$storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t1[3] = t2 - t4[3];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[0] = t3 * arg;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * arg;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * arg;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t1[3] * arg;
    return this;
  },
  clone$0: function(_) {
    return $.Vector4$copy(this);
  },
  set$x: function(_, arg) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  set$z: function(_, arg) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = arg;
    return arg;
  },
  set$ps: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = t2;
    t2 = arg.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[0] = t2[1];
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return t1[2];
  },
  get$w: function() {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    return t1[3];
  },
  get$aabb: function() {
    var t1, t2;
    t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t2 = t1[3];
    t1 = t1[2];
    return $.Vector4$(t2, t2, t1, t1);
  },
  get$ps: function() {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return $.Vector2$(t1[2], t1[0]);
  },
  Vector4$copy$1: function(other) {
    this.setFrom$1(other);
  },
  Vector4$4: function(x_, y_, z_, w_) {
    this.setValues$4(x_, y_, z_, w_);
  },
  $isVector4: true
},

Aabb3$: function() {
  var t1 = new $.Aabb3(null, null);
  t1.Aabb3$0();
  return t1;
},

Matrix4$zero: function() {
  return new $.Matrix4($.Float32List_Float32List(16));
},

Matrix4$identity: function() {
  var t1 = new $.Matrix4($.Float32List_Float32List(16));
  t1.Matrix4$identity$0();
  return t1;
},

Matrix4$copy: function(other) {
  var t1 = new $.Matrix4($.Float32List_Float32List(16));
  t1.Matrix4$copy$1(other);
  return t1;
},

Vector2$: function(x_, y_) {
  var t1 = new $.Vector2($.Float32List_Float32List(2));
  t1.Vector2$2(x_, y_);
  return t1;
},

Vector2$zero: function() {
  return new $.Vector2($.Float32List_Float32List(2));
},

Vector2$copy: function(other) {
  var t1 = new $.Vector2($.Float32List_Float32List(2));
  t1.Vector2$copy$1(other);
  return t1;
},

Vector3$: function(x_, y_, z_) {
  var t1 = new $.Vector3($.Float32List_Float32List(3));
  t1.Vector3$3(x_, y_, z_);
  return t1;
},

Vector3$zero: function() {
  return new $.Vector3($.Float32List_Float32List(3));
},

Vector3$copy: function(other) {
  var t1 = new $.Vector3($.Float32List_Float32List(3));
  t1.Vector3$copy$1(other);
  return t1;
},

Vector3$view: function(storage) {
  return new $.Vector3(storage);
},

Vector4$: function(x_, y_, z_, w_) {
  var t1 = new $.Vector4($.Float32List_Float32List(4));
  t1.Vector4$4(x_, y_, z_, w_);
  return t1;
},

Vector4$zero: function() {
  return new $.Vector4($.Float32List_Float32List(4));
},

Vector4$copy: function(other) {
  var t1 = new $.Vector4($.Float32List_Float32List(4));
  t1.Vector4$copy$1(other);
  return t1;
}}],
["watcher", "package:web_ui/watcher.dart", , {
watch_closure4: {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true,
  $is_void_: true
},

watch_closure: {"": "Closure;target_0",
  call$0: function() {
    return $.toList$0$ax(this.target_0.call$0());
  },
  $isFunction: true,
  $is_void_: true
},

watch_closure0: {"": "Closure;target_1",
  call$0: function() {
    return this.target_1;
  },
  $isFunction: true,
  $is_void_: true
},

watch_closure1: {"": "Closure;target_2",
  call$0: function() {
    return $.toList$0$ax(this.target_2);
  },
  $isFunction: true,
  $is_void_: true
},

watch_closure2: {"": "Closure;target_3",
  call$0: function() {
    return this.target_3;
  },
  $isFunction: true,
  $is_void_: true
},

watch_closure3: {"": "Closure;target_4",
  call$0: function() {
    return this.target_4;
  },
  $isFunction: true,
  $is_void_: true
},

_Watcher: {"": "Object;debugName,_getter,_liblib5$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  toString$0: function(_) {
    return this.debugName;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.print("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  },
  $is_Watcher: true
},

_ListWatcher: {"": "_Watcher;debugName,_getter,_liblib5$_callback,_lastValue",
  _update$1: function(currentValue) {
    this._lastValue = $.List_List$from(currentValue, true, $.getRuntimeTypeArgument(this, "_ListWatcher", 0));
  },
  _ListWatcher$3: function(getter, callback, debugName, T) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
},

_HashMapWatcher: {"": "_Watcher;debugName,_getter,_liblib5$_callback,_lastValue",
  _update$1: function(currentValue) {
    this._lastValue = $.Map_Map$from(currentValue, $.getRuntimeTypeArgument(this, "_HashMapWatcher", 0), $.getRuntimeTypeArgument(this, "_HashMapWatcher", 1));
  },
  _HashMapWatcher$3: function(getter, callback, debugName, K, V) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
},

_OrderDependantMapWatcher: {"": "_Watcher;debugName,_getter,_liblib5$_callback,_lastValue",
  _update$1: function(currentValue) {
    this._lastValue = $.LinkedHashMap_LinkedHashMap$from(currentValue, null, null);
  },
  _OrderDependantMapWatcher$3: function(getter, callback, debugName, K, V) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
},

_WatcherType: {"": "Object;_liblib5$_value",
  toString$0: function(_) {
    return "Enum." + this._liblib5$_value;
  }
},

watch: function(target, callback, debugName) {
  var exp, watcherType, val, e, trace, t1, exception, watcher, node;
  if ($.useObservers)
    return $.observe(target, callback, null);
  if ($._watchers == null)
    $._watchers = $.LinkedList$($._Watcher);
  exp = null;
  watcherType = $._WatcherType_OTHER;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFunction) {
    exp = target;
    try {
      val = target.call$0();
      t1 = val;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList))
        watcherType = $._WatcherType_LIST;
      else {
        t1 = val;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
          watcherType = $._WatcherType_LIST;
          exp = new $.watch_closure(target);
        } else {
          t1 = val;
          if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
            t1 = val;
            t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
          } else
            t1 = true;
          if (t1)
            watcherType = $._WatcherType_ORDERED_MAP;
          else {
            t1 = val;
            if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap)
              watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.print("error: evaluating " + $.S(debugName != null ? debugName : "<unnamed>") + " watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
    }

  } else {
    t1 = target;
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList)) {
      exp = new $.watch_closure0(target);
      watcherType = $._WatcherType_LIST;
    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
        exp = new $.watch_closure1(target);
        watcherType = $._WatcherType_LIST;
      } else {
        t1 = target;
        if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
          t1 = target;
          t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
        } else
          t1 = true;
        if (t1) {
          exp = new $.watch_closure2(target);
          watcherType = $._WatcherType_ORDERED_MAP;
        } else {
          t1 = target;
          if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap) {
            exp = new $.watch_closure3(target);
            watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    }
  }
  watcher = $._createWatcher(watcherType, exp, callback, debugName);
  t1 = $._watchers;
  node = t1.add$1(t1, watcher);
  return node.get$remove(node);
},

_createWatcher: function(type, exp, callback, debugName) {
  switch (type) {
    case $._WatcherType_LIST:
      return $._ListWatcher$(exp, callback, debugName, null);
    case $._WatcherType_ORDERED_MAP:
      return $._OrderDependantMapWatcher$(exp, callback, debugName, null, null);
    case $._WatcherType_HASH_MAP:
      return $._HashMapWatcher$(exp, callback, debugName, null, null);
    default:
      return $._Watcher$(exp, callback, debugName);
  }
},

watchAndInvoke: function(exp, callback, debugName) {
  var res, value;
  res = $.watch(exp, callback, debugName);
  value = !!$.getInterceptor(exp).$isFunction ? exp.call$0() : exp;
  callback.call$1($.ChangeNotification$(null, typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isIterable) && (typeof value !== "object" || value === null || value.constructor !== Array && !$.getInterceptor(value).$isList) ? $.toList$0$ax(value) : value, null));
  return res;
},

_Watcher$: function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
},

_ListWatcher$: function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName, T);
  return t1;
},

_HashMapWatcher$: function(getter, callback, debugName, K, V) {
  var t1 = new $._HashMapWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._Watcher$3(getter, callback, debugName);
  t1._HashMapWatcher$3(getter, callback, debugName, K, V);
  return t1;
},

_OrderDependantMapWatcher$: function(getter, callback, debugName, K, V) {
  var t1 = new $._OrderDependantMapWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._Watcher$3(getter, callback, debugName);
  t1._OrderDependantMapWatcher$3(getter, callback, debugName, K, V);
  return t1;
}}],
["web_ui", "package:web_ui/web_ui.dart", , {
WebComponent: {"": "Object;",
  getScopedCss$1: function(componentName) {
    return this._mapper;
  },
  setScopedCss$2: function(componentName, mapper) {
    this._mapper = mapper;
  },
  get$host: function(_) {
    var t1 = this._host;
    if (t1 == null)
      throw $.wrapException($.StateError$("host element has not been set."));
    return t1;
  },
  set$host: function(_, value) {
    var t1, xtag;
    if (value == null)
      throw $.wrapException($.ArgumentError$("host must not be null."));
    t1 = $.getInterceptor$x(value);
    xtag = t1.get$xtag(value);
    if (xtag != null && !$.$eq(xtag, value))
      throw $.wrapException($.ArgumentError$("host must not have its xtag property set."));
    if (this._host != null)
      throw $.wrapException($.StateError$("host can only be set once."));
    t1.set$xtag(value, this);
    this._host = value;
  },
  createShadowRoot$1: function(_, componentName) {
    var root, t1;
    root = this._createShadowRoot$0();
    if (componentName != null) {
      t1 = this._generatedRoots;
      t1.$indexSet(t1, componentName, root);
    }
    return root;
  },
  createShadowRoot$0: function($receiver) {
    return this.createShadowRoot$1($receiver, null);
  },
  _createShadowRoot$0: function() {
    if ($._realShadowRoot())
      return $.createShadowRoot$0$x(this.get$host(this));
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    this._shadowRoots.push($.DivElement_DivElement());
    return $.get$last$ax(this._shadowRoots);
  },
  created$0: function() {
  },
  inserted$0: function() {
  },
  removed$0: function() {
  },
  composeChildren$0: function() {
    var t1, t2, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i, componentName;
    if ($._realShadowRoot())
      return;
    t1 = this._shadowRoots;
    t2 = t1.length;
    if (t2 === 0)
      throw $.wrapException($.StateError$("Distribution algorithm requires at least one shadow root and can only be run once."));
    if (0 >= t2)
      throw $.ioore(0);
    tree = t1.pop();
    pool = $.List_List$from(this.get$nodes(this), true, null);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = $.query$1$x(tree0, "shadow");
      if (point != null)
        if (t1.length > 0) {
          tree0 = t1.pop();
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          t1 = $.getInterceptor$x(point);
          $.insertAllBefore$2$x(t1.get$parent(point), pool, point);
          t1.remove$0(point);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw $.ioore(i);
      t1 = $.get$nodes$x(shadowInsertionTrees[i]);
      t2 = $.getInterceptor$x(point);
      $.insertAllBefore$2$x(t2.get$parent(point), t1, point);
      t2.remove$0(point);
    }
    $.clear$0$ax(this.get$nodes(this));
    $.addAll$1$ax(this.get$nodes(this), $.get$nodes$x(tree));
    for (t1 = this._generatedRoots, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
      componentName = t2._liblib0$_current;
      if ($.$eq(t1.$index(t1, componentName), tree)) {
        t1.$indexSet(t1, componentName, this);
        break;
      }
    }
  },
  _distributeNodes$2: function(tree, pool) {
    var t1, insertionPoint, t2, select, matching, notMatching, t3, node;
    if (typeof pool !== "object" || pool === null || pool.constructor !== Array || !!pool.fixed$length)
      return this._distributeNodes$2$bailout(1, tree, pool);
    for (t1 = $.get$iterator$ax($.queryAll$1$x(tree, "content")); t1.moveNext$0() === true;) {
      insertionPoint = t1.get$current();
      if (!$.WebComponent__isActive(insertionPoint))
        continue;
      t2 = $.getInterceptor$x(insertionPoint);
      select = $.$index$asx(t2.get$attributes(insertionPoint), "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(2, 0, pool, insertionPoint, t2, select, t1);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t3 = $.JSArray_methods.get$iterator(pool); t3.moveNext$0();) {
        node = t3.get$current();
        ($.WebComponent__matches(node, select) === true ? matching : notMatching).push(node);
      }
      if (matching.length === 0) {
        matching = t2.get$nodes(insertionPoint);
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(3, 0, 0, insertionPoint, t2, 0, t1, matching, notMatching);
      }
      $.insertAllBefore$2$x(t2.get$parent(insertionPoint), matching, insertionPoint);
      t2.remove$0(insertionPoint);
      pool = notMatching;
    }
    return pool;
  },
  _distributeNodes$2$bailout: function(state0, tree, pool, insertionPoint, t2, select, t1, matching, notMatching) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.get$iterator$ax($.queryAll$1$x(tree, "content"));
      default:
        var t3, node;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      insertionPoint = t1.get$current();
                      if (!$.WebComponent__isActive(insertionPoint))
                        break c$0;
                      t2 = $.getInterceptor$x(insertionPoint);
                      select = $.$index$asx(t2.get$attributes(insertionPoint), "select");
                    case 2:
                      state0 = 0;
                      if (select == null || $.$eq(select, ""))
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t3 = $.get$iterator$ax(pool); t3.moveNext$0() === true;) {
                        node = t3.get$current();
                        ($.WebComponent__matches(node, select) === true ? matching : notMatching).push(node);
                      }
                    case 3:
                      if (state0 === 3 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t2.get$nodes(insertionPoint);
                          case 3:
                            state0 = 0;
                        }
                      $.insertAllBefore$2$x(t2.get$parent(insertionPoint), matching, insertionPoint);
                      t2.remove$0(insertionPoint);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  },
  get$nodes: function(_) {
    return $.get$nodes$x(this.get$host(this));
  },
  replaceWith$1: function(_, otherNode) {
    $.replaceWith$1$x(this.get$host(this), otherNode);
  },
  remove$0: function(_) {
    return $.remove$0$ax(this.get$host(this));
  },
  get$nextNode: function(_) {
    return $.get$nextNode$x(this.get$host(this));
  },
  set$text: function(_, v) {
    $.set$text$x(this.get$host(this), v);
  },
  contains$1: function(_, other) {
    return $.contains$1$asx(this.get$host(this), other);
  },
  insertBefore$2: function(_, newChild, refChild) {
    return $.insertBefore$2$x(this.get$host(this), newChild, refChild);
  },
  insertAllBefore$2: function(_, newChild, refChild) {
    return $.insertAllBefore$2$x(this.get$host(this), newChild, refChild);
  },
  get$attributes: function(_) {
    return $.get$attributes$x(this.get$host(this));
  },
  get$children: function(_) {
    return $.get$children$x(this.get$host(this));
  },
  get$classes: function(_) {
    return $.get$classes$x(this.get$host(this));
  },
  clone$1: function(_, deep) {
    return $.clone$1$x(this.get$host(this), deep);
  },
  get$parent: function(_) {
    return $.get$parent$x(this.get$host(this));
  },
  get$parentNode: function(_) {
    return $.get$parentNode$x(this.get$host(this));
  },
  get$id: function(_) {
    return $.get$id$x(this.get$host(this));
  },
  set$innerHtml: function(_, v) {
    $.set$innerHtml$x(this.get$host(this), v);
  },
  get$tagName: function(_) {
    return $.get$tagName$x(this.get$host(this));
  },
  matches$1: function(_, selectors) {
    return $.matches$1$x(this.get$host(this), selectors);
  },
  query$1: function(_, selectors) {
    return $.query$1$x(this.get$host(this), selectors);
  },
  queryAll$1: function(_, selectors) {
    return $.queryAll$1$x(this.get$host(this), selectors);
  },
  get$$$dom_className: function(_) {
    return $.get$$$dom_className$x(this.get$host(this));
  },
  set$$$dom_className: function(_, value) {
    $.set$$$dom_className$x(this.get$host(this), value);
  },
  get$$$dom_namespaceUri: function(_) {
    return $.get$$$dom_namespaceUri$x(this.get$host(this));
  },
  $$dom_removeChild$1: function(_, oldChild) {
    return $.$$dom_removeChild$1$x(this.get$host(this), oldChild);
  },
  $$dom_replaceChild$2: function(_, newChild, oldChild) {
    return $.$$dom_replaceChild$2$x(this.get$host(this), newChild, oldChild);
  },
  get$xtag: function(_) {
    return $.get$xtag$x(this.get$host(this));
  },
  set$xtag: function(_, value) {
    $.set$xtag$x(this.get$host(this), value);
  },
  $isElement: true,
  $asElement: null,
  $isNode: true,
  $asNode: null
},

ScopedCssMapper: {"": "Object;_mapping",
  $index: function(_, selector) {
    var t1 = this._mapping;
    return t1.$index(t1, selector);
  }
},

WebComponent__matches: function(node, selector) {
  if (typeof selector !== "string")
    return $.WebComponent__matches$bailout(1, node, selector);
  if (typeof node !== "object" || node === null || !$.getInterceptor(node).$isElement)
    return selector === "*";
  return $.matches$1$x(node, selector);
},

WebComponent__matches$bailout: function(state0, node, selector) {
  if (typeof node !== "object" || node === null || !$.getInterceptor(node).$isElement)
    return $.$eq(selector, "*");
  return $.matches$1$x(node, selector);
},

WebComponent__isActive: function(node) {
  var t1, t2;
  for (node = $.get$parent$x(node); node != null; node = t1.get$parent(node)) {
    t1 = $.getInterceptor$x(node);
    t2 = t1.get$tagName(node);
    if (typeof t2 !== "string")
      return $.WebComponent__isActive$bailout(1, t1, t2, node);
    if (t2 !== "CONTENT") {
      t2 = t1.get$tagName(node);
      if (typeof t2 !== "string")
        return $.WebComponent__isActive$bailout(2, t1, t2, node);
      t2 = t2 === "SHADOW";
    } else
      t2 = true;
    if (t2)
      return false;
  }
  return true;
},

WebComponent__isActive$bailout: function(state0, t1, t2, node) {
  switch (state0) {
    case 0:
      node = $.get$parent$x(node);
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(node != null))
                break L0;
              t1 = $.getInterceptor$x(node);
              t2 = t1.get$tagName(node);
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && !$.$eq(t2, "CONTENT"))
                switch (state0) {
                  case 0:
                    t2 = t1.get$tagName(node);
                  case 2:
                    state0 = 0;
                    t2 = $.$eq(t2, "SHADOW");
                }
              else
                t2 = true;
              if (t2)
                return false;
              node = t1.get$parent(node);
          }
      return true;
  }
},

ScopedCssMapper$: function(_mapping) {
  return new $.ScopedCssMapper(_mapping);
},

_realShadowRoot: function() {
  return $.useShadowDom && $.ShadowRoot_supported();
}}],
["web_ui.observe.observable", "package:web_ui/observe/observable.dart", , {
ChangeNotification: {"": "Object;oldValue>,newValue>,changes<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeNotification)
      t1 = $.$eq(this.oldValue, other.oldValue) && $.$eq(this.newValue, other.newValue) && $.$eq(this.changes, other.changes);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash3(this.oldValue, this.newValue, this.changes);
  },
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + $.S(this.newValue) + ": " + $.S(t1) + ">";
    return "#<ChangeNotification from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeNotification: true
},

ChangeRecord: {"": "Object;type>,key>,oldValue>,newValue>",
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeRecord)
      if (this.type === other.type)
        if (this.key === other.key) {
          t1 = this.oldValue;
          t2 = other.oldValue;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this.newValue;
            t2 = other.newValue;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash4(this.type, this.key, this.oldValue, this.newValue);
  },
  toString$0: function(_) {
    var typeStr = null;
    switch (this.type) {
      case 1:
        typeStr = "field";
        break;
      case 2:
        typeStr = "index";
        break;
      case 6:
        typeStr = "insert";
        break;
      case 10:
        typeStr = "remove";
        break;
    }
    return "#<ChangeRecord " + typeStr + " " + this.key + " from " + this.oldValue + " to " + this.newValue + ">";
  },
  $isChangeRecord: true
},

observe_closure: {"": "Closure;callback_0,obs_1",
  call$1: function(changes) {
    var t1 = this.obs_1;
    this.callback_0.call$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
},

Observable: {"": "Object;$$_observers@,$$_changes@,hashCode>", $isObservable: true},

deliverChangesSync_closure: {"": "Closure;",
  call$2: function(id, obs) {
    obs._deliver$0();
  },
  $isFunction: true
},

_ExpressionObserver: {"": "Object;_id<,_expression,_callback,_debugName,_reads,_unobservers,_scheduled@,_liblib3$_value",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1 = this._id;
    return "<observer " + $.S(t1) + ">";
  },
  _observe$0: function() {
    var e, trace, $parent, t1, exception;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib3$_value = this._expression$0();
      t1 = this._liblib3$_value;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable) && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isList) && (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isObservable))
        this._liblib3$_value = $.toList$0$ax($.listSuperNativeTypeCast(t1, "$isIterable"));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + $.S(this));
      this._liblib3$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    t1.clear$0(t1);
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._callback$1(change);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._callback, "from " + $.S(this));
    }

  },
  _observeValue$0: function() {
    var value = this._liblib3$_value;
    if (typeof value !== "object" || value === null || !$.getInterceptor(value).$isObservable)
      return;
    this._unobservers.push($.observeChanges(value, new $._ExpressionObserver__observeValue_closure(this, value)));
  },
  _addRead$3: function(target, type, key) {
    var reads, mask, e, trace, t1, t2, exception;
    reads = this._reads.putIfAbsent$2(target, new $._ExpressionObserver__addRead_closure());
    try {
      mask = $.$index$asx(reads, key);
      if (mask == null)
        mask = 0;
      t1 = mask;
      t2 = type;
      if (typeof t1 !== "number")
        throw t1.$or();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.$indexSet$ax(reads, key, (t1 | t2) >>> 0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, key, "hashCode or operator == from " + $.S(this));
    }

  },
  _watchForChange$2: function(target, reads) {
    this._unobservers.push($.observeChanges(target, new $._ExpressionObserver__watchForChange_closure(this, reads)));
  },
  get$_watchForChange: function() {
    return new $.BoundClosure$2(this, "_watchForChange$2", null);
  },
  _unobserve$0: function() {
    for (var t1 = $.JSArray_methods.get$iterator(this._unobservers); t1.moveNext$0();)
      t1._liblib$_current.call$0();
    this._scheduled = false;
  },
  get$_unobserve: function() {
    return new $.Bound__unobserve__ExpressionObserver(this, "_unobserve$0", null);
  },
  _deliver$0: function() {
    var oldValue, e, trace, exception, t1, change;
    if (!this._scheduled)
      return;
    oldValue = this._liblib3$_value;
    this._unobserve$0();
    this._observe$0();
    try {
      if ($.$eq(oldValue, this._liblib3$_value))
        return;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, oldValue, "operator == from " + $.S(this));
      return;
    }

    change = $.ChangeNotification$(oldValue, this._liblib3$_value, null);
    this._runCallback$1(change);
    return change;
  }
},

_ExpressionObserver__observeValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(changes) {
    var t1 = this.value_1;
    this.this_0._runCallback$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
},

_ExpressionObserver__addRead_closure: {"": "Closure;",
  call$0: function() {
    return $.Map_Map(null, null);
  },
  $isFunction: true,
  $is_void_: true
},

_ExpressionObserver__watchForChange_closure: {"": "Closure;this_0,reads_1",
  call$1: function(changes) {
    var t1, t2, t3, change, t4, t5, mask;
    t1 = this.this_0;
    if (t1.get$_scheduled())
      return;
    t2 = $.get$iterator$ax(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
      return this.call$1$bailout(1, t1, t3, t2);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t4 = $.getInterceptor$x(change);
      t5 = t4.get$key(change);
      if (t5 >>> 0 !== t5 || t5 >= t3.length)
        throw $.ioore(t5);
      mask = t3[t5];
      if (mask != null) {
        t4 = t4.get$type(change);
        if (typeof mask !== "number")
          throw mask.$and();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t4 = (mask & t4) >>> 0 !== 0;
      } else
        t4 = false;
      if (t4) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null) {
          t2 = $.Comparable_compare$closure;
          t3 = new $._SplayTreeNode(null, null, null);
          t3.$builtinTypeInfo = [null];
          t2 = new $.SplayTreeMap(t2, null, t3, 0, 0, 0);
          t2.$builtinTypeInfo = [null, null];
          $._changedExpressions = t2;
        }
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1.get$_id(), t1);
        return;
      }
    }
  },
  call$1$bailout: function(state0, t1, t3, t2) {
    switch (state0) {
      case 0:
        t1 = this.this_0;
        if (t1.get$_scheduled())
          return;
        t2 = $.get$iterator$ax(changes);
        t3 = this.reads_1;
      case 1:
        var t4, change, t5, mask;
        state0 = 0;
        t4 = $.getInterceptor$asx(t3);
        for (; t2.moveNext$0() === true;) {
          change = t2.get$current();
          t5 = $.getInterceptor$x(change);
          mask = t4.$index(t3, t5.get$key(change));
          if (mask != null) {
            t5 = t5.get$type(change);
            if (typeof mask !== "number")
              throw mask.$and();
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t5 = (mask & t5) >>> 0 !== 0;
          } else
            t5 = false;
          if (t5) {
            t1.set$_scheduled(true);
            if ($._changedExpressions == null) {
              t2 = $.Comparable_compare$closure;
              t3 = new $._SplayTreeNode(null, null, null);
              t3.$builtinTypeInfo = [null];
              t2 = new $.SplayTreeMap(t2, null, t3, 0, 0, 0);
              t2.$builtinTypeInfo = [null, null];
              $._changedExpressions = t2;
            }
            t2 = $._changedExpressions;
            t2.$indexSet(t2, t1.get$_id(), t1);
            return;
          }
        }
    }
  },
  $isFunction: true
},

closure5: {"": "Closure;",
  call$1: function(message) {
    return $.print(message);
  },
  $isFunction: true
},

_ObservableAnnotation: {"": "Object;"},

ChangeNotification$: function(oldValue, newValue, changes) {
  return new $.ChangeNotification(oldValue, newValue, changes);
},

ChangeRecord$: function(type, key, oldValue, newValue) {
  return new $.ChangeRecord(type, key, oldValue, newValue);
},

observe: function(value, callback, debugName) {
  var exprObserver = $._ExpressionObserver$(value, callback, debugName);
  if (!exprObserver._observe$0())
    return $._doNothing$closure;
  return exprObserver.get$_unobserve();
},

observeChanges: function(obj, observer) {
  var t1, node;
  if (obj.get$$$_observers() == null)
    obj.set$$$_observers($.LinkedList$(null));
  t1 = obj.get$$$_observers();
  node = t1.add$1(t1, observer);
  return node.get$remove(node);
},

Observable$: function() {
  var t1 = $.$add$ns($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t1;
  return new $.Observable(null, null, t1);
},

hasObservers: function($self) {
  var t1 = $self.$$_observers;
  return t1 != null && t1.get$head(t1) != null;
},

observeReads: function() {
  return $._activeObserver != null;
},

notifyRead: function($self, type, key) {
  return $._activeObserver._addRead$3($self, type, key);
},

notifyChange: function($self, type, key, oldValue, newValue) {
  if ((type & 14) === 0)
    if (oldValue == null ? newValue == null : oldValue === newValue)
      return;
  if ($._changedObjects == null) {
    $._changedObjects = [];
    $.setImmediate($.deliverChangesSync$closure);
  }
  if ($self.$$_changes == null) {
    $self.$$_changes = [];
    $._changedObjects.push($self);
  }
  $self.$$_changes.push($.ChangeRecord$(type, key, oldValue, newValue));
},

_doNothing: function() {
},

deliverChangesSync: function() {
  var observable, changes, observer, error, trace, iterations, t1, t2, changedExpressions, iterations0, $arguments, n, exception;
  iterations = 0;
  while (true) {
    t1 = $._changedObjects;
    t2 = t1 == null;
    if (!(!t2 || $._changedExpressions != null))
      break;
    $._changedObjects = null;
    changedExpressions = $._changedExpressions;
    $._changedExpressions = null;
    iterations0 = iterations + 1;
    if (iterations === $.circularNotifyLimit) {
      $._diagnoseCircularLimit(t1, changedExpressions);
      return;
    }
    if (!t2) {
      t1.get$iterator;
      $arguments = $.substitute($.getField(t1, "$asJSArray"), $.getRuntimeTypeInfo(t1));
      t2 = $arguments == null ? null : $arguments[0];
      t1 = new $.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      for (; t1.moveNext$0();) {
        observable = t1._liblib$_current;
        changes = observable.get$$$_changes();
        observable.set$$$_changes(null);
        for (t2 = observable.get$$$_observers(), t2.get$head, n = t2._head; n != null; n = n.get$next()) {
          observer = $.get$value$x(n);
          try {
            observer.call$1(changes);
          } catch (exception) {
            t2 = $.unwrapException(exception);
            error = t2;
            trace = $.getTraceFromException(exception);
            $.onObserveUnhandledError.call$4(error, trace, observer, "from " + $.S(observable));
          }

        }
      }
    }
    if (changedExpressions != null)
      changedExpressions.forEach$1(changedExpressions, new $.deliverChangesSync_closure());
    iterations = iterations0;
  }
},

_diagnoseCircularLimit: function(changedObjects, changedExpressions) {
  var trace, t1, observable, changes, exprObserver, change, t2, msg;
  trace = [];
  if (changedObjects != null)
    for (changedObjects.get$iterator, t1 = $.ListIterator$(changedObjects, $.getRuntimeTypeArgument(changedObjects, "JSArray", 0)); t1.moveNext$0();) {
      observable = t1._liblib$_current;
      changes = observable.get$$$_changes();
      trace.push($.S(observable) + " " + $.S(changes));
    }
  if (changedExpressions != null)
    for (changedExpressions.get$values, t1 = $._SplayTreeValueIterable$(changedExpressions, $.getRuntimeTypeArgument(changedExpressions, "SplayTreeMap", 0), $.getRuntimeTypeArgument(changedExpressions, "SplayTreeMap", 1)), t1 = $._SplayTreeValueIterator$(t1._map, $.getRuntimeTypeArgument(t1, "_SplayTreeValueIterable", 0), $.getRuntimeTypeArgument(t1, "_SplayTreeValueIterable", 1)); t1.moveNext$0();) {
      exprObserver = t1.get$current();
      change = exprObserver._deliver$0();
      if (change != null)
        trace.push($.S(exprObserver) + " " + $.S(change));
    }
  $._changedObjects = null;
  $._changedExpressions = null;
  t1 = "exceeded notifiction limit of " + $.circularNotifyLimit + ", possible circular reference in observer callbacks: ";
  t2 = $.IterableMixinWorkaround_takeList(trace, 10);
  msg = t1 + t2.join$1(t2, ", ");
  $.get$onCircularNotifyLimit().call$1(msg);
},

_ExpressionObserver$: function(_expression, _callback, _debugName) {
  var t1 = $.$add$ns($._ExpressionObserver__nextId, 1);
  $._ExpressionObserver__nextId = t1;
  return new $._ExpressionObserver(t1, _expression, _callback, _debugName, $.Map_Map(null, null), [], false, null);
},

defaultObserveUnhandledError: function(error, trace, obj, message) {
  $.print("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\nerror:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
}}],
["web_ui.src.utils_observe", "package:web_ui/src/utils_observe.dart", , {
setImmediate_closure: {"": "Closure;callback_0,port_1",
  call$2: function(msg, sendPort) {
    var t1 = this.port_1;
    t1.close$0(t1);
    this.callback_0.call$0();
  },
  $isFunction: true
},

hash2: function(x, y) {
  return $.$add$ns($.$mul$n($.get$hashCode$(x), 31), $.get$hashCode$(y));
},

hash3: function(x, y, z) {
  return $.hash2($.hash2(x, y), z);
},

hash4: function(w, x, y, z) {
  return $.hash2($.hash2(w, x), $.hash2(y, z));
},

setImmediate: function(callback) {
  var port, t1;
  port = $.ReceivePort_ReceivePort();
  port.receive$1(new $.setImmediate_closure(callback, port));
  t1 = port.toSendPort$0();
  t1.send$1(t1, null);
}}],
["x_tchart", "_from_packages/dartemis_toolbox/widgets/xtchart.dart", , {
XTchart: {"": "WebComponent;_css,__t,ymin,ymax,_onScreen,stack,colors,_host,_shadowRoots,_generatedRoots,_mapper",
  created_autogenerated$0: function() {
    var __root = this.createShadowRoot$1(this, "x-tchart");
    this.setScopedCss$2("x-tchart", $.ScopedCssMapper$($.makeLiteralMap(["x-tchart", "[is=\"x-tchart\"]"])));
    this._css = this.getScopedCss$1("x-tchart");
    this.__t = $.Template$(__root);
    $.add$1$ax($.get$nodes$x(__root), $.clone$1$x($.get$XTchart___shadowTemplate(), true));
    this.__t.create$0();
  },
  inserted_autogenerated$0: function() {
    var t1 = this.__t;
    t1.insert$0(t1);
  },
  removed_autogenerated$0: function() {
    var t1 = this.__t;
    t1.remove$0(t1);
    this.__t = null;
  },
  clamp0$2: function(high, value) {
    return $.max(0, $.min(high, value));
  },
  push$1: function(values) {
    var c, g, w0, h0, l, hi, t1, v, yratio, x, y, i, t2, t3, v0, y0, t4, t5;
    c = this._onScreen;
    g = $.get$context2d$x(c);
    w0 = c.width;
    h0 = c.height;
    g.save();
    this.shiftContext$5(g, w0, h0, -1, 0);
    l = values.length;
    if (h0 == null)
      throw h0.$div();
    hi = h0 / l;
    t1 = this.ymax;
    v = this.ymin;
    yratio = hi / (t1 - v);
    if (w0 == null)
      throw $.iae(w0);
    x = 0.5 + w0 - 1;
    y = 0.5 + h0 - 1;
    for (i = l - 1, t2 = this.stack, t3 = this.colors; i > -1; --i) {
      v0 = values[i];
      if (v0 == null)
        v0 = v;
      g.beginPath();
      if (v0 == null)
        throw v0.$sub();
      y0 = y - $.max(0, $.min(t1, v0 - v)) * yratio;
      g.moveTo(x, y0);
      g.lineTo(x, y);
      g.closePath();
      t4 = t3.length;
      t5 = $.JSInt_methods.$mod(i, t4);
      if (t5 < 0 || t5 >= t4)
        throw $.ioore(t5);
      g.strokeStyle = t3[t5];
      g.stroke();
      y = t2 ? y0 : y - hi;
    }
    g.restore();
  },
  shiftContext$5: function(g, w, h, dx, dy) {
    var t1, t2, t3, t4;
    t1 = this.clamp0$2(w, -dx);
    t2 = this.clamp0$2(h, -dy);
    if (w == null)
      throw w.$sub();
    t3 = this.clamp0$2(w, w - dx);
    if (h == null)
      throw h.$sub();
    t4 = $.getInterceptor$x(g);
    t4.putImageData$3(g, t4.getImageData$4(g, t1, t2, t3, this.clamp0$2(h, h - dy)), 0, 0);
    g.clearRect(w - 1, 0, 1, h);
  },
  inserted$0: function() {
    this._onScreen = $.interceptedTypeCast(this.query$1(this, "canvas"), "$isCanvasElement");
  }
},

XTchart$: function() {
  return new $.XTchart(null, null, 0, 100, null, false, ["rgb(153, 216, 201)", "rgb(158, 188, 218)", "rgb(253, 187, 132)", "rgb(201, 148, 199)", "rgb(188, 189, 220)", "rgb(161, 217, 155)", "rgb(189, 189, 189)"], null, null, $.makeLiteralMap([]), $.ScopedCssMapper$($.makeLiteralMap([])));
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.isAssignable$closure = new $.Closure$isAssignable($.isAssignable, "isAssignable$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.main0$closure = new $.Closure$main($.main0, "main0$closure");
$._SQE_ctor$closure = new $.Closure$ctor($._SQE_ctor, "_SQE_ctor$closure");
$._SQE_reset$closure = new $.Closure$reset($._SQE_reset, "_SQE_reset$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.demo_proto2d$closure = new $.Closure$demo_proto2d($.demo_proto2d, "demo_proto2d$closure");
$.start$closure = new $.Closure$start($.start, "start$closure");
$.linear$closure = new $.Closure$linear($.linear, "linear$closure");
$.random$closure = new $.Closure$random($.random, "random$closure");
$.inElastic$closure = new $.Closure$inElastic($.inElastic, "inElastic$closure");
$.Animatable__ctor$closure = new $.Closure$_ctor($.Animatable__ctor, "Animatable__ctor$closure");
$.onNoop$closure = new $.Closure$onNoop($.onNoop, "onNoop$closure");
$.Transform__ctor$closure = new $.Closure$_ctor0($.Transform__ctor, "Transform__ctor$closure");
$._doNothing$closure = new $.Closure$_doNothing($._doNothing, "_doNothing$closure");
$.deliverChangesSync$closure = new $.Closure$deliverChangesSync($.deliverChangesSync, "deliverChangesSync$closure");
$.defaultObserveUnhandledError$closure = new $.Closure$defaultObserveUnhandledError($.defaultObserveUnhandledError, "defaultObserveUnhandledError$closure");
$.QuadTreeXYAabb.$isObject = true;
$._EventSink.$is_EventSink = true;
$._EventSink.$isObject = true;
$.Emitter.$isComponent = true;
$.Emitter.$isObject = true;
$._DelayedEvent.$is_DelayedEvent = true;
$._DelayedEvent.$isObject = true;
$.TableCellElement.$isNode = true;
$.TableCellElement.$isObject = true;
$.TableCellElement.$isObject = true;
$.TableRowElement.$isNode = true;
$.TableRowElement.$isObject = true;
$.TableRowElement.$isObject = true;
$.TableSectionElement.$isObject = true;
$.TableSectionElement.$isNode = true;
$.TableSectionElement.$isObject = true;
$.Comparable.$isComparable = true;
$.Comparable.$isObject = true;
$.DateTime.$isDateTime = true;
$.DateTime.$isObject = true;
$.DateTime.$isComparable = true;
$.DateTime.$asComparable = [null];
$.DateTime.$isObject = true;
$.Duration.$isObject = true;
$.Duration.$isComparable = true;
$.Duration.$asComparable = [$.Duration];
$.Duration.$isObject = true;
$.Duration.$isDuration = true;
$._IsolateContext.$isObject = true;
$._IsolateContext.$isObject = true;
$._IsolateEvent.$isObject = true;
$.Transform.$isPoolable = true;
$.Transform.$isObject = true;
$.Transform.$isComponent = true;
$.Transform.$isObject = true;
$.Bag.$isObject = true;
$.Function.$isFunction = true;
$.Function.$isObject = true;
$.Iterable.$isIterable = true;
$.Iterable.$isObject = true;
$.Poolable.$isObject = true;
$.Poolable.$isPoolable = true;
$.Node.$isNode = true;
$.Node.$isObject = true;
$.Component.$isComponent = true;
$.Component.$isObject = true;
$.Element.$isNode = true;
$.Element.$isObject = true;
$.Element.$isObject = true;
$.ComponentType.$isObject = true;
$.Map.$isMap = true;
$.Map.$isObject = true;
$.Object.$isObject = true;
$.Entity.$isEntity = true;
$.Entity.$isObject = true;
$.Match.$isObject = true;
$.EntitySystem.$isObject = true;
$.EntitySystem.$isObject = true;
$.ReceivePort.$isObject = true;
$.Event.$isObject = true;
$.Manager.$isObject = true;
$.Manager.$isObject = true;
$.Type.$isObject = true;
$._Watcher.$isObject = true;
$.Matrix4.$isObject = true;
$.Matrix4.$isMatrix4 = true;
$.Vector2.$isVector2 = true;
$.Vector2.$isObject = true;
$.Observable.$isObservable = true;
$.Observable.$isObject = true;
$.Future.$isFuture = true;
$.Future.$isObject = true;
$.Vector4.$isObject = true;
$.Vector4.$isVector4 = true;
$.Vector3.$isVector3 = true;
$.Vector3.$isObject = true;
$.Animatable.$isAnimatable = true;
$.Animatable.$isComponent = true;
$.Animatable.$isObject = true;
$.Animatable.$isPoolable = true;
$.Animatable.$isObject = true;
$.Animation.$isAnimation = true;
$.Animation.$isObject = true;
$.JSBool.$isbool = true;
$.JSBool.$isObject = true;
$.JSBool.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isIterable = true;
$.JSArray.$isObject = true;
$.JSArray.$isList = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.Drawable.$isComponent = true;
$.Drawable.$isObject = true;
$.LinkedListNode.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isComparable = true;
$.JSNumber.$asComparable = [$.JSNumber];
$.JSNumber.$isObject = true;
$.JSNumber.$isnum = true;
$.JSNumber.$isObject = true;
$.JSInt.$isint = true;
$.JSInt.$isnum = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isComparable = true;
$.JSInt.$asComparable = [$.JSNumber];
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isComparable = true;
$.JSInt.$asComparable = [$.JSNumber];
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isComparable = true;
$.JSInt.$asComparable = [$.JSNumber];
$.JSInt.$isObject = true;
$.JSDouble.$isnum = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isComparable = true;
$.JSDouble.$asComparable = [$.JSNumber];
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isComparable = true;
$.JSDouble.$asComparable = [$.JSNumber];
$.JSDouble.$isObject = true;
$.JSDouble.$isdouble = true;
$.JSString.$isString = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isComparable = true;
$.JSString.$asComparable = [$.JSString];
$.JSString.$isObject = true;
$.Constraints.$isObject = true;
$.Constraints.$isComponent = true;
$.Constraint.$isObject = true;
$.Particles.$isComponent = true;
$.Particles.$isObject = true;
$._SplayTreeNode.$isObject = true;
$._SQE.$is_SQE = true;
$._SQE.$isObject = true;
$.CanvasRenderingContext2D.$isObject = true;
$.CanvasRenderingContext2D.$isCanvasRenderingContext2D = true;
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.C_CloseToken = new $.CloseToken();
$.C_JSUnknown = new $.JSUnknown();
$.C__DelayedDone = new $._DelayedDone();
$.C__Random = new $._Random();
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_hashchange = $.setRuntimeTypeInfo(new $.EventStreamProvider("hashchange"), [$.Event]);
$.JSArray_methods = $.JSArray.prototype;
$.JSDouble_methods = $.JSDouble.prototype;
$.JSInt_methods = $.JSInt.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
$.List_8h5 = $.setRuntimeTypeInfo(Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]), [$.JSString]);
$.List_Aia = $.setRuntimeTypeInfo(Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]), [$.JSString]);
$.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
$.List_empty = Isolate.makeConstantList([]);
$.List_http_https_ftp_mailto = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
$.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
$.Map_8h6qb = $.setRuntimeTypeInfo(new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.List_8h5), [null]);
$.Map_Ai46y = $.setRuntimeTypeInfo(new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.List_Aia), [null]);
$.NodeList_methods = $.NodeList.prototype;
$.Type_8aB = $.createRuntimeType('int');
$.Type_GZG = $.createRuntimeType('Particles');
$.Type_I6I = $.createRuntimeType('Animatable');
$.Type_IYi = $.createRuntimeType('String');
$.Type_Opk = $.createRuntimeType('Emitter');
$.Type_UAO = $.createRuntimeType('PlayerManager');
$.Type_UU7 = $.createRuntimeType('Transform');
$.Type_Uzk = $.createRuntimeType('GroupManager');
$.Type_a9w = $.createRuntimeType('bool');
$.Type_bAc = $.createRuntimeType('System_Simulator');
$.Type_cGl = $.createRuntimeType('double');
$.Type_iuI = $.createRuntimeType('Drawable');
$.Type_rpo = $.createRuntimeType('Constraints');
$.Type_woc = $.createRuntimeType('Null');
$.Window_methods = $.Window.prototype;
$._WatcherType_HASH_MAP = new $._WatcherType("HASH_MAP");
$._WatcherType_LIST = new $._WatcherType("LIST");
$._WatcherType_ORDERED_MAP = new $._WatcherType("ORDERED_MAP");
$._WatcherType_OTHER = new $._WatcherType("OTHER");
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.ComponentType__nextBit = 1;
$.ComponentType__nextId = 0;
$._SystemBitManager__POS = 0;
$._SystemBitManager__systemBits = null;
$.__$activeDemo = null;
$.foregroundcolor = 3823368447;
$.Device__isOpera = null;
$.Device__isIE = null;
$.useObservers = false;
$._watchers = null;
$.useShadowDom = false;
$.Observable_$_nextHashCode = 0;
$._activeObserver = null;
$.circularNotifyLimit = 100;
$._changedObjects = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = $.defaultObserveUnhandledError$closure;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$not$i = function(receiver) {
  if (typeof receiver == "number" && Math.floor(receiver) == receiver)
    return ~receiver >>> 0;
  return $.getInterceptor$i(receiver).$not(receiver);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clone$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).clone$0(receiver);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.codeUnitAt$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.createShadowRoot$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createShadowRoot$0(receiver);
};
$.disabled$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).disabled$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fillText$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$$$dom_className$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_className(receiver);
};
$.get$$$dom_namespaceUri$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_namespaceUri(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$context2D$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2D(receiver);
};
$.get$context2d$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2d(receiver);
};
$.get$hash$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$hash(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$href$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$href(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$isNotEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$last$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$last(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$newValue$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$newValue(receiver);
};
$.get$nextNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nextNode(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$parentNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parentNode(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$xtag$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$xtag(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.insert$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).insert$0(receiver);
};
$.insertAllBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
};
$.insertBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.matches$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).matches$1(receiver, a0);
};
$.query$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).query$1(receiver, a0);
};
$.queryAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.removeAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).removeAll$1(receiver, a0);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.reset$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).reset$0(receiver);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$$$dom_className$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$$$dom_className(receiver, value);
};
$.set$hash$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$hash(receiver, value);
};
$.set$href$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$href(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$xtag$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$xtag(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toInt$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.Expando$(null, $.JSInt);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.Queue_Queue({func: "void_", void: true});
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return $._DefaultZone$();
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "_componentTypes", "ComponentTypeManager__componentTypes", "get$ComponentTypeManager__componentTypes", function() {
  return $.Map_Map($.Type, $.ComponentType);
});
Isolate.$lazy($, "_objectPools", "ObjectPool__objectPools", "get$ObjectPool__objectPools", function() {
  return $.Map_Map($.Type, [$.Bag, $.Poolable]);
});
Isolate.$lazy($, "__changes", "__changes", "get$__changes", function() {
  return $.Observable$();
});
Isolate.$lazy($, "activeCtrl", "activeCtrl", "get$activeCtrl", function() {
  return $.Future_Future$value($.Ctrl$(), null);
});
Isolate.$lazy($, "foregroundcolors", "foregroundcolors", "get$foregroundcolors", function() {
  var t1 = $.JSArray_methods.map$1($.hsl_tetrad($.irgba_hsl($.foregroundcolor)), new $.closure4());
  return t1.toList$0(t1);
});
Isolate.$lazy($, "foregroundcolorsM", "foregroundcolorsM", "get$foregroundcolorsM", function() {
  var t1 = $.JSArray_methods.map$1($.hsv_monochromatic($.irgba_hsv($.foregroundcolor), 4), new $.closure3());
  return t1.toList$0(t1);
});
Isolate.$lazy($, "initDemo", "initDemo", "get$initDemo", function() {
  return $.makeLiteralMap(["proto2d", $.demo_proto2d$closure, "proto2d + animatable", new $.closure(), "proto2d + animatable + emitter (particles)", new $.closure0(), "verlet shapes", new $.closure1(), "collisions", new $.closure2()]);
});
Isolate.$lazy($, "_randomRatio", "_randomRatio", "get$_randomRatio", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "_random", "_random", "get$_random", function() {
  return $.Random_Random(null);
});
Isolate.$lazy($, "CT", "Particles_CT", "get$Particles_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_GZG);
});
Isolate.$lazy($, "CT", "Transform_CT", "get$Transform_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_UU7);
});
Isolate.$lazy($, "CT", "Constraints_CT", "get$Constraints_CT", function() {
  return $.ComponentTypeManager_getTypeFor($.Type_rpo);
});
Isolate.$lazy($, "onCircularNotifyLimit", "onCircularNotifyLimit", "get$onCircularNotifyLimit", function() {
  return new $.closure5();
});
Isolate.$lazy($, "__shadowTemplate", "XTchart___shadowTemplate", "get$XTchart___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("        <canvas style=\"width:100%;height:100%\"></canvas>\n      ");
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaKeyMessageEvent", $.MediaKeyMessageEvent);

$.defineNativeMethods("MediaKeyNeededEvent", $.MediaKeyNeededEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIInput", $.MidiInput);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("MIDIOutput", $.MidiOutput);

$.defineNativeMethodsNonleaf("MIDIPort", $.MidiPort);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("DragEvent|MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("ResourceProgressEvent", $.ResourceProgressEvent);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("MozNamedAttrMap|NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.metadata = [];
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main0$closure); });
      } else {
        $.startRootIsolate($.main0$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main0$closure); });
  } else {
    $.startRootIsolate($.main0$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=demos.html_bootstrap.dart.js.map
