<?xml version="1.0" encoding="UTF-8"?>
<project name="dartemis_toolbox" default="check">

  <property environment="env" />
  <fail message="ERROR: Please set environmental variable DART_SDK">
    <condition>
      <not>
        <isset property="env.DART_SDK" />
      </not>
    </condition>
  </fail>

  <property name="dart.sdk.dir" value="${env.DART_SDK}" />
  <property name="dart" value="${dart.sdk.dir}/bin/dart" />
  <property name="dart2js" value="${dart.sdk.dir}/bin/dart2js" />
  <property name="dartdoc" value="${dart.sdk.dir}/bin/dartdoc" />
  <property name="dartanalyzer" value="${dart.sdk.dir}/bin/dartanalyzer" />
  <property name="pub" value="${dart.sdk.dir}/bin/pub" />
  <property name="target" location="${basedir}/target"/>

  <macrodef name="dart_check">
    <attribute name="file"/>
    <sequential>
      <echo>${line.separator}---- check @{file} ----</echo>
      <exec executable="${dartanalyzer}" failonerror="true">
        <arg line="--package-root ${basedir}/packages/ --machine ${basedir}/lib/@{file}.dart"/>
      </exec>
      <exec executable="${dart}" failonerror="true">
        <arg line="--enable-checked-mode test/@{file}_test.dart"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="dart_dwc">
    <attribute name="file"/>
    <sequential>
      <exec executable="${dart}" dir="${target}/web">
        <arg line="--package-root=packages/ packages/web_ui/dwc.dart @{file}.html"/>
      </exec>
      <move file="${target}/web/_@{file}.html.html" tofile="${target}/web/@{file}.html"/>
    </sequential>
  </macrodef>

  <macrodef name="dart_optjs">
    <attribute name="file"/>
    <sequential>
      <exec executable="${dart2js}" dir="${target}/web">
        <arg line="--package-root=packages/ _@{file}.html_bootstrap.dart -o_@{file}.html_bootstrap.dart.js"/>
      </exec>
      <!--copy file="${target}/web/index0.html" tofile="${target}/web/index.html"/-->
      <replace file="${target}/web/@{file}.html">
        <replacefilter token='type="application/dart"' value='type="application/javascript"'/>
        <replacefilter token='.dart' value='.dart.js'/>
      </replace>
    </sequential>
  </macrodef>

  <target name="clean">
    <delete includeEmptyDirs="true" removeNotFollowedSymlinks="true">
      <fileset dir="${target}" followSymlinks="false"/>
    </delete>
  </target>

  <target name="pub_install" depends="">
    <exec executable="${pub}" failonerror="true">
      <arg line="install"/>
    </exec>
  </target>


  <target name="system_entity_state">
    <dart_check file="system_entity_state"/>
  </target>

  <target name="utils">
    <dart_check file="utils"/>
  </target>

  <target name="system_animator">
    <dart_check file="system_animator"/>
  </target>

  <target name="colors">
    <dart_check file="colors"/>
  </target>

  <target name="ease">
    <dart_check file="ease"/>
  </target>

  <target name="system_simple_audio" depends="system_transform">
    <dart_check file="system_simple_audio"/>
  </target>

  <target name="system_transform">
    <dart_check file="system_transform"/>
  </target>

  <target name="check" depends="system_entity_state, utils, system_animator, system_simple_audio, system_transform, ease, colors">
  </target>
<!--
  <path id="tools.path">
    <fileset dir="tools" includes="*.jar"/>
  </path>
  <taskdef name="fmpp" classname="fmpp.tools.AntTask" classpathref="tools.path"/>
-->
  <target name="-init">
    <mkdir dir="${target}"/>
    <symlink link="${target}/packages" resource="${basedir}/packages" overwrite="true"/>
    <symlink link="packages/vdrones" resource="${basedir}/lib" overwrite="true"/>
  </target>

  <target name="web" depends="-init">
    <exec executable="rsync">
      <arg line="-av --delete --links web target"/>
    </exec>
    <!--fmpp sourceFile="src/index.css.ftl" outputFile="${target}/web/index.css" /-->
    <dart_dwc file="ease_graphics"/>
    <dart_dwc file="xtchart_demo"/>
    <dart_dwc file="demos"/>
    <dart_dwc file="colors_demo"/>
  </target>

  <target name="js" depends="web">
    <dart_optjs file="ease_graphics"/>
    <dart_optjs file="xtchart_demo"/>
    <dart_optjs file="demos"/>
    <dart_optjs file="colors_demo"/>
   </target>

   <target name="remove_packages" depends="js">
    <delete includeEmptyDirs="true" removeNotFollowedSymlinks="true">
      <fileset dir="${target}/web" includes="**/packages" followsymlinks="false"/>
      <!--fileset dir="${target}/web/packages" followsymlinks="false"/-->
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${target}/web" includes="*.dart,*.dart.map"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${target}/web" includes="**/out" followsymlinks="false"/>
    </delete>
    <!-- keep browser/dart.js : required by js-interop -->
    <mkdir dir="${target}/web/packages"/>
    <copy todir="${target}/web/packages/browser">
    <fileset dir="packages/browser"/>
    </copy>
  </target>

  <target name="apidoc">
    <mkdir dir="${target}/web/apidoc"/>
    <apply executable="${dartdoc}" failonerror="true" parallel="true">
      <arg line="--out ${target}/web/apidoc --package-root=packages/ --link-api --exclude-lib=vector_math --exclude-lib=metadata --exclude-lib=dartemis --exclude-lib=simple_audio"/>
      <mapper type="glob" from="*.dart" to="--include-lib *"/>
      <fileset dir="${basedir}/lib">
        <patternset>
          <include name="*.dart"/>
          <include name="widget/*.dart"/>
          <exclude name="packages/**/*.*"/>
        </patternset>
      </fileset>
      <fileset dir="lib" includes="*.dart"/>
    </apply>
  </target>

  <target name="deploy0" depends="js, remove_packages, apidoc"/>
  <target name="deploy" depends="deploy0">
    <echo file="target/publish-site.sh">
        #!/bin/sh
        cd ${basedir}.gh-pages
        git checkout gh-pages
        git pull
        mkdir compo
        cp -fr ${basedir}/target/web/. .
        git add .
        git commit -a -m "publish reports to gh-pages"
        git push -u origin gh-pages
    </echo>
    <chmod perm="+x" file="target/publish-site.sh"/>
    <exec executable="target/publish-site.sh" failonerror="true" failifexecutionfails="true"/>
  </target>

</project>
